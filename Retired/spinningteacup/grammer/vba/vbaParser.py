# Generated from vba.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00df")
        buf.write("\u0a6b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\3\2\3\2\3\2\3\3\5\3\u012f\n\3\3\3\7\3\u0132\n\3\f\3\16")
        buf.write("\3\u0135\13\3\3\3\3\3\7\3\u0139\n\3\f\3\16\3\u013c\13")
        buf.write("\3\5\3\u013e\n\3\3\3\5\3\u0141\n\3\3\3\7\3\u0144\n\3\f")
        buf.write("\3\16\3\u0147\13\3\3\3\5\3\u014a\n\3\3\3\7\3\u014d\n\3")
        buf.write("\f\3\16\3\u0150\13\3\3\3\5\3\u0153\n\3\3\3\7\3\u0156\n")
        buf.write("\3\f\3\16\3\u0159\13\3\3\3\5\3\u015c\n\3\3\3\7\3\u015f")
        buf.write("\n\3\f\3\16\3\u0162\13\3\3\3\5\3\u0165\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\5\3\5\7\5\u016f\n\5\f\5\16\5\u0172\13\5")
        buf.write("\3\5\6\5\u0175\n\5\r\5\16\5\u0176\3\5\3\5\3\6\3\6\5\6")
        buf.write("\u017d\n\6\3\6\3\6\5\6\u0181\n\6\3\6\3\6\7\6\u0185\n\6")
        buf.write("\f\6\16\6\u0188\13\6\3\7\3\7\6\7\u018c\n\7\r\7\16\7\u018d")
        buf.write("\6\7\u0190\n\7\r\7\16\7\u0191\3\b\3\b\6\b\u0196\n\b\r")
        buf.write("\b\16\b\u0197\3\b\3\b\7\b\u019c\n\b\f\b\16\b\u019f\13")
        buf.write("\b\3\b\7\b\u01a2\n\b\f\b\16\b\u01a5\13\b\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\5\t\u01af\n\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\5\n\u01bb\n\n\3\13\3\13\5\13\u01bf")
        buf.write("\n\13\3\f\3\f\6\f\u01c3\n\f\r\f\16\f\u01c4\3\f\3\f\7\f")
        buf.write("\u01c9\n\f\f\f\16\f\u01cc\13\f\3\f\7\f\u01cf\n\f\f\f\16")
        buf.write("\f\u01d2\13\f\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01da\n\r\3")
        buf.write("\16\3\16\3\16\3\16\5\16\u01e0\n\16\3\16\3\16\5\16\u01e4")
        buf.write("\n\16\3\16\3\16\5\16\u01e8\n\16\3\16\3\16\5\16\u01ec\n")
        buf.write("\16\3\16\7\16\u01ef\n\16\f\16\16\16\u01f2\13\16\3\17\3")
        buf.write("\17\3\17\3\17\7\17\u01f8\n\17\f\17\16\17\u01fb\13\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u0242\n\20\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0248\n\21\3\21\3\21\5\21\u024c\n\21\3\21\5\21\u024f")
        buf.write("\n\21\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\5\25\u025f\n\25\3\25\3\25\5\25\u0263")
        buf.write("\n\25\3\25\7\25\u0266\n\25\f\25\16\25\u0269\13\25\5\25")
        buf.write("\u026b\n\25\3\26\3\26\3\26\5\26\u0270\n\26\3\26\3\26\3")
        buf.write("\26\3\26\5\26\u0276\n\26\3\26\3\26\5\26\u027a\n\26\3\26")
        buf.write("\7\26\u027d\n\26\f\26\16\26\u0280\13\26\3\27\3\27\5\27")
        buf.write("\u0284\n\27\3\27\3\27\5\27\u0288\n\27\3\27\5\27\u028b")
        buf.write("\n\27\3\27\3\27\5\27\u028f\n\27\3\27\3\27\3\30\3\30\5")
        buf.write("\30\u0295\n\30\3\30\3\30\5\30\u0299\n\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\5\31\u02a0\n\31\3\31\3\31\3\31\3\31\5\31\u02a6")
        buf.write("\n\31\3\31\3\31\5\31\u02aa\n\31\3\31\5\31\u02ad\n\31\3")
        buf.write("\31\3\31\3\31\5\31\u02b2\n\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\5\31\u02bc\n\31\3\31\5\31\u02bf\n\31\3")
        buf.write("\31\5\31\u02c2\n\31\3\31\3\31\5\31\u02c6\n\31\3\32\3\32")
        buf.write("\3\32\3\32\5\32\u02cc\n\32\3\32\3\32\5\32\u02d0\n\32\3")
        buf.write("\32\7\32\u02d3\n\32\f\32\16\32\u02d6\13\32\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u02dc\n\33\3\33\3\33\5\33\u02e0\n\33\3\33")
        buf.write("\3\33\5\33\u02e4\n\33\3\33\3\33\5\33\u02e8\n\33\3\33\5")
        buf.write("\33\u02eb\n\33\3\34\3\34\3\34\5\34\u02f0\n\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u02fb\n\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u0308\n\34\3\35\3\35\3\36\3\36\3\36\5\36\u030f\n")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\7\36\u0316\n\36\f\36\16\36")
        buf.write("\u0319\13\36\3\36\3\36\3\37\3\37\5\37\u031f\n\37\3\37")
        buf.write("\3\37\5\37\u0323\n\37\3\37\5\37\u0326\n\37\3\37\3\37\3")
        buf.write(" \3 \3 \3 \3 \5 \u032f\n \3 \7 \u0332\n \f \16 \u0335")
        buf.write("\13 \3!\3!\3!\3!\3\"\3\"\3\"\5\"\u033e\n\"\3\"\3\"\3\"")
        buf.write("\3\"\5\"\u0344\n\"\3\"\3\"\3#\3#\3$\3$\3$\3$\5$\u034e")
        buf.write("\n$\3$\3$\5$\u0352\n$\3$\3$\3%\3%\3%\3%\3%\3%\5%\u035c")
        buf.write("\n%\3%\3%\3%\3%\3%\3%\5%\u0364\n%\3%\3%\3%\5%\u0369\n")
        buf.write("%\3&\3&\3&\3&\5&\u036f\n&\3&\3&\5&\u0373\n&\3&\5&\u0376")
        buf.write("\n&\3&\3&\5&\u037a\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0385")
        buf.write("\n&\3&\3&\5&\u0389\n&\3&\3&\3&\5&\u038e\n&\3\'\3\'\3\'")
        buf.write("\5\'\u0393\n\'\3\'\3\'\5\'\u0397\n\'\3\'\3\'\5\'\u039b")
        buf.write("\n\'\3\'\3\'\5\'\u039f\n\'\3\'\5\'\u03a2\n\'\3\'\5\'\u03a5")
        buf.write("\n\'\3\'\5\'\u03a8\n\'\3\'\5\'\u03ab\n\'\3\'\3\'\5\'\u03af")
        buf.write("\n\'\3\'\3\'\3(\3(\3(\3(\5(\u03b7\n(\3(\3(\5(\u03bb\n")
        buf.write("(\3(\5(\u03be\n(\3(\5(\u03c1\n(\3(\3(\5(\u03c5\n(\3(\3")
        buf.write("(\3)\3)\3)\3)\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\5+\u03dc\n+\3+\3+\7+\u03e0\n+\f+\16+\u03e3\13+\3")
        buf.write("+\5+\u03e6\n+\3+\3+\5+\u03ea\n+\3,\3,\3,\3,\3,\3,\3,\5")
        buf.write(",\u03f3\n,\3-\3-\3.\3.\3.\3.\3.\3.\3.\5.\u03fe\n.\3/\3")
        buf.write("/\3/\5/\u0403\n/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3")
        buf.write("\61\5\61\u040d\n\61\3\61\3\61\5\61\u0411\n\61\3\61\6\61")
        buf.write("\u0414\n\61\r\61\16\61\u0415\3\62\3\62\3\62\3\62\3\63")
        buf.write("\3\63\5\63\u041e\n\63\3\63\3\63\5\63\u0422\n\63\3\63\3")
        buf.write("\63\5\63\u0426\n\63\3\63\3\63\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u042e\n\64\3\64\3\64\5\64\u0432\n\64\3\64\3\64\3\65\3")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\3\66\5\66\u043e\n\66\3\66")
        buf.write("\3\66\5\66\u0442\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u0449")
        buf.write("\n\66\5\66\u044b\n\66\3\67\3\67\3\67\3\67\5\67\u0451\n")
        buf.write("\67\3\67\3\67\5\67\u0455\n\67\3\67\3\67\38\38\58\u045b")
        buf.write("\n8\38\38\58\u045f\n8\38\38\58\u0463\n8\38\38\39\39\7")
        buf.write("9\u0469\n9\f9\169\u046c\139\39\59\u046f\n9\39\39\3:\3")
        buf.write(":\5:\u0475\n:\3:\3:\3:\3:\3:\3:\3:\7:\u047e\n:\f:\16:")
        buf.write("\u0481\13:\3;\3;\5;\u0485\n;\3;\3;\3;\3;\3;\3;\3;\7;\u048e")
        buf.write("\n;\f;\16;\u0491\13;\3<\3<\3<\3<\3<\7<\u0498\n<\f<\16")
        buf.write("<\u049b\13<\3=\3=\5=\u049f\n=\3=\3=\5=\u04a3\n=\3=\3=")
        buf.write("\5=\u04a7\n=\3=\3=\3>\3>\5>\u04ad\n>\3>\3>\5>\u04b1\n")
        buf.write(">\3>\3>\5>\u04b5\n>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\5A\u04cd\nA\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\5B\u04d7\nB\3B\3B\5B\u04db\nB\3B\7B\u04de")
        buf.write("\nB\fB\16B\u04e1\13B\3C\3C\3C\3C\3C\3C\3C\3C\5C\u04eb")
        buf.write("\nC\3C\3C\5C\u04ef\nC\3C\7C\u04f2\nC\fC\16C\u04f5\13C")
        buf.write("\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0502\nD\3D\3D\5")
        buf.write("D\u0506\nD\3D\3D\3D\3D\3D\3D\3D\5D\u050f\nD\3D\3D\5D\u0513")
        buf.write("\nD\3D\5D\u0516\nD\3E\3E\5E\u051a\nE\3E\3E\5E\u051e\n")
        buf.write("E\3E\5E\u0521\nE\7E\u0523\nE\fE\16E\u0526\13E\3E\5E\u0529")
        buf.write("\nE\3E\5E\u052c\nE\3E\3E\5E\u0530\nE\3E\5E\u0533\nE\6")
        buf.write("E\u0535\nE\rE\16E\u0536\5E\u0539\nE\3F\3F\3F\5F\u053e")
        buf.write("\nF\3F\3F\5F\u0542\nF\3F\3F\5F\u0546\nF\3F\3F\5F\u054a")
        buf.write("\nF\5F\u054c\nF\3G\3G\3G\3G\5G\u0552\nG\3G\3G\5G\u0556")
        buf.write("\nG\3G\5G\u0559\nG\3H\3H\3H\5H\u055e\nH\3H\3H\5H\u0562")
        buf.write("\nH\3H\3H\3H\3H\5H\u0568\nH\3H\5H\u056b\nH\3H\5H\u056e")
        buf.write("\nH\3H\3H\5H\u0572\nH\3H\3H\5H\u0576\nH\3H\3H\3I\3I\3")
        buf.write("I\5I\u057d\nI\3I\3I\5I\u0581\nI\3I\3I\3I\3I\5I\u0587\n")
        buf.write("I\3I\5I\u058a\nI\3I\3I\5I\u058e\nI\3I\3I\3J\3J\3J\5J\u0595")
        buf.write("\nJ\3J\3J\5J\u0599\nJ\3J\3J\3J\3J\5J\u059f\nJ\3J\5J\u05a2")
        buf.write("\nJ\3J\3J\5J\u05a6\nJ\3J\3J\3K\3K\3K\3K\5K\u05ae\nK\3")
        buf.write("K\3K\5K\u05b2\nK\3K\5K\u05b5\nK\3K\5K\u05b8\nK\3K\3K\5")
        buf.write("K\u05bc\nK\3K\3K\3L\3L\3L\3L\5L\u05c4\nL\3L\3L\5L\u05c8")
        buf.write("\nL\3L\3L\5L\u05cc\nL\5L\u05ce\nL\3L\5L\u05d1\nL\3M\3")
        buf.write("M\3M\5M\u05d6\nM\3N\3N\3N\3N\5N\u05dc\nN\3N\3N\5N\u05e0")
        buf.write("\nN\3N\3N\5N\u05e4\nN\3N\7N\u05e7\nN\fN\16N\u05ea\13N")
        buf.write("\3O\3O\5O\u05ee\nO\3O\3O\5O\u05f2\nO\3O\3O\5O\u05f6\n")
        buf.write("O\3O\3O\3O\5O\u05fb\nO\3P\3P\3Q\3Q\3Q\3Q\5Q\u0603\nQ\5")
        buf.write("Q\u0605\nQ\3R\3R\3S\3S\3S\3S\3T\3T\3T\3T\5T\u0611\nT\3")
        buf.write("T\3T\5T\u0615\nT\3T\3T\3U\3U\3U\3U\5U\u061d\nU\3U\3U\5")
        buf.write("U\u0621\nU\3U\3U\3V\3V\3V\3V\5V\u0629\nV\3V\3V\5V\u062d")
        buf.write("\nV\3V\3V\5V\u0631\nV\3V\3V\5V\u0635\nV\3V\3V\5V\u0639")
        buf.write("\nV\3V\3V\5V\u063d\nV\3V\3V\3W\3W\3W\3W\5W\u0645\nW\3")
        buf.write("W\3W\5W\u0649\nW\3W\3W\3X\3X\3X\3X\3X\3X\3X\7X\u0654\n")
        buf.write("X\fX\16X\u0657\13X\3X\3X\3Y\3Y\5Y\u065d\nY\3Y\3Y\5Y\u0661")
        buf.write("\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u066c\nY\3Z\3Z\3Z\3")
        buf.write("Z\3Z\5Z\u0673\nZ\3[\3[\3[\5[\u0678\n[\3[\3[\5[\u067c\n")
        buf.write("[\3[\7[\u067f\n[\f[\16[\u0682\13[\5[\u0684\n[\3\\\3\\")
        buf.write("\3\\\3\\\5\\\u068a\n\\\3\\\3\\\5\\\u068e\n\\\3\\\5\\\u0691")
        buf.write("\n\\\3]\3]\3]\3]\5]\u0697\n]\3]\3]\5]\u069b\n]\3]\3]\3")
        buf.write("^\3^\3^\3^\5^\u06a3\n^\3^\3^\5^\u06a7\n^\3^\3^\3_\3_\3")
        buf.write("`\3`\3`\5`\u06b0\n`\3`\3`\5`\u06b4\n`\3`\3`\5`\u06b8\n")
        buf.write("`\3`\3`\5`\u06bc\n`\3`\5`\u06bf\n`\3`\3`\5`\u06c3\n`\3")
        buf.write("`\3`\3a\3a\5a\u06c9\na\3a\3a\5a\u06cd\na\3a\3a\3b\3b\3")
        buf.write("b\5b\u06d4\nb\3b\3b\3b\3b\3b\7b\u06db\nb\fb\16b\u06de")
        buf.write("\13b\3b\3b\3c\3c\5c\u06e4\nc\3c\3c\5c\u06e8\nc\3c\5c\u06eb")
        buf.write("\nc\3c\5c\u06ee\nc\3c\5c\u06f1\nc\3c\3c\5c\u06f5\nc\3")
        buf.write("c\3c\3d\3d\3d\3d\3d\3d\3d\5d\u0700\nd\3e\3e\3e\3e\3f\3")
        buf.write("f\3f\3f\5f\u070a\nf\3f\3f\5f\u070e\nf\3f\3f\3f\3f\3f\5")
        buf.write("f\u0715\nf\5f\u0717\nf\3g\3g\3g\3g\3g\5g\u071e\ng\3g\3")
        buf.write("g\5g\u0722\ng\3g\3g\5g\u0726\ng\3g\7g\u0729\ng\fg\16g")
        buf.write("\u072c\13g\3g\3g\3g\3g\5g\u0732\ng\3g\3g\3g\3g\3g\3g\5")
        buf.write("g\u073a\ng\3g\3g\3g\5g\u073f\ng\3g\3g\5g\u0743\ng\3g\3")
        buf.write("g\3g\3g\5g\u0749\ng\3g\3g\3g\5g\u074e\ng\3g\3g\3g\5g\u0753")
        buf.write("\ng\3g\5g\u0756\ng\3g\3g\5g\u075a\ng\3g\3g\5g\u075e\n")
        buf.write("g\3g\3g\3g\5g\u0763\ng\3g\3g\5g\u0767\ng\3g\3g\3g\5g\u076c")
        buf.write("\ng\3g\3g\5g\u0770\ng\3g\3g\3g\5g\u0775\ng\3g\3g\5g\u0779")
        buf.write("\ng\3g\3g\3g\5g\u077e\ng\3g\3g\5g\u0782\ng\3g\3g\3g\5")
        buf.write("g\u0787\ng\3g\3g\5g\u078b\ng\3g\3g\3g\5g\u0790\ng\3g\3")
        buf.write("g\5g\u0794\ng\3g\3g\3g\5g\u0799\ng\3g\3g\5g\u079d\ng\3")
        buf.write("g\3g\3g\5g\u07a2\ng\3g\3g\5g\u07a6\ng\3g\3g\3g\5g\u07ab")
        buf.write("\ng\3g\3g\5g\u07af\ng\3g\3g\3g\5g\u07b4\ng\3g\3g\5g\u07b8")
        buf.write("\ng\3g\3g\3g\5g\u07bd\ng\3g\3g\5g\u07c1\ng\3g\3g\3g\5")
        buf.write("g\u07c6\ng\3g\3g\5g\u07ca\ng\3g\3g\3g\5g\u07cf\ng\3g\3")
        buf.write("g\5g\u07d3\ng\3g\3g\3g\5g\u07d8\ng\3g\3g\5g\u07dc\ng\3")
        buf.write("g\3g\3g\5g\u07e1\ng\3g\3g\5g\u07e5\ng\3g\3g\3g\5g\u07ea")
        buf.write("\ng\3g\3g\5g\u07ee\ng\3g\3g\3g\5g\u07f3\ng\3g\3g\5g\u07f7")
        buf.write("\ng\3g\3g\3g\5g\u07fc\ng\3g\3g\5g\u0800\ng\3g\3g\3g\5")
        buf.write("g\u0805\ng\3g\3g\5g\u0809\ng\3g\7g\u080c\ng\fg\16g\u080f")
        buf.write("\13g\3h\3h\3h\5h\u0814\nh\3h\3h\3h\5h\u0819\nh\3h\3h\3")
        buf.write("i\3i\5i\u081f\ni\3i\3i\5i\u0823\ni\3i\7i\u0826\ni\fi\16")
        buf.write("i\u0829\13i\3j\3j\5j\u082d\nj\3j\3j\5j\u0831\nj\3j\3j")
        buf.write("\5j\u0835\nj\5j\u0837\nj\3j\3j\5j\u083b\nj\5j\u083d\n")
        buf.write("j\3j\5j\u0840\nj\3j\3j\5j\u0844\nj\3k\3k\3k\3k\3k\5k\u084b")
        buf.write("\nk\3k\3k\3l\3l\3l\3l\5l\u0853\nl\3l\3l\5l\u0857\nl\3")
        buf.write("l\3l\3m\3m\3m\3m\3m\3m\5m\u0861\nm\3m\3m\5m\u0865\nm\3")
        buf.write("m\3m\3n\3n\3n\3n\5n\u086d\nn\3n\3n\5n\u0871\nn\3n\5n\u0874")
        buf.write("\nn\3o\5o\u0877\no\3o\3o\3p\3p\5p\u087d\np\3q\3q\3q\3")
        buf.write("q\5q\u0883\nq\3q\5q\u0886\nq\3q\3q\5q\u088a\nq\3q\3q\5")
        buf.write("q\u088e\nq\3q\3q\5q\u0892\nq\3q\5q\u0895\nq\3q\3q\3q\3")
        buf.write("q\7q\u089b\nq\fq\16q\u089e\13q\3r\3r\3r\5r\u08a3\nr\3")
        buf.write("r\3r\3r\5r\u08a8\nr\3r\5r\u08ab\nr\3r\3r\5r\u08af\nr\3")
        buf.write("r\3r\5r\u08b3\nr\3r\3r\5r\u08b7\nr\3r\5r\u08ba\nr\3r\3")
        buf.write("r\3r\3r\7r\u08c0\nr\fr\16r\u08c3\13r\3s\3s\5s\u08c7\n")
        buf.write("s\3t\5t\u08ca\nt\3t\3t\3t\5t\u08cf\nt\3t\3t\5t\u08d3\n")
        buf.write("t\3t\5t\u08d6\nt\3t\5t\u08d9\nt\3t\3t\3t\3t\7t\u08df\n")
        buf.write("t\ft\16t\u08e2\13t\3u\3u\3u\5u\u08e7\nu\3u\5u\u08ea\n")
        buf.write("u\3u\3u\3u\3u\7u\u08f0\nu\fu\16u\u08f3\13u\3v\3v\3v\3")
        buf.write("v\5v\u08f9\nv\3w\3w\5w\u08fd\nw\3w\5w\u0900\nw\3w\5w\u0903")
        buf.write("\nw\3w\3w\3w\3w\7w\u0909\nw\fw\16w\u090c\13w\3x\3x\5x")
        buf.write("\u0910\nx\3x\5x\u0913\nx\3x\5x\u0916\nx\3x\3x\5x\u091a")
        buf.write("\nx\3x\3x\5x\u091e\nx\5x\u0920\nx\3x\3x\5x\u0924\nx\3")
        buf.write("x\5x\u0927\nx\3x\3x\3x\3x\7x\u092d\nx\fx\16x\u0930\13")
        buf.write("x\3y\3y\5y\u0934\ny\3y\6y\u0937\ny\ry\16y\u0938\3y\5y")
        buf.write("\u093c\ny\3y\5y\u093f\ny\3y\3y\3y\3y\7y\u0945\ny\fy\16")
        buf.write("y\u0948\13y\3z\3z\3z\5z\u094d\nz\3{\3{\3|\5|\u0952\n|")
        buf.write("\3|\5|\u0955\n|\3|\3|\5|\u0959\n|\7|\u095b\n|\f|\16|\u095e")
        buf.write("\13|\3|\3|\5|\u0962\n|\3|\3|\5|\u0966\n|\3|\5|\u0969\n")
        buf.write("|\7|\u096b\n|\f|\16|\u096e\13|\3}\5}\u0971\n}\3}\3}\5")
        buf.write("}\u0975\n}\3}\5}\u0978\n}\3}\3}\3~\3~\3~\5~\u097f\n~\3")
        buf.write("\177\3\177\5\177\u0983\n\177\3\177\3\177\5\177\u0987\n")
        buf.write("\177\3\177\3\177\5\177\u098b\n\177\3\177\7\177\u098e\n")
        buf.write("\177\f\177\16\177\u0991\13\177\5\177\u0993\n\177\3\177")
        buf.write("\5\177\u0996\n\177\3\177\3\177\3\u0080\3\u0080\5\u0080")
        buf.write("\u099c\n\u0080\3\u0080\3\u0080\5\u0080\u09a0\n\u0080\3")
        buf.write("\u0080\3\u0080\5\u0080\u09a4\n\u0080\3\u0080\3\u0080\5")
        buf.write("\u0080\u09a8\n\u0080\3\u0080\5\u0080\u09ab\n\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u09af\n\u0080\3\u0080\5\u0080\u09b2\n")
        buf.write("\u0080\3\u0080\5\u0080\u09b5\n\u0080\3\u0080\5\u0080\u09b8")
        buf.write("\n\u0080\3\u0080\5\u0080\u09bb\n\u0080\3\u0080\5\u0080")
        buf.write("\u09be\n\u0080\3\u0081\3\u0081\5\u0081\u09c2\n\u0081\3")
        buf.write("\u0081\3\u0081\3\u0082\3\u0082\5\u0082\u09c8\n\u0082\3")
        buf.write("\u0082\3\u0082\5\u0082\u09cc\n\u0082\3\u0082\7\u0082\u09cf")
        buf.write("\n\u0082\f\u0082\16\u0082\u09d2\13\u0082\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\5\u0083\u09d9\n\u0083\3\u0083")
        buf.write("\3\u0083\3\u0084\3\u0084\6\u0084\u09df\n\u0084\r\u0084")
        buf.write("\16\u0084\u09e0\3\u0085\3\u0085\5\u0085\u09e5\n\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u09e9\n\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u09ed\n\u0085\3\u0085\5\u0085\u09f0\n\u0085\3")
        buf.write("\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\5\u0086\u09fc\n\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0a00\n\u0086\3\u0086\5\u0086\u0a03\n")
        buf.write("\u0086\3\u0086\5\u0086\u0a06\n\u0086\3\u0087\3\u0087\3")
        buf.write("\u0087\7\u0087\u0a0b\n\u0087\f\u0087\16\u0087\u0a0e\13")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\6\u0087\u0a13\n\u0087\r")
        buf.write("\u0087\16\u0087\u0a14\5\u0087\u0a17\n\u0087\3\u0088\3")
        buf.write("\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u0a1e\n\u0089\f")
        buf.write("\u0089\16\u0089\u0a21\13\u0089\3\u008a\3\u008a\5\u008a")
        buf.write("\u0a25\n\u008a\3\u008a\3\u008a\5\u008a\u0a29\n\u008a\3")
        buf.write("\u008b\3\u008b\5\u008b\u0a2d\n\u008b\3\u008b\3\u008b\5")
        buf.write("\u008b\u0a31\n\u008b\3\u008b\5\u008b\u0a34\n\u008b\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\5\u008e")
        buf.write("\u0a3d\n\u008e\3\u008e\5\u008e\u0a40\n\u008e\3\u008e\3")
        buf.write("\u008e\5\u008e\u0a44\n\u008e\3\u008e\5\u008e\u0a47\n\u008e")
        buf.write("\3\u008f\3\u008f\3\u0090\3\u0090\3\u0091\3\u0091\3\u0092")
        buf.write("\3\u0092\3\u0093\3\u0093\3\u0094\5\u0094\u0a54\n\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\5\u0094\u0a59\n\u0094\3\u0094")
        buf.write("\5\u0094\u0a5c\n\u0094\3\u0095\3\u0095\5\u0095\u0a60\n")
        buf.write("\u0095\3\u0095\3\u0095\5\u0095\u0a64\n\u0095\7\u0095\u0a66")
        buf.write("\n\u0095\f\u0095\16\u0095\u0a69\13\u0095\3\u0095\3\u0333")
        buf.write("\3\u00cc\u0096\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\2\25\5\2\25\25\"\"\u00aa")
        buf.write("\u00aa\3\2%\60\4\2\u00b3\u00b3\u00b7\u00b7\3\2FJ\5\2\u00c0")
        buf.write("\u00c0\u00c7\u00c7\u00cb\u00cb\3\2yz\7\2\21\21\25\25X")
        buf.write("X\u0082\u0082\u008d\u008d\4\2\u0090\u0091\u00bb\u00bb")
        buf.write("\4\2eg\u00a1\u00a1\3\2\3\4\4\2\u00a3\u00a3\u00a9\u00a9")
        buf.write("\3\2\6\7\4\2\27\30\u0083\u0083\3\2\27\30\7\2YYcc\u00c0")
        buf.write("\u00c3\u00c5\u00c5\u00c9\u00c9\6\2KKvw\u00ae\u00ae\u00d0")
        buf.write("\u00d6\5\2\5\5\7\n\u00bd\u00bd\6\2MMQQ\u0086\u0086\u008b")
        buf.write("\u008b\13\2\13\67@EKchhnx{|\u0081\u0086\u008b\u0090\u0092")
        buf.write("\u00bc\2\u0c19\2\u012a\3\2\2\2\4\u012e\3\2\2\2\6\u0166")
        buf.write("\3\2\2\2\b\u016c\3\2\2\2\n\u017a\3\2\2\2\f\u018f\3\2\2")
        buf.write("\2\16\u0193\3\2\2\2\20\u01ae\3\2\2\2\22\u01ba\3\2\2\2")
        buf.write("\24\u01be\3\2\2\2\26\u01c0\3\2\2\2\30\u01d9\3\2\2\2\32")
        buf.write("\u01db\3\2\2\2\34\u01f3\3\2\2\2\36\u0241\3\2\2\2 \u0243")
        buf.write("\3\2\2\2\"\u0250\3\2\2\2$\u0252\3\2\2\2&\u0256\3\2\2\2")
        buf.write("(\u025a\3\2\2\2*\u026f\3\2\2\2,\u0281\3\2\2\2.\u0292\3")
        buf.write("\2\2\2\60\u029f\3\2\2\2\62\u02c7\3\2\2\2\64\u02d7\3\2")
        buf.write("\2\2\66\u0307\3\2\2\28\u0309\3\2\2\2:\u030e\3\2\2\2<\u031c")
        buf.write("\3\2\2\2>\u0329\3\2\2\2@\u0336\3\2\2\2B\u033d\3\2\2\2")
        buf.write("D\u0347\3\2\2\2F\u0349\3\2\2\2H\u0355\3\2\2\2J\u036a\3")
        buf.write("\2\2\2L\u0392\3\2\2\2N\u03b2\3\2\2\2P\u03c8\3\2\2\2R\u03cc")
        buf.write("\3\2\2\2T\u03e9\3\2\2\2V\u03eb\3\2\2\2X\u03f4\3\2\2\2")
        buf.write("Z\u03f6\3\2\2\2\\\u03ff\3\2\2\2^\u0404\3\2\2\2`\u0408")
        buf.write("\3\2\2\2b\u0417\3\2\2\2d\u041d\3\2\2\2f\u0429\3\2\2\2")
        buf.write("h\u0435\3\2\2\2j\u0439\3\2\2\2l\u044c\3\2\2\2n\u0458\3")
        buf.write("\2\2\2p\u0466\3\2\2\2r\u0472\3\2\2\2t\u0482\3\2\2\2v\u0492")
        buf.write("\3\2\2\2x\u049c\3\2\2\2z\u04aa\3\2\2\2|\u04b8\3\2\2\2")
        buf.write("~\u04bc\3\2\2\2\u0080\u04c4\3\2\2\2\u0082\u04ce\3\2\2")
        buf.write("\2\u0084\u04e2\3\2\2\2\u0086\u04f6\3\2\2\2\u0088\u0538")
        buf.write("\3\2\2\2\u008a\u054b\3\2\2\2\u008c\u054d\3\2\2\2\u008e")
        buf.write("\u055d\3\2\2\2\u0090\u057c\3\2\2\2\u0092\u0594\3\2\2\2")
        buf.write("\u0094\u05a9\3\2\2\2\u0096\u05bf\3\2\2\2\u0098\u05d2\3")
        buf.write("\2\2\2\u009a\u05d7\3\2\2\2\u009c\u05eb\3\2\2\2\u009e\u05fc")
        buf.write("\3\2\2\2\u00a0\u05fe\3\2\2\2\u00a2\u0606\3\2\2\2\u00a4")
        buf.write("\u0608\3\2\2\2\u00a6\u060c\3\2\2\2\u00a8\u0618\3\2\2\2")
        buf.write("\u00aa\u0624\3\2\2\2\u00ac\u0640\3\2\2\2\u00ae\u064c\3")
        buf.write("\2\2\2\u00b0\u066b\3\2\2\2\u00b2\u066d\3\2\2\2\u00b4\u0683")
        buf.write("\3\2\2\2\u00b6\u0685\3\2\2\2\u00b8\u0692\3\2\2\2\u00ba")
        buf.write("\u069e\3\2\2\2\u00bc\u06aa\3\2\2\2\u00be\u06af\3\2\2\2")
        buf.write("\u00c0\u06c6\3\2\2\2\u00c2\u06d3\3\2\2\2\u00c4\u06e1\3")
        buf.write("\2\2\2\u00c6\u06f8\3\2\2\2\u00c8\u0701\3\2\2\2\u00ca\u0705")
        buf.write("\3\2\2\2\u00cc\u0755\3\2\2\2\u00ce\u0813\3\2\2\2\u00d0")
        buf.write("\u081c\3\2\2\2\u00d2\u082a\3\2\2\2\u00d4\u0845\3\2\2\2")
        buf.write("\u00d6\u084e\3\2\2\2\u00d8\u085a\3\2\2\2\u00da\u0868\3")
        buf.write("\2\2\2\u00dc\u0876\3\2\2\2\u00de\u087c\3\2\2\2\u00e0\u087e")
        buf.write("\3\2\2\2\u00e2\u089f\3\2\2\2\u00e4\u08c6\3\2\2\2\u00e6")
        buf.write("\u08c9\3\2\2\2\u00e8\u08e3\3\2\2\2\u00ea\u08f8\3\2\2\2")
        buf.write("\u00ec\u08fa\3\2\2\2\u00ee\u090f\3\2\2\2\u00f0\u0933\3")
        buf.write("\2\2\2\u00f2\u0949\3\2\2\2\u00f4\u094e\3\2\2\2\u00f6\u095c")
        buf.write("\3\2\2\2\u00f8\u0970\3\2\2\2\u00fa\u097b\3\2\2\2\u00fc")
        buf.write("\u0980\3\2\2\2\u00fe\u099b\3\2\2\2\u0100\u09bf\3\2\2\2")
        buf.write("\u0102\u09c5\3\2\2\2\u0104\u09d8\3\2\2\2\u0106\u09de\3")
        buf.write("\2\2\2\u0108\u09e2\3\2\2\2\u010a\u0a05\3\2\2\2\u010c\u0a16")
        buf.write("\3\2\2\2\u010e\u0a18\3\2\2\2\u0110\u0a1a\3\2\2\2\u0112")
        buf.write("\u0a22\3\2\2\2\u0114\u0a2a\3\2\2\2\u0116\u0a35\3\2\2\2")
        buf.write("\u0118\u0a38\3\2\2\2\u011a\u0a3c\3\2\2\2\u011c\u0a48\3")
        buf.write("\2\2\2\u011e\u0a4a\3\2\2\2\u0120\u0a4c\3\2\2\2\u0122\u0a4e")
        buf.write("\3\2\2\2\u0124\u0a50\3\2\2\2\u0126\u0a53\3\2\2\2\u0128")
        buf.write("\u0a67\3\2\2\2\u012a\u012b\5\4\3\2\u012b\u012c\7\2\2\3")
        buf.write("\u012c\3\3\2\2\2\u012d\u012f\7\u00de\2\2\u012e\u012d\3")
        buf.write("\2\2\2\u012e\u012f\3\2\2\2\u012f\u0133\3\2\2\2\u0130\u0132")
        buf.write("\5\u0126\u0094\2\u0131\u0130\3\2\2\2\u0132\u0135\3\2\2")
        buf.write("\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u013d")
        buf.write("\3\2\2\2\u0135\u0133\3\2\2\2\u0136\u013a\5\6\4\2\u0137")
        buf.write("\u0139\5\u0126\u0094\2\u0138\u0137\3\2\2\2\u0139\u013c")
        buf.write("\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b")
        buf.write("\u013e\3\2\2\2\u013c\u013a\3\2\2\2\u013d\u0136\3\2\2\2")
        buf.write("\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u0141\5")
        buf.write("\b\5\2\u0140\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0145")
        buf.write("\3\2\2\2\u0142\u0144\5\u0126\u0094\2\u0143\u0142\3\2\2")
        buf.write("\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0146")
        buf.write("\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2\u0148")
        buf.write("\u014a\5\f\7\2\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2")
        buf.write("\u014a\u014e\3\2\2\2\u014b\u014d\5\u0126\u0094\2\u014c")
        buf.write("\u014b\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3")
        buf.write("\2\2\2\u0151\u0153\5\16\b\2\u0152\u0151\3\2\2\2\u0152")
        buf.write("\u0153\3\2\2\2\u0153\u0157\3\2\2\2\u0154\u0156\5\u0126")
        buf.write("\u0094\2\u0155\u0154\3\2\2\2\u0156\u0159\3\2\2\2\u0157")
        buf.write("\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015b\3\2\2\2")
        buf.write("\u0159\u0157\3\2\2\2\u015a\u015c\5\26\f\2\u015b\u015a")
        buf.write("\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u0160\3\2\2\2\u015d")
        buf.write("\u015f\5\u0126\u0094\2\u015e\u015d\3\2\2\2\u015f\u0162")
        buf.write("\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0163\u0165\7\u00de")
        buf.write("\2\2\u0164\u0163\3\2\2\2\u0164\u0165\3\2\2\2\u0165\5\3")
        buf.write("\2\2\2\u0166\u0167\7\u00b5\2\2\u0167\u0168\7\u00de\2\2")
        buf.write("\u0168\u0169\7\u00d5\2\2\u0169\u016a\7\u00de\2\2\u016a")
        buf.write("\u016b\7\36\2\2\u016b\7\3\2\2\2\u016c\u0170\7\23\2\2\u016d")
        buf.write("\u016f\5\u0126\u0094\2\u016e\u016d\3\2\2\2\u016f\u0172")
        buf.write("\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0175\5\n\6\2")
        buf.write("\u0174\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0174\3")
        buf.write("\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179")
        buf.write("\7@\2\2\u0179\t\3\2\2\2\u017a\u017c\5\u0106\u0084\2\u017b")
        buf.write("\u017d\7\u00de\2\2\u017c\u017b\3\2\2\2\u017c\u017d\3\2")
        buf.write("\2\2\u017d\u017e\3\2\2\2\u017e\u0180\7\u00c0\2\2\u017f")
        buf.write("\u0181\7\u00de\2\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2")
        buf.write("\2\2\u0181\u0182\3\2\2\2\u0182\u0186\5\u0118\u008d\2\u0183")
        buf.write("\u0185\5\u0126\u0094\2\u0184\u0183\3\2\2\2\u0185\u0188")
        buf.write("\3\2\2\2\u0186\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\13\3\2\2\2\u0188\u0186\3\2\2\2\u0189\u018b\5\32\16\2")
        buf.write("\u018a\u018c\5\u0126\u0094\2\u018b\u018a\3\2\2\2\u018c")
        buf.write("\u018d\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2")
        buf.write("\u018e\u0190\3\2\2\2\u018f\u0189\3\2\2\2\u0190\u0191\3")
        buf.write("\2\2\2\u0191\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\r")
        buf.write("\3\2\2\2\u0193\u019d\5\22\n\2\u0194\u0196\5\u0126\u0094")
        buf.write("\2\u0195\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0195")
        buf.write("\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\3\2\2\2\u0199")
        buf.write("\u019a\5\22\n\2\u019a\u019c\3\2\2\2\u019b\u0195\3\2\2")
        buf.write("\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e")
        buf.write("\3\2\2\2\u019e\u01a3\3\2\2\2\u019f\u019d\3\2\2\2\u01a0")
        buf.write("\u01a2\5\u0126\u0094\2\u01a1\u01a0\3\2\2\2\u01a2\u01a5")
        buf.write("\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4")
        buf.write("\17\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a7\7}\2\2\u01a7")
        buf.write("\u01a8\7\u00de\2\2\u01a8\u01af\7\u00d3\2\2\u01a9\u01aa")
        buf.write("\7\177\2\2\u01aa\u01ab\7\u00de\2\2\u01ab\u01af\t\2\2\2")
        buf.write("\u01ac\u01af\7~\2\2\u01ad\u01af\7\u0080\2\2\u01ae\u01a6")
        buf.write("\3\2\2\2\u01ae\u01a9\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01ad\3\2\2\2\u01af\21\3\2\2\2\u01b0\u01bb\5\u0124\u0093")
        buf.write("\2\u01b1\u01bb\5\60\31\2\u01b2\u01bb\5:\36\2\u01b3\u01bb")
        buf.write("\5B\"\2\u01b4\u01bb\5*\26\2\u01b5\u01bb\5^\60\2\u01b6")
        buf.write("\u01bb\5\u00ceh\2\u01b7\u01bb\5\20\t\2\u01b8\u01bb\5\u00c2")
        buf.write("b\2\u01b9\u01bb\5\24\13\2\u01ba\u01b0\3\2\2\2\u01ba\u01b1")
        buf.write("\3\2\2\2\u01ba\u01b2\3\2\2\2\u01ba\u01b3\3\2\2\2\u01ba")
        buf.write("\u01b4\3\2\2\2\u01ba\u01b5\3\2\2\2\u01ba\u01b6\3\2\2\2")
        buf.write("\u01ba\u01b7\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01b9\3")
        buf.write("\2\2\2\u01bb\23\3\2\2\2\u01bc\u01bf\5n8\2\u01bd\u01bf")
        buf.write("\5p9\2\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf\25")
        buf.write("\3\2\2\2\u01c0\u01ca\5\30\r\2\u01c1\u01c3\5\u0126\u0094")
        buf.write("\2\u01c2\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6")
        buf.write("\u01c7\5\30\r\2\u01c7\u01c9\3\2\2\2\u01c8\u01c2\3\2\2")
        buf.write("\2\u01c9\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb")
        buf.write("\3\2\2\2\u01cb\u01d0\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd")
        buf.write("\u01cf\5\u0126\u0094\2\u01ce\u01cd\3\2\2\2\u01cf\u01d2")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1")
        buf.write("\27\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01da\5L\'\2\u01d4")
        buf.write("\u01da\5\u008eH\2\u01d5\u01da\5\u0090I\2\u01d6\u01da\5")
        buf.write("\u0092J\2\u01d7\u01da\5\u00be`\2\u01d8\u01da\5\24\13\2")
        buf.write("\u01d9\u01d3\3\2\2\2\u01d9\u01d4\3\2\2\2\u01d9\u01d5\3")
        buf.write("\2\2\2\u01d9\u01d6\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01d8")
        buf.write("\3\2\2\2\u01da\31\3\2\2\2\u01db\u01dc\7\17\2\2\u01dc\u01dd")
        buf.write("\7\u00de\2\2\u01dd\u01df\5\u00eav\2\u01de\u01e0\7\u00de")
        buf.write("\2\2\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1")
        buf.write("\3\2\2\2\u01e1\u01e3\7\u00c0\2\2\u01e2\u01e4\7\u00de\2")
        buf.write("\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5")
        buf.write("\3\2\2\2\u01e5\u01f0\5\u0118\u008d\2\u01e6\u01e8\7\u00de")
        buf.write("\2\2\u01e7\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9")
        buf.write("\3\2\2\2\u01e9\u01eb\7\3\2\2\u01ea\u01ec\7\u00de\2\2\u01eb")
        buf.write("\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\3\2\2\2")
        buf.write("\u01ed\u01ef\5\u0118\u008d\2\u01ee\u01e7\3\2\2\2\u01ef")
        buf.write("\u01f2\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2")
        buf.write("\u01f1\33\3\2\2\2\u01f2\u01f0\3\2\2\2\u01f3\u01f9\5\36")
        buf.write("\20\2\u01f4\u01f5\5\u0128\u0095\2\u01f5\u01f6\5\36\20")
        buf.write("\2\u01f6\u01f8\3\2\2\2\u01f7\u01f4\3\2\2\2\u01f8\u01fb")
        buf.write("\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u01fc\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fd\5\u0128")
        buf.write("\u0095\2\u01fd\35\3\2\2\2\u01fe\u0242\5\u0116\u008c\2")
        buf.write("\u01ff\u0242\5 \21\2\u0200\u0242\5\32\16\2\u0201\u0242")
        buf.write("\5\"\22\2\u0202\u0242\5$\23\2\u0203\u0242\5&\24\2\u0204")
        buf.write("\u0242\5(\25\2\u0205\u0242\5*\26\2\u0206\u0242\5.\30\2")
        buf.write("\u0207\u0242\5\64\33\2\u0208\u0242\5\62\32\2\u0209\u0242")
        buf.write("\5\66\34\2\u020a\u0242\58\35\2\u020b\u0242\5> \2\u020c")
        buf.write("\u0242\5@!\2\u020d\u0242\5D#\2\u020e\u0242\5\u00dep\2")
        buf.write("\u020f\u0242\5F$\2\u0210\u0242\5H%\2\u0211\u0242\5J&\2")
        buf.write("\u0212\u0242\5N(\2\u0213\u0242\5P)\2\u0214\u0242\5R*\2")
        buf.write("\u0215\u0242\5T+\2\u0216\u0242\5^\60\2\u0217\u0242\5`")
        buf.write("\61\2\u0218\u0242\5b\62\2\u0219\u0242\5d\63\2\u021a\u0242")
        buf.write("\5f\64\2\u021b\u0242\5h\65\2\u021c\u0242\5j\66\2\u021d")
        buf.write("\u0242\5l\67\2\u021e\u0242\5\24\13\2\u021f\u0242\5x=\2")
        buf.write("\u0220\u0242\5|?\2\u0221\u0242\5~@\2\u0222\u0242\5\u0080")
        buf.write("A\2\u0223\u0242\5\u0082B\2\u0224\u0242\5\u0084C\2\u0225")
        buf.write("\u0242\5\u0086D\2\u0226\u0242\5\u008cG\2\u0227\u0242\5")
        buf.write("\u0094K\2\u0228\u0242\5\u0096L\2\u0229\u0242\5\u0098M")
        buf.write("\2\u022a\u0242\5\u009aN\2\u022b\u0242\5\u009eP\2\u022c")
        buf.write("\u0242\5\u00a0Q\2\u022d\u0242\5\u00a2R\2\u022e\u0242\5")
        buf.write("\u00a4S\2\u022f\u0242\5\u00a6T\2\u0230\u0242\5\u00a8U")
        buf.write("\2\u0231\u0242\5\u00aaV\2\u0232\u0242\5\u00acW\2\u0233")
        buf.write("\u0242\5\u00aeX\2\u0234\u0242\5\u00b6\\\2\u0235\u0242")
        buf.write("\5\u00b8]\2\u0236\u0242\5\u00ba^\2\u0237\u0242\5\u00bc")
        buf.write("_\2\u0238\u0242\5\u00c0a\2\u0239\u0242\5\u00c8e\2\u023a")
        buf.write("\u0242\5\u00caf\2\u023b\u0242\5\u00ceh\2\u023c\u0242\5")
        buf.write("\u00d4k\2\u023d\u0242\5\u00d6l\2\u023e\u0242\5\u00d8m")
        buf.write("\2\u023f\u0242\5\u00dan\2\u0240\u0242\5\u00e4s\2\u0241")
        buf.write("\u01fe\3\2\2\2\u0241\u01ff\3\2\2\2\u0241\u0200\3\2\2\2")
        buf.write("\u0241\u0201\3\2\2\2\u0241\u0202\3\2\2\2\u0241\u0203\3")
        buf.write("\2\2\2\u0241\u0204\3\2\2\2\u0241\u0205\3\2\2\2\u0241\u0206")
        buf.write("\3\2\2\2\u0241\u0207\3\2\2\2\u0241\u0208\3\2\2\2\u0241")
        buf.write("\u0209\3\2\2\2\u0241\u020a\3\2\2\2\u0241\u020b\3\2\2\2")
        buf.write("\u0241\u020c\3\2\2\2\u0241\u020d\3\2\2\2\u0241\u020e\3")
        buf.write("\2\2\2\u0241\u020f\3\2\2\2\u0241\u0210\3\2\2\2\u0241\u0211")
        buf.write("\3\2\2\2\u0241\u0212\3\2\2\2\u0241\u0213\3\2\2\2\u0241")
        buf.write("\u0214\3\2\2\2\u0241\u0215\3\2\2\2\u0241\u0216\3\2\2\2")
        buf.write("\u0241\u0217\3\2\2\2\u0241\u0218\3\2\2\2\u0241\u0219\3")
        buf.write("\2\2\2\u0241\u021a\3\2\2\2\u0241\u021b\3\2\2\2\u0241\u021c")
        buf.write("\3\2\2\2\u0241\u021d\3\2\2\2\u0241\u021e\3\2\2\2\u0241")
        buf.write("\u021f\3\2\2\2\u0241\u0220\3\2\2\2\u0241\u0221\3\2\2\2")
        buf.write("\u0241\u0222\3\2\2\2\u0241\u0223\3\2\2\2\u0241\u0224\3")
        buf.write("\2\2\2\u0241\u0225\3\2\2\2\u0241\u0226\3\2\2\2\u0241\u0227")
        buf.write("\3\2\2\2\u0241\u0228\3\2\2\2\u0241\u0229\3\2\2\2\u0241")
        buf.write("\u022a\3\2\2\2\u0241\u022b\3\2\2\2\u0241\u022c\3\2\2\2")
        buf.write("\u0241\u022d\3\2\2\2\u0241\u022e\3\2\2\2\u0241\u022f\3")
        buf.write("\2\2\2\u0241\u0230\3\2\2\2\u0241\u0231\3\2\2\2\u0241\u0232")
        buf.write("\3\2\2\2\u0241\u0233\3\2\2\2\u0241\u0234\3\2\2\2\u0241")
        buf.write("\u0235\3\2\2\2\u0241\u0236\3\2\2\2\u0241\u0237\3\2\2\2")
        buf.write("\u0241\u0238\3\2\2\2\u0241\u0239\3\2\2\2\u0241\u023a\3")
        buf.write("\2\2\2\u0241\u023b\3\2\2\2\u0241\u023c\3\2\2\2\u0241\u023d")
        buf.write("\3\2\2\2\u0241\u023e\3\2\2\2\u0241\u023f\3\2\2\2\u0241")
        buf.write("\u0240\3\2\2\2\u0242\37\3\2\2\2\u0243\u0244\7\20\2\2\u0244")
        buf.write("\u0245\7\u00de\2\2\u0245\u024e\5\u00ccg\2\u0246\u0248")
        buf.write("\7\u00de\2\2\u0247\u0246\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u0249\3\2\2\2\u0249\u024b\7\3\2\2\u024a\u024c\7\u00de")
        buf.write("\2\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d")
        buf.write("\3\2\2\2\u024d\u024f\5\u00ccg\2\u024e\u0247\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024f!\3\2\2\2\u0250\u0251\7\24\2\2\u0251")
        buf.write("#\3\2\2\2\u0252\u0253\7\34\2\2\u0253\u0254\7\u00de\2\2")
        buf.write("\u0254\u0255\5\u00ccg\2\u0255%\3\2\2\2\u0256\u0257\7\35")
        buf.write("\2\2\u0257\u0258\7\u00de\2\2\u0258\u0259\5\u00ccg\2\u0259")
        buf.write("\'\3\2\2\2\u025a\u026a\7\37\2\2\u025b\u025c\7\u00de\2")
        buf.write("\2\u025c\u0267\5\u00dco\2\u025d\u025f\7\u00de\2\2\u025e")
        buf.write("\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write("\u0260\u0262\7\3\2\2\u0261\u0263\7\u00de\2\2\u0262\u0261")
        buf.write("\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0266\5\u00dco\2\u0265\u025e\3\2\2\2\u0266\u0269\3\2")
        buf.write("\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u026b")
        buf.write("\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u025b\3\2\2\2\u026a")
        buf.write("\u026b\3\2\2\2\u026b)\3\2\2\2\u026c\u026d\5\u011e\u0090")
        buf.write("\2\u026d\u026e\7\u00de\2\2\u026e\u0270\3\2\2\2\u026f\u026c")
        buf.write("\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0272\7!\2\2\u0272\u0273\7\u00de\2\2\u0273\u027e\5,\27")
        buf.write("\2\u0274\u0276\7\u00de\2\2\u0275\u0274\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\7\3\2\2\u0278")
        buf.write("\u027a\7\u00de\2\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2")
        buf.write("\2\2\u027a\u027b\3\2\2\2\u027b\u027d\5,\27\2\u027c\u0275")
        buf.write("\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e")
        buf.write("\u027f\3\2\2\2\u027f+\3\2\2\2\u0280\u027e\3\2\2\2\u0281")
        buf.write("\u0283\5\u0106\u0084\2\u0282\u0284\5\u011c\u008f\2\u0283")
        buf.write("\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0287\3\2\2\2")
        buf.write("\u0285\u0286\7\u00de\2\2\u0286\u0288\5\u0108\u0085\2\u0287")
        buf.write("\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028a\3\2\2\2")
        buf.write("\u0289\u028b\7\u00de\2\2\u028a\u0289\3\2\2\2\u028a\u028b")
        buf.write("\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028e\7\u00c0\2\2\u028d")
        buf.write("\u028f\7\u00de\2\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2")
        buf.write("\2\2\u028f\u0290\3\2\2\2\u0290\u0291\5\u00ccg\2\u0291")
        buf.write("-\3\2\2\2\u0292\u0294\7#\2\2\u0293\u0295\7\u00de\2\2\u0294")
        buf.write("\u0293\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3\2\2\2")
        buf.write("\u0296\u0298\7\u00c0\2\2\u0297\u0299\7\u00de\2\2\u0298")
        buf.write("\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u029b\5\u00ccg\2\u029b/\3\2\2\2\u029c\u029d\5\u011e")
        buf.write("\u0090\2\u029d\u029e\7\u00de\2\2\u029e\u02a0\3\2\2\2\u029f")
        buf.write("\u029c\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a1\3\2\2\2")
        buf.write("\u02a1\u02a2\7$\2\2\u02a2\u02a5\7\u00de\2\2\u02a3\u02a4")
        buf.write("\7\u008a\2\2\u02a4\u02a6\7\u00de\2\2\u02a5\u02a3\3\2\2")
        buf.write("\2\u02a5\u02a6\3\2\2\2\u02a6\u02ac\3\2\2\2\u02a7\u02a9")
        buf.write("\7O\2\2\u02a8\u02aa\5\u011c\u008f\2\u02a9\u02a8\3\2\2")
        buf.write("\2\u02a9\u02aa\3\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02ad")
        buf.write("\7\u00a8\2\2\u02ac\u02a7\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ad")
        buf.write("\u02ae\3\2\2\2\u02ae\u02af\7\u00de\2\2\u02af\u02b1\5\u0106")
        buf.write("\u0084\2\u02b0\u02b2\5\u011c\u008f\2\u02b1\u02b0\3\2\2")
        buf.write("\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b4")
        buf.write("\7\u00de\2\2\u02b4\u02b5\7b\2\2\u02b5\u02b6\7\u00de\2")
        buf.write("\2\u02b6\u02bb\7\u00d0\2\2\u02b7\u02b8\7\u00de\2\2\u02b8")
        buf.write("\u02b9\7\r\2\2\u02b9\u02ba\7\u00de\2\2\u02ba\u02bc\7\u00d0")
        buf.write("\2\2\u02bb\u02b7\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02c1")
        buf.write("\3\2\2\2\u02bd\u02bf\7\u00de\2\2\u02be\u02bd\3\2\2\2\u02be")
        buf.write("\u02bf\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2\5\u00fc")
        buf.write("\177\2\u02c1\u02be\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c5")
        buf.write("\3\2\2\2\u02c3\u02c4\7\u00de\2\2\u02c4\u02c6\5\u0108\u0085")
        buf.write("\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\61\3")
        buf.write("\2\2\2\u02c7\u02c8\t\3\2\2\u02c8\u02c9\7\u00de\2\2\u02c9")
        buf.write("\u02d4\5\u0114\u008b\2\u02ca\u02cc\7\u00de\2\2\u02cb\u02ca")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02cf\7\3\2\2\u02ce\u02d0\7\u00de\2\2\u02cf\u02ce\3\2")
        buf.write("\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d3")
        buf.write("\5\u0114\u008b\2\u02d2\u02cb\3\2\2\2\u02d3\u02d6\3\2\2")
        buf.write("\2\u02d4\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\63\3")
        buf.write("\2\2\2\u02d6\u02d4\3\2\2\2\u02d7\u02d8\7\61\2\2\u02d8")
        buf.write("\u02d9\7\u00de\2\2\u02d9\u02db\5\u00ccg\2\u02da\u02dc")
        buf.write("\7\u00de\2\2\u02db\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write("\u02dd\3\2\2\2\u02dd\u02df\7\3\2\2\u02de\u02e0\7\u00de")
        buf.write("\2\2\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e1")
        buf.write("\3\2\2\2\u02e1\u02ea\5\u00ccg\2\u02e2\u02e4\7\u00de\2")
        buf.write("\2\u02e3\u02e2\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5")
        buf.write("\3\2\2\2\u02e5\u02e7\7\3\2\2\u02e6\u02e8\7\u00de\2\2\u02e7")
        buf.write("\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write("\u02e9\u02eb\5\u00ccg\2\u02ea\u02e3\3\2\2\2\u02ea\u02eb")
        buf.write("\3\2\2\2\u02eb\65\3\2\2\2\u02ec\u02ed\7\63\2\2\u02ed\u02ef")
        buf.write("\5\u0128\u0095\2\u02ee\u02f0\5\34\17\2\u02ef\u02ee\3\2")
        buf.write("\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2")
        buf.write("\7_\2\2\u02f2\u0308\3\2\2\2\u02f3\u02f4\7\63\2\2\u02f4")
        buf.write("\u02f5\7\u00de\2\2\u02f5\u02f6\t\4\2\2\u02f6\u02f7\7\u00de")
        buf.write("\2\2\u02f7\u02f8\5\u00ccg\2\u02f8\u02fa\5\u0128\u0095")
        buf.write("\2\u02f9\u02fb\5\34\17\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\7_\2\2\u02fd")
        buf.write("\u0308\3\2\2\2\u02fe\u02ff\7\63\2\2\u02ff\u0300\5\u0128")
        buf.write("\u0095\2\u0300\u0301\5\34\17\2\u0301\u0302\7_\2\2\u0302")
        buf.write("\u0303\7\u00de\2\2\u0303\u0304\t\4\2\2\u0304\u0305\7\u00de")
        buf.write("\2\2\u0305\u0306\5\u00ccg\2\u0306\u0308\3\2\2\2\u0307")
        buf.write("\u02ec\3\2\2\2\u0307\u02f3\3\2\2\2\u0307\u02fe\3\2\2\2")
        buf.write("\u0308\67\3\2\2\2\u0309\u030a\7@\2\2\u030a9\3\2\2\2\u030b")
        buf.write("\u030c\5\u011e\u0090\2\u030c\u030d\7\u00de\2\2\u030d\u030f")
        buf.write("\3\2\2\2\u030e\u030b\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0311\7A\2\2\u0311\u0312\7\u00de")
        buf.write("\2\2\u0312\u0313\5\u0106\u0084\2\u0313\u0317\5\u0128\u0095")
        buf.write("\2\u0314\u0316\5<\37\2\u0315\u0314\3\2\2\2\u0316\u0319")
        buf.write("\3\2\2\2\u0317\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318")
        buf.write("\u031a\3\2\2\2\u0319\u0317\3\2\2\2\u031a\u031b\78\2\2")
        buf.write("\u031b;\3\2\2\2\u031c\u0325\5\u0106\u0084\2\u031d\u031f")
        buf.write("\7\u00de\2\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0320\3\2\2\2\u0320\u0322\7\u00c0\2\2\u0321\u0323\7\u00de")
        buf.write("\2\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0326\5\u00ccg\2\u0325\u031e\3\2\2\2\u0325")
        buf.write("\u0326\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0328\5\u0128")
        buf.write("\u0095\2\u0328=\3\2\2\2\u0329\u032a\7C\2\2\u032a\u032b")
        buf.write("\7\u00de\2\2\u032b\u0333\5\u00ccg\2\u032c\u032e\7\3\2")
        buf.write("\2\u032d\u032f\7\u00de\2\2\u032e\u032d\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332\5\u00ccg\2\u0331")
        buf.write("\u032c\3\2\2\2\u0332\u0335\3\2\2\2\u0333\u0334\3\2\2\2")
        buf.write("\u0333\u0331\3\2\2\2\u0334?\3\2\2\2\u0335\u0333\3\2\2")
        buf.write("\2\u0336\u0337\7D\2\2\u0337\u0338\7\u00de\2\2\u0338\u0339")
        buf.write("\5\u00ccg\2\u0339A\3\2\2\2\u033a\u033b\5\u011e\u0090\2")
        buf.write("\u033b\u033c\7\u00de\2\2\u033c\u033e\3\2\2\2\u033d\u033a")
        buf.write("\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u0340\7E\2\2\u0340\u0341\7\u00de\2\2\u0341\u0343\5\u0106")
        buf.write("\u0084\2\u0342\u0344\7\u00de\2\2\u0343\u0342\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\5\u00fc")
        buf.write("\177\2\u0346C\3\2\2\2\u0347\u0348\t\5\2\2\u0348E\3\2\2")
        buf.write("\2\u0349\u034a\7L\2\2\u034a\u034b\7\u00de\2\2\u034b\u034d")
        buf.write("\5\u00ccg\2\u034c\u034e\7\u00de\2\2\u034d\u034c\3\2\2")
        buf.write("\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351")
        buf.write("\7\3\2\2\u0350\u0352\7\u00de\2\2\u0351\u0350\3\2\2\2\u0351")
        buf.write("\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\5\u00cc")
        buf.write("g\2\u0354G\3\2\2\2\u0355\u0356\7N\2\2\u0356\u0357\7\u00de")
        buf.write("\2\2\u0357\u0358\7\65\2\2\u0358\u0359\7\u00de\2\2\u0359")
        buf.write("\u035b\5\u0106\u0084\2\u035a\u035c\5\u011c\u008f\2\u035b")
        buf.write("\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3\2\2\2")
        buf.write("\u035d\u035e\7\u00de\2\2\u035e\u035f\7W\2\2\u035f\u0360")
        buf.write("\7\u00de\2\2\u0360\u0361\5\u00ccg\2\u0361\u0363\5\u0128")
        buf.write("\u0095\2\u0362\u0364\5\34\17\2\u0363\u0362\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0368\7s\2\2")
        buf.write("\u0366\u0367\7\u00de\2\2\u0367\u0369\5\u0106\u0084\2\u0368")
        buf.write("\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369I\3\2\2\2\u036a")
        buf.write("\u036b\7N\2\2\u036b\u036c\7\u00de\2\2\u036c\u036e\5\u0106")
        buf.write("\u0084\2\u036d\u036f\5\u011c\u008f\2\u036e\u036d\3\2\2")
        buf.write("\2\u036e\u036f\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u0371")
        buf.write("\7\u00de\2\2\u0371\u0373\5\u0108\u0085\2\u0372\u0370\3")
        buf.write("\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3\2\2\2\u0374\u0376")
        buf.write("\7\u00de\2\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u0377\3\2\2\2\u0377\u0379\7\u00c0\2\2\u0378\u037a\7\u00de")
        buf.write("\2\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b")
        buf.write("\3\2\2\2\u037b\u037c\5\u00ccg\2\u037c\u037d\7\u00de\2")
        buf.write("\2\u037d\u037e\7\u00ad\2\2\u037e\u037f\7\u00de\2\2\u037f")
        buf.write("\u0384\5\u00ccg\2\u0380\u0381\7\u00de\2\2\u0381\u0382")
        buf.write("\7\u00a5\2\2\u0382\u0383\7\u00de\2\2\u0383\u0385\5\u00cc")
        buf.write("g\2\u0384\u0380\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386")
        buf.write("\3\2\2\2\u0386\u0388\5\u0128\u0095\2\u0387\u0389\5\34")
        buf.write("\17\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a")
        buf.write("\3\2\2\2\u038a\u038d\7s\2\2\u038b\u038c\7\u00de\2\2\u038c")
        buf.write("\u038e\5\u0106\u0084\2\u038d\u038b\3\2\2\2\u038d\u038e")
        buf.write("\3\2\2\2\u038eK\3\2\2\2\u038f\u0390\5\u011e\u0090\2\u0390")
        buf.write("\u0391\7\u00de\2\2\u0391\u0393\3\2\2\2\u0392\u038f\3\2")
        buf.write("\2\2\u0392\u0393\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0395")
        buf.write("\7\u00a4\2\2\u0395\u0397\7\u00de\2\2\u0396\u0394\3\2\2")
        buf.write("\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a")
        buf.write("\7O\2\2\u0399\u039b\7\u00de\2\2\u039a\u0399\3\2\2\2\u039a")
        buf.write("\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\5\u0106")
        buf.write("\u0084\2\u039d\u039f\5\u011c\u008f\2\u039e\u039d\3\2\2")
        buf.write("\2\u039e\u039f\3\2\2\2\u039f\u03a4\3\2\2\2\u03a0\u03a2")
        buf.write("\7\u00de\2\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u03a5\5\u00fc\177\2\u03a4\u03a1\3")
        buf.write("\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03aa\3\2\2\2\u03a6\u03a8")
        buf.write("\7\u00de\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u03ab\5\u0108\u0085\2\u03aa\u03a7")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write("\u03ae\5\u0128\u0095\2\u03ad\u03af\5\34\17\2\u03ae\u03ad")
        buf.write("\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03b1\79\2\2\u03b1M\3\2\2\2\u03b2\u03b3\7P\2\2\u03b3")
        buf.write("\u03b4\7\u00de\2\2\u03b4\u03b6\5\u00dco\2\u03b5\u03b7")
        buf.write("\7\u00de\2\2\u03b6\u03b5\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03ba\7\3\2\2\u03b9\u03bb\7\u00de")
        buf.write("\2\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd")
        buf.write("\3\2\2\2\u03bc\u03be\5\u00ccg\2\u03bd\u03bc\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf\u03c1\7\u00de")
        buf.write("\2\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2")
        buf.write("\3\2\2\2\u03c2\u03c4\7\3\2\2\u03c3\u03c5\7\u00de\2\2\u03c4")
        buf.write("\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6\3\2\2\2")
        buf.write("\u03c6\u03c7\5\u00ccg\2\u03c7O\3\2\2\2\u03c8\u03c9\7R")
        buf.write("\2\2\u03c9\u03ca\7\u00de\2\2\u03ca\u03cb\5\u00ccg\2\u03cb")
        buf.write("Q\3\2\2\2\u03cc\u03cd\7S\2\2\u03cd\u03ce\7\u00de\2\2\u03ce")
        buf.write("\u03cf\5\u00ccg\2\u03cfS\3\2\2\2\u03d0\u03d1\7T\2\2\u03d1")
        buf.write("\u03d2\7\u00de\2\2\u03d2\u03d3\5X-\2\u03d3\u03d4\7\u00de")
        buf.write("\2\2\u03d4\u03d5\7\u00ab\2\2\u03d5\u03d6\7\u00de\2\2\u03d6")
        buf.write("\u03db\5\36\20\2\u03d7\u03d8\7\u00de\2\2\u03d8\u03d9\7")
        buf.write("\66\2\2\u03d9\u03da\7\u00de\2\2\u03da\u03dc\5\36\20\2")
        buf.write("\u03db\u03d7\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03ea\3")
        buf.write("\2\2\2\u03dd\u03e1\5V,\2\u03de\u03e0\5Z.\2\u03df\u03de")
        buf.write("\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2")
        buf.write("\u03e4\u03e6\5\\/\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6\3")
        buf.write("\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8\7:\2\2\u03e8\u03ea")
        buf.write("\3\2\2\2\u03e9\u03d0\3\2\2\2\u03e9\u03dd\3\2\2\2\u03ea")
        buf.write("U\3\2\2\2\u03eb\u03ec\7T\2\2\u03ec\u03ed\7\u00de\2\2\u03ed")
        buf.write("\u03ee\5X-\2\u03ee\u03ef\7\u00de\2\2\u03ef\u03f0\7\u00ab")
        buf.write("\2\2\u03f0\u03f2\5\u0128\u0095\2\u03f1\u03f3\5\34\17\2")
        buf.write("\u03f2\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3W\3\2\2")
        buf.write("\2\u03f4\u03f5\5\u00ccg\2\u03f5Y\3\2\2\2\u03f6\u03f7\7")
        buf.write("\67\2\2\u03f7\u03f8\7\u00de\2\2\u03f8\u03f9\5X-\2\u03f9")
        buf.write("\u03fa\7\u00de\2\2\u03fa\u03fb\7\u00ab\2\2\u03fb\u03fd")
        buf.write("\5\u0128\u0095\2\u03fc\u03fe\5\34\17\2\u03fd\u03fc\3\2")
        buf.write("\2\2\u03fd\u03fe\3\2\2\2\u03fe[\3\2\2\2\u03ff\u0400\7")
        buf.write("\66\2\2\u0400\u0402\5\u0128\u0095\2\u0401\u0403\5\34\17")
        buf.write("\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403]\3\2")
        buf.write("\2\2\u0404\u0405\7V\2\2\u0405\u0406\7\u00de\2\2\u0406")
        buf.write("\u0407\5\u0106\u0084\2\u0407_\3\2\2\2\u0408\u0409\7X\2")
        buf.write("\2\u0409\u040a\7\u00de\2\2\u040a\u0413\5\u00dco\2\u040b")
        buf.write("\u040d\7\u00de\2\2\u040c\u040b\3\2\2\2\u040c\u040d\3\2")
        buf.write("\2\2\u040d\u040e\3\2\2\2\u040e\u0410\7\3\2\2\u040f\u0411")
        buf.write("\7\u00de\2\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411")
        buf.write("\u0412\3\2\2\2\u0412\u0414\5\u00ccg\2\u0413\u040c\3\2")
        buf.write("\2\2\u0414\u0415\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416a\3\2\2\2\u0417\u0418\7[\2\2\u0418\u0419")
        buf.write("\7\u00de\2\2\u0419\u041a\5\u00ccg\2\u041ac\3\2\2\2\u041b")
        buf.write("\u041c\7a\2\2\u041c\u041e\7\u00de\2\2\u041d\u041b\3\2")
        buf.write("\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421")
        buf.write("\5\u00eav\2\u0420\u0422\7\u00de\2\2\u0421\u0420\3\2\2")
        buf.write("\2\u0421\u0422\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0425")
        buf.write("\t\6\2\2\u0424\u0426\7\u00de\2\2\u0425\u0424\3\2\2\2\u0425")
        buf.write("\u0426\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\5\u00cc")
        buf.write("g\2\u0428e\3\2\2\2\u0429\u042a\7d\2\2\u042a\u042b\7\u00de")
        buf.write("\2\2\u042b\u042d\5\u00dco\2\u042c\u042e\7\u00de\2\2\u042d")
        buf.write("\u042c\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write("\u042f\u0431\7\3\2\2\u0430\u0432\7\u00de\2\2\u0431\u0430")
        buf.write("\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433")
        buf.write("\u0434\5\u00ccg\2\u0434g\3\2\2\2\u0435\u0436\7\\\2\2\u0436")
        buf.write("\u0437\7\u00de\2\2\u0437\u0438\5\u00ccg\2\u0438i\3\2\2")
        buf.write("\2\u0439\u043a\7]\2\2\u043a\u043b\7\u00de\2\2\u043b\u044a")
        buf.write("\5\u00ccg\2\u043c\u043e\7\u00de\2\2\u043d\u043c\3\2\2")
        buf.write("\2\u043d\u043e\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0441")
        buf.write("\7\3\2\2\u0440\u0442\7\u00de\2\2\u0441\u0440\3\2\2\2\u0441")
        buf.write("\u0442\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0448\5\u00cc")
        buf.write("g\2\u0444\u0445\7\u00de\2\2\u0445\u0446\7\u00ad\2\2\u0446")
        buf.write("\u0447\7\u00de\2\2\u0447\u0449\5\u00ccg\2\u0448\u0444")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044b\3\2\2\2\u044a")
        buf.write("\u043d\3\2\2\2\u044a\u044b\3\2\2\2\u044bk\3\2\2\2\u044c")
        buf.write("\u044d\7h\2\2\u044d\u044e\7\u00de\2\2\u044e\u0450\5\u00ea")
        buf.write("v\2\u044f\u0451\7\u00de\2\2\u0450\u044f\3\2\2\2\u0450")
        buf.write("\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0454\7\u00c0")
        buf.write("\2\2\u0453\u0455\7\u00de\2\2\u0454\u0453\3\2\2\2\u0454")
        buf.write("\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\5\u00cc")
        buf.write("g\2\u0457m\3\2\2\2\u0458\u045a\7i\2\2\u0459\u045b\7\u00de")
        buf.write("\2\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c")
        buf.write("\3\2\2\2\u045c\u045e\5\u0106\u0084\2\u045d\u045f\7\u00de")
        buf.write("\2\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460\u0462\7\u00c0\2\2\u0461\u0463\7\u00de\2")
        buf.write("\2\u0462\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464")
        buf.write("\3\2\2\2\u0464\u0465\5\u00ccg\2\u0465o\3\2\2\2\u0466\u046a")
        buf.write("\5r:\2\u0467\u0469\5t;\2\u0468\u0467\3\2\2\2\u0469\u046c")
        buf.write("\3\2\2\2\u046a\u0468\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write("\u046e\3\2\2\2\u046c\u046a\3\2\2\2\u046d\u046f\5v<\2\u046e")
        buf.write("\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470\3\2\2\2")
        buf.write("\u0470\u0471\7m\2\2\u0471q\3\2\2\2\u0472\u0474\7j\2\2")
        buf.write("\u0473\u0475\7\u00de\2\2\u0474\u0473\3\2\2\2\u0474\u0475")
        buf.write("\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0477\5X-\2\u0477\u0478")
        buf.write("\7\u00de\2\2\u0478\u0479\7\u00ab\2\2\u0479\u047f\5\u0128")
        buf.write("\u0095\2\u047a\u047e\5\16\b\2\u047b\u047e\5\26\f\2\u047c")
        buf.write("\u047e\5\34\17\2\u047d\u047a\3\2\2\2\u047d\u047b\3\2\2")
        buf.write("\2\u047d\u047c\3\2\2\2\u047e\u0481\3\2\2\2\u047f\u047d")
        buf.write("\3\2\2\2\u047f\u0480\3\2\2\2\u0480s\3\2\2\2\u0481\u047f")
        buf.write("\3\2\2\2\u0482\u0484\7k\2\2\u0483\u0485\7\u00de\2\2\u0484")
        buf.write("\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2")
        buf.write("\u0486\u0487\5X-\2\u0487\u0488\7\u00de\2\2\u0488\u0489")
        buf.write("\7\u00ab\2\2\u0489\u048f\5\u0128\u0095\2\u048a\u048e\5")
        buf.write("\16\b\2\u048b\u048e\5\26\f\2\u048c\u048e\5\34\17\2\u048d")
        buf.write("\u048a\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048c\3\2\2\2")
        buf.write("\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3")
        buf.write("\2\2\2\u0490u\3\2\2\2\u0491\u048f\3\2\2\2\u0492\u0493")
        buf.write("\7l\2\2\u0493\u0499\5\u0128\u0095\2\u0494\u0498\5\16\b")
        buf.write("\2\u0495\u0498\5\26\f\2\u0496\u0498\5\34\17\2\u0497\u0494")
        buf.write("\3\2\2\2\u0497\u0495\3\2\2\2\u0497\u0496\3\2\2\2\u0498")
        buf.write("\u049b\3\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2")
        buf.write("\u049aw\3\2\2\2\u049b\u0499\3\2\2\2\u049c\u049e\7o\2\2")
        buf.write("\u049d\u049f\7\u00de\2\2\u049e\u049d\3\2\2\2\u049e\u049f")
        buf.write("\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2\7\u00c4\2\2\u04a1")
        buf.write("\u04a3\7\u00de\2\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3\3\2")
        buf.write("\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\5\u00f6|\2\u04a5")
        buf.write("\u04a7\7\u00de\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2")
        buf.write("\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\7\u00cd\2\2\u04a9")
        buf.write("y\3\2\2\2\u04aa\u04ac\7\u009f\2\2\u04ab\u04ad\7\u00de")
        buf.write("\2\2\u04ac\u04ab\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04ae")
        buf.write("\3\2\2\2\u04ae\u04b0\7\u00c4\2\2\u04af\u04b1\7\u00de\2")
        buf.write("\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b2")
        buf.write("\3\2\2\2\u04b2\u04b4\5\u00ccg\2\u04b3\u04b5\7\u00de\2")
        buf.write("\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6")
        buf.write("\3\2\2\2\u04b6\u04b7\7\u00cd\2\2\u04b7{\3\2\2\2\u04b8")
        buf.write("\u04b9\7p\2\2\u04b9\u04ba\7\u00de\2\2\u04ba\u04bb\5\u00cc")
        buf.write("g\2\u04bb}\3\2\2\2\u04bc\u04bd\7r\2\2\u04bd\u04be\7\u00de")
        buf.write("\2\2\u04be\u04bf\5\u00ccg\2\u04bf\u04c0\7\u00de\2\2\u04c0")
        buf.write("\u04c1\7\22\2\2\u04c1\u04c2\7\u00de\2\2\u04c2\u04c3\5")
        buf.write("\u00ccg\2\u04c3\177\3\2\2\2\u04c4\u04c5\t\7\2\2\u04c5")
        buf.write("\u04cc\7\u00de\2\2\u04c6\u04c7\7S\2\2\u04c7\u04c8\7\u00de")
        buf.write("\2\2\u04c8\u04cd\5\u00ccg\2\u04c9\u04ca\7\u0095\2\2\u04ca")
        buf.write("\u04cb\7\u00de\2\2\u04cb\u04cd\7s\2\2\u04cc\u04c6\3\2")
        buf.write("\2\2\u04cc\u04c9\3\2\2\2\u04cd\u0081\3\2\2\2\u04ce\u04cf")
        buf.write("\7x\2\2\u04cf\u04d0\7\u00de\2\2\u04d0\u04d1\5\u00ccg\2")
        buf.write("\u04d1\u04d2\7\u00de\2\2\u04d2\u04d3\7S\2\2\u04d3\u04d4")
        buf.write("\7\u00de\2\2\u04d4\u04df\5\u00ccg\2\u04d5\u04d7\7\u00de")
        buf.write("\2\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8")
        buf.write("\3\2\2\2\u04d8\u04da\7\3\2\2\u04d9\u04db\7\u00de\2\2\u04da")
        buf.write("\u04d9\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2")
        buf.write("\u04dc\u04de\5\u00ccg\2\u04dd\u04d6\3\2\2\2\u04de\u04e1")
        buf.write("\3\2\2\2\u04df\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0")
        buf.write("\u0083\3\2\2\2\u04e1\u04df\3\2\2\2\u04e2\u04e3\7x\2\2")
        buf.write("\u04e3\u04e4\7\u00de\2\2\u04e4\u04e5\5\u00ccg\2\u04e5")
        buf.write("\u04e6\7\u00de\2\2\u04e6\u04e7\7R\2\2\u04e7\u04e8\7\u00de")
        buf.write("\2\2\u04e8\u04f3\5\u00ccg\2\u04e9\u04eb\7\u00de\2\2\u04ea")
        buf.write("\u04e9\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\3\2\2\2")
        buf.write("\u04ec\u04ee\7\3\2\2\u04ed\u04ef\7\u00de\2\2\u04ee\u04ed")
        buf.write("\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0")
        buf.write("\u04f2\5\u00ccg\2\u04f1\u04ea\3\2\2\2\u04f2\u04f5\3\2")
        buf.write("\2\2\u04f3\u04f1\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u0085")
        buf.write("\3\2\2\2\u04f5\u04f3\3\2\2\2\u04f6\u04f7\7{\2\2\u04f7")
        buf.write("\u04f8\7\u00de\2\2\u04f8\u04f9\5\u00ccg\2\u04f9\u04fa")
        buf.write("\7\u00de\2\2\u04fa\u04fb\7N\2\2\u04fb\u04fc\7\u00de\2")
        buf.write("\2\u04fc\u0501\t\b\2\2\u04fd\u04fe\7\u00de\2\2\u04fe\u04ff")
        buf.write("\7\13\2\2\u04ff\u0500\7\u00de\2\2\u0500\u0502\t\t\2\2")
        buf.write("\u0501\u04fd\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0505\3")
        buf.write("\2\2\2\u0503\u0504\7\u00de\2\2\u0504\u0506\t\n\2\2\u0505")
        buf.write("\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2")
        buf.write("\u0507\u0508\7\u00de\2\2\u0508\u0509\7\22\2\2\u0509\u050a")
        buf.write("\7\u00de\2\2\u050a\u0515\5\u00dco\2\u050b\u050c\7\u00de")
        buf.write("\2\2\u050c\u050e\7`\2\2\u050d\u050f\7\u00de\2\2\u050e")
        buf.write("\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510\3\2\2\2")
        buf.write("\u0510\u0512\7\u00c0\2\2\u0511\u0513\7\u00de\2\2\u0512")
        buf.write("\u0511\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0516\5\u00ccg\2\u0515\u050b\3\2\2\2\u0515\u0516")
        buf.write("\3\2\2\2\u0516\u0087\3\2\2\2\u0517\u0524\5\u008aF\2\u0518")
        buf.write("\u051a\7\u00de\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2")
        buf.write("\2\2\u051a\u051b\3\2\2\2\u051b\u051d\t\13\2\2\u051c\u051e")
        buf.write("\7\u00de\2\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2\2\2\u051e")
        buf.write("\u0520\3\2\2\2\u051f\u0521\5\u008aF\2\u0520\u051f\3\2")
        buf.write("\2\2\u0520\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u0519")
        buf.write("\3\2\2\2\u0523\u0526\3\2\2\2\u0524\u0522\3\2\2\2\u0524")
        buf.write("\u0525\3\2\2\2\u0525\u0539\3\2\2\2\u0526\u0524\3\2\2\2")
        buf.write("\u0527\u0529\5\u008aF\2\u0528\u0527\3\2\2\2\u0528\u0529")
        buf.write("\3\2\2\2\u0529\u0534\3\2\2\2\u052a\u052c\7\u00de\2\2\u052b")
        buf.write("\u052a\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052d\3\2\2\2")
        buf.write("\u052d\u052f\t\13\2\2\u052e\u0530\7\u00de\2\2\u052f\u052e")
        buf.write("\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0532\3\2\2\2\u0531")
        buf.write("\u0533\5\u008aF\2\u0532\u0531\3\2\2\2\u0532\u0533\3\2")
        buf.write("\2\2\u0533\u0535\3\2\2\2\u0534\u052b\3\2\2\2\u0535\u0536")
        buf.write("\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0537\3\2\2\2\u0537")
        buf.write("\u0539\3\2\2\2\u0538\u0517\3\2\2\2\u0538\u0528\3\2\2\2")
        buf.write("\u0539\u0089\3\2\2\2\u053a\u054c\5\u00ccg\2\u053b\u0549")
        buf.write("\t\f\2\2\u053c\u053e\7\u00de\2\2\u053d\u053c\3\2\2\2\u053d")
        buf.write("\u053e\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0541\7\u00c4")
        buf.write("\2\2\u0540\u0542\7\u00de\2\2\u0541\u0540\3\2\2\2\u0541")
        buf.write("\u0542\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0545\5\u00f6")
        buf.write("|\2\u0544\u0546\7\u00de\2\2\u0545\u0544\3\2\2\2\u0545")
        buf.write("\u0546\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548\7\u00cd")
        buf.write("\2\2\u0548\u054a\3\2\2\2\u0549\u053d\3\2\2\2\u0549\u054a")
        buf.write("\3\2\2\2\u054a\u054c\3\2\2\2\u054b\u053a\3\2\2\2\u054b")
        buf.write("\u053b\3\2\2\2\u054c\u008b\3\2\2\2\u054d\u054e\7\u0085")
        buf.write("\2\2\u054e\u054f\7\u00de\2\2\u054f\u0551\5\u00dco\2\u0550")
        buf.write("\u0552\7\u00de\2\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2")
        buf.write("\2\2\u0552\u0553\3\2\2\2\u0553\u0558\7\3\2\2\u0554\u0556")
        buf.write("\7\u00de\2\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2\u0556")
        buf.write("\u0557\3\2\2\2\u0557\u0559\5\u0088E\2\u0558\u0555\3\2")
        buf.write("\2\2\u0558\u0559\3\2\2\2\u0559\u008d\3\2\2\2\u055a\u055b")
        buf.write("\5\u011e\u0090\2\u055b\u055c\7\u00de\2\2\u055c\u055e\3")
        buf.write("\2\2\2\u055d\u055a\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0561")
        buf.write("\3\2\2\2\u055f\u0560\7\u00a4\2\2\u0560\u0562\7\u00de\2")
        buf.write("\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563")
        buf.write("\3\2\2\2\u0563\u0564\7\u0087\2\2\u0564\u0565\7\u00de\2")
        buf.write("\2\u0565\u0567\5\u0106\u0084\2\u0566\u0568\5\u011c\u008f")
        buf.write("\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056d")
        buf.write("\3\2\2\2\u0569\u056b\7\u00de\2\2\u056a\u0569\3\2\2\2\u056a")
        buf.write("\u056b\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056e\5\u00fc")
        buf.write("\177\2\u056d\u056a\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0571")
        buf.write("\3\2\2\2\u056f\u0570\7\u00de\2\2\u0570\u0572\5\u0108\u0085")
        buf.write("\2\u0571\u056f\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0573")
        buf.write("\3\2\2\2\u0573\u0575\5\u0128\u0095\2\u0574\u0576\5\34")
        buf.write("\17\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0577")
        buf.write("\3\2\2\2\u0577\u0578\7;\2\2\u0578\u008f\3\2\2\2\u0579")
        buf.write("\u057a\5\u011e\u0090\2\u057a\u057b\7\u00de\2\2\u057b\u057d")
        buf.write("\3\2\2\2\u057c\u0579\3\2\2\2\u057c\u057d\3\2\2\2\u057d")
        buf.write("\u0580\3\2\2\2\u057e\u057f\7\u00a4\2\2\u057f\u0581\7\u00de")
        buf.write("\2\2\u0580\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582")
        buf.write("\3\2\2\2\u0582\u0583\7\u0089\2\2\u0583\u0584\7\u00de\2")
        buf.write("\2\u0584\u0589\5\u0106\u0084\2\u0585\u0587\7\u00de\2\2")
        buf.write("\u0586\u0585\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0588\3")
        buf.write("\2\2\2\u0588\u058a\5\u00fc\177\2\u0589\u0586\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u058d\5\u0128")
        buf.write("\u0095\2\u058c\u058e\5\34\17\2\u058d\u058c\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590\7;\2\2")
        buf.write("\u0590\u0091\3\2\2\2\u0591\u0592\5\u011e\u0090\2\u0592")
        buf.write("\u0593\7\u00de\2\2\u0593\u0595\3\2\2\2\u0594\u0591\3\2")
        buf.write("\2\2\u0594\u0595\3\2\2\2\u0595\u0598\3\2\2\2\u0596\u0597")
        buf.write("\7\u00a4\2\2\u0597\u0599\7\u00de\2\2\u0598\u0596\3\2\2")
        buf.write("\2\u0598\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b")
        buf.write("\7\u0088\2\2\u059b\u059c\7\u00de\2\2\u059c\u05a1\5\u0106")
        buf.write("\u0084\2\u059d\u059f\7\u00de\2\2\u059e\u059d\3\2\2\2\u059e")
        buf.write("\u059f\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a2\5\u00fc")
        buf.write("\177\2\u05a1\u059e\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3")
        buf.write("\3\2\2\2\u05a3\u05a5\5\u0128\u0095\2\u05a4\u05a6\5\34")
        buf.write("\17\2\u05a5\u05a4\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a7")
        buf.write("\3\2\2\2\u05a7\u05a8\7;\2\2\u05a8\u0093\3\2\2\2\u05a9")
        buf.write("\u05aa\7\u008c\2\2\u05aa\u05ab\7\u00de\2\2\u05ab\u05ad")
        buf.write("\5\u00dco\2\u05ac\u05ae\7\u00de\2\2\u05ad\u05ac\3\2\2")
        buf.write("\2\u05ad\u05ae\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b1")
        buf.write("\7\3\2\2\u05b0\u05b2\7\u00de\2\2\u05b1\u05b0\3\2\2\2\u05b1")
        buf.write("\u05b2\3\2\2\2\u05b2\u05b4\3\2\2\2\u05b3\u05b5\5\u00cc")
        buf.write("g\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7")
        buf.write("\3\2\2\2\u05b6\u05b8\7\u00de\2\2\u05b7\u05b6\3\2\2\2\u05b7")
        buf.write("\u05b8\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9\u05bb\7\3\2\2")
        buf.write("\u05ba\u05bc\7\u00de\2\2\u05bb\u05ba\3\2\2\2\u05bb\u05bc")
        buf.write("\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\5\u00ccg\2\u05be")
        buf.write("\u0095\3\2\2\2\u05bf\u05c0\7\u008f\2\2\u05c0\u05c1\7\u00de")
        buf.write("\2\2\u05c1\u05d0\5\u0106\u0084\2\u05c2\u05c4\7\u00de\2")
        buf.write("\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c5")
        buf.write("\3\2\2\2\u05c5\u05c7\7\u00c4\2\2\u05c6\u05c8\7\u00de\2")
        buf.write("\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05cd")
        buf.write("\3\2\2\2\u05c9\u05cb\5\u00f6|\2\u05ca\u05cc\7\u00de\2")
        buf.write("\2\u05cb\u05ca\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05ce")
        buf.write("\3\2\2\2\u05cd\u05c9\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce")
        buf.write("\u05cf\3\2\2\2\u05cf\u05d1\7\u00cd\2\2\u05d0\u05c3\3\2")
        buf.write("\2\2\u05d0\u05d1\3\2\2\2\u05d1\u0097\3\2\2\2\u05d2\u05d5")
        buf.write("\7\u008e\2\2\u05d3\u05d4\7\u00de\2\2\u05d4\u05d6\5\u00cc")
        buf.write("g\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u0099")
        buf.write("\3\2\2\2\u05d7\u05d8\7\u0092\2\2\u05d8\u05db\7\u00de\2")
        buf.write("\2\u05d9\u05da\7\u0084\2\2\u05da\u05dc\7\u00de\2\2\u05db")
        buf.write("\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3\2\2\2")
        buf.write("\u05dd\u05e8\5\u009cO\2\u05de\u05e0\7\u00de\2\2\u05df")
        buf.write("\u05de\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2")
        buf.write("\u05e1\u05e3\7\3\2\2\u05e2\u05e4\7\u00de\2\2\u05e3\u05e2")
        buf.write("\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5")
        buf.write("\u05e7\5\u009cO\2\u05e6\u05df\3\2\2\2\u05e7\u05ea\3\2")
        buf.write("\2\2\u05e8\u05e6\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u009b")
        buf.write("\3\2\2\2\u05ea\u05e8\3\2\2\2\u05eb\u05ed\5\u00eav\2\u05ec")
        buf.write("\u05ee\7\u00de\2\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2")
        buf.write("\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f1\7\u00c4\2\2\u05f0")
        buf.write("\u05f2\7\u00de\2\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2")
        buf.write("\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\5\u0102\u0082\2\u05f4")
        buf.write("\u05f6\7\u00de\2\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2")
        buf.write("\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05fa\7\u00cd\2\2\u05f8")
        buf.write("\u05f9\7\u00de\2\2\u05f9\u05fb\5\u0108\u0085\2\u05fa\u05f8")
        buf.write("\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u009d\3\2\2\2\u05fc")
        buf.write("\u05fd\7\u0094\2\2\u05fd\u009f\3\2\2\2\u05fe\u0604\7\u0095")
        buf.write("\2\2\u05ff\u0602\7\u00de\2\2\u0600\u0603\7s\2\2\u0601")
        buf.write("\u0603\5\u0106\u0084\2\u0602\u0600\3\2\2\2\u0602\u0601")
        buf.write("\3\2\2\2\u0603\u0605\3\2\2\2\u0604\u05ff\3\2\2\2\u0604")
        buf.write("\u0605\3\2\2\2\u0605\u00a1\3\2\2\2\u0606\u0607\7\u0096")
        buf.write("\2\2\u0607\u00a3\3\2\2\2\u0608\u0609\7\u0097\2\2\u0609")
        buf.write("\u060a\7\u00de\2\2\u060a\u060b\5\u00ccg\2\u060b\u00a5")
        buf.write("\3\2\2\2\u060c\u060d\7\u0098\2\2\u060d\u060e\7\u00de\2")
        buf.write("\2\u060e\u0610\5\u00eav\2\u060f\u0611\7\u00de\2\2\u0610")
        buf.write("\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0612\3\2\2\2")
        buf.write("\u0612\u0614\7\u00c0\2\2\u0613\u0615\7\u00de\2\2\u0614")
        buf.write("\u0613\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0616\3\2\2\2")
        buf.write("\u0616\u0617\5\u00ccg\2\u0617\u00a7\3\2\2\2\u0618\u0619")
        buf.write("\7\u0099\2\2\u0619\u061a\7\u00de\2\2\u061a\u061c\5\u00cc")
        buf.write("g\2\u061b\u061d\7\u00de\2\2\u061c\u061b\3\2\2\2\u061c")
        buf.write("\u061d\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u0620\7\3\2\2")
        buf.write("\u061f\u0621\7\u00de\2\2\u0620\u061f\3\2\2\2\u0620\u0621")
        buf.write("\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0623\5\u00ccg\2\u0623")
        buf.write("\u00a9\3\2\2\2\u0624\u0625\7\u009a\2\2\u0625\u0626\7\u00de")
        buf.write("\2\2\u0626\u0628\5\u00ccg\2\u0627\u0629\7\u00de\2\2\u0628")
        buf.write("\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\3\2\2\2")
        buf.write("\u062a\u062c\7\3\2\2\u062b\u062d\7\u00de\2\2\u062c\u062b")
        buf.write("\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\3\2\2\2\u062e")
        buf.write("\u0630\5\u00ccg\2\u062f\u0631\7\u00de\2\2\u0630\u062f")
        buf.write("\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2\2\u0632")
        buf.write("\u0634\7\3\2\2\u0633\u0635\7\u00de\2\2\u0634\u0633\3\2")
        buf.write("\2\2\u0634\u0635\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0638")
        buf.write("\5\u00ccg\2\u0637\u0639\7\u00de\2\2\u0638\u0637\3\2\2")
        buf.write("\2\u0638\u0639\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063c")
        buf.write("\7\3\2\2\u063b\u063d\7\u00de\2\2\u063c\u063b\3\2\2\2\u063c")
        buf.write("\u063d\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\5\u00cc")
        buf.write("g\2\u063f\u00ab\3\2\2\2\u0640\u0641\7\u009b\2\2\u0641")
        buf.write("\u0642\7\u00de\2\2\u0642\u0644\5\u00dco\2\u0643\u0645")
        buf.write("\7\u00de\2\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645")
        buf.write("\u0646\3\2\2\2\u0646\u0648\7\3\2\2\u0647\u0649\7\u00de")
        buf.write("\2\2\u0648\u0647\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a")
        buf.write("\3\2\2\2\u064a\u064b\5\u00ccg\2\u064b\u00ad\3\2\2\2\u064c")
        buf.write("\u064d\7\u009c\2\2\u064d\u064e\7\u00de\2\2\u064e\u064f")
        buf.write("\7\33\2\2\u064f\u0650\7\u00de\2\2\u0650\u0651\5\u00cc")
        buf.write("g\2\u0651\u0655\5\u0128\u0095\2\u0652\u0654\5\u00b2Z\2")
        buf.write("\u0653\u0652\3\2\2\2\u0654\u0657\3\2\2\2\u0655\u0653\3")
        buf.write("\2\2\2\u0655\u0656\3\2\2\2\u0656\u0658\3\2\2\2\u0657\u0655")
        buf.write("\3\2\2\2\u0658\u0659\7<\2\2\u0659\u00af\3\2\2\2\u065a")
        buf.write("\u065c\7Y\2\2\u065b\u065d\7\u00de\2\2\u065c\u065b\3\2")
        buf.write("\2\2\u065c\u065d\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0660")
        buf.write("\5\u010e\u0088\2\u065f\u0661\7\u00de\2\2\u0660\u065f\3")
        buf.write("\2\2\2\u0660\u0661\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663")
        buf.write("\5\u00ccg\2\u0663\u066c\3\2\2\2\u0664\u0665\5\u00ccg\2")
        buf.write("\u0665\u0666\7\u00de\2\2\u0666\u0667\7\u00ad\2\2\u0667")
        buf.write("\u0668\7\u00de\2\2\u0668\u0669\5\u00ccg\2\u0669\u066c")
        buf.write("\3\2\2\2\u066a\u066c\5\u00ccg\2\u066b\u065a\3\2\2\2\u066b")
        buf.write("\u0664\3\2\2\2\u066b\u066a\3\2\2\2\u066c\u00b1\3\2\2\2")
        buf.write("\u066d\u066e\7\33\2\2\u066e\u066f\7\u00de\2\2\u066f\u0670")
        buf.write("\5\u00b4[\2\u0670\u0672\5\u0128\u0095\2\u0671\u0673\5")
        buf.write("\34\17\2\u0672\u0671\3\2\2\2\u0672\u0673\3\2\2\2\u0673")
        buf.write("\u00b3\3\2\2\2\u0674\u0684\7\66\2\2\u0675\u0680\5\u00b0")
        buf.write("Y\2\u0676\u0678\7\u00de\2\2\u0677\u0676\3\2\2\2\u0677")
        buf.write("\u0678\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067b\7\3\2\2")
        buf.write("\u067a\u067c\7\u00de\2\2\u067b\u067a\3\2\2\2\u067b\u067c")
        buf.write("\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067f\5\u00b0Y\2\u067e")
        buf.write("\u0677\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2\2\2")
        buf.write("\u0680\u0681\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3")
        buf.write("\2\2\2\u0683\u0674\3\2\2\2\u0683\u0675\3\2\2\2\u0684\u00b5")
        buf.write("\3\2\2\2\u0685\u0686\7\u009d\2\2\u0686\u0687\7\u00de\2")
        buf.write("\2\u0687\u0690\5\u00ccg\2\u0688\u068a\7\u00de\2\2\u0689")
        buf.write("\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2")
        buf.write("\u068b\u068d\7\3\2\2\u068c\u068e\7\u00de\2\2\u068d\u068c")
        buf.write("\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f")
        buf.write("\u0691\5\u00ccg\2\u0690\u0689\3\2\2\2\u0690\u0691\3\2")
        buf.write("\2\2\u0691\u00b7\3\2\2\2\u0692\u0693\7\u00a0\2\2\u0693")
        buf.write("\u0694\7\u00de\2\2\u0694\u0696\5\u00ccg\2\u0695\u0697")
        buf.write("\7\u00de\2\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697")
        buf.write("\u0698\3\2\2\2\u0698\u069a\7\3\2\2\u0699\u069b\7\u00de")
        buf.write("\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c")
        buf.write("\3\2\2\2\u069c\u069d\5\u00ccg\2\u069d\u00b9\3\2\2\2\u069e")
        buf.write("\u069f\7\u009e\2\2\u069f\u06a0\7\u00de\2\2\u06a0\u06a2")
        buf.write("\5\u00eav\2\u06a1\u06a3\7\u00de\2\2\u06a2\u06a1\3\2\2")
        buf.write("\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a6")
        buf.write("\7\u00c0\2\2\u06a5\u06a7\7\u00de\2\2\u06a6\u06a5\3\2\2")
        buf.write("\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a9")
        buf.write("\5\u00ccg\2\u06a9\u00bb\3\2\2\2\u06aa\u06ab\7\u00a6\2")
        buf.write("\2\u06ab\u00bd\3\2\2\2\u06ac\u06ad\5\u011e\u0090\2\u06ad")
        buf.write("\u06ae\7\u00de\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ac\3\2")
        buf.write("\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b3\3\2\2\2\u06b1\u06b2")
        buf.write("\7\u00a4\2\2\u06b2\u06b4\7\u00de\2\2\u06b3\u06b1\3\2\2")
        buf.write("\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b7")
        buf.write("\7\u00a8\2\2\u06b6\u06b8\7\u00de\2\2\u06b7\u06b6\3\2\2")
        buf.write("\2\u06b7\u06b8\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06be")
        buf.write("\5\u0106\u0084\2\u06ba\u06bc\7\u00de\2\2\u06bb\u06ba\3")
        buf.write("\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06bf")
        buf.write("\5\u00fc\177\2\u06be\u06bb\3\2\2\2\u06be\u06bf\3\2\2\2")
        buf.write("\u06bf\u06c0\3\2\2\2\u06c0\u06c2\5\u0128\u0095\2\u06c1")
        buf.write("\u06c3\5\34\17\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2")
        buf.write("\2\u06c3\u06c4\3\2\2\2\u06c4\u06c5\7=\2\2\u06c5\u00bf")
        buf.write("\3\2\2\2\u06c6\u06c8\7\u00ac\2\2\u06c7\u06c9\7\u00de\2")
        buf.write("\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca")
        buf.write("\3\2\2\2\u06ca\u06cc\7\u00c0\2\2\u06cb\u06cd\7\u00de\2")
        buf.write("\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce")
        buf.write("\3\2\2\2\u06ce\u06cf\5\u00ccg\2\u06cf\u00c1\3\2\2\2\u06d0")
        buf.write("\u06d1\5\u011e\u0090\2\u06d1\u06d2\7\u00de\2\2\u06d2\u06d4")
        buf.write("\3\2\2\2\u06d3\u06d0\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4")
        buf.write("\u06d5\3\2\2\2\u06d5\u06d6\7\u00af\2\2\u06d6\u06d7\7\u00de")
        buf.write("\2\2\u06d7\u06d8\5\u0106\u0084\2\u06d8\u06dc\5\u0128\u0095")
        buf.write("\2\u06d9\u06db\5\u00c4c\2\u06da\u06d9\3\2\2\2\u06db\u06de")
        buf.write("\3\2\2\2\u06dc\u06da\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd")
        buf.write("\u06df\3\2\2\2\u06de\u06dc\3\2\2\2\u06df\u06e0\7>\2\2")
        buf.write("\u06e0\u00c3\3\2\2\2\u06e1\u06f0\5\u0106\u0084\2\u06e2")
        buf.write("\u06e4\7\u00de\2\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2")
        buf.write("\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06ea\7\u00c4\2\2\u06e6")
        buf.write("\u06e8\7\u00de\2\2\u06e7\u06e6\3\2\2\2\u06e7\u06e8\3\2")
        buf.write("\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb\5\u0102\u0082\2\u06ea")
        buf.write("\u06e7\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ed\3\2\2\2")
        buf.write("\u06ec\u06ee\7\u00de\2\2\u06ed\u06ec\3\2\2\2\u06ed\u06ee")
        buf.write("\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1\7\u00cd\2\2\u06f0")
        buf.write("\u06e3\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f4\3\2\2\2")
        buf.write("\u06f2\u06f3\7\u00de\2\2\u06f3\u06f5\5\u0108\u0085\2\u06f4")
        buf.write("\u06f2\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6\3\2\2\2")
        buf.write("\u06f6\u06f7\5\u0128\u0095\2\u06f7\u00c5\3\2\2\2\u06f8")
        buf.write("\u06f9\7\u00b0\2\2\u06f9\u06fa\7\u00de\2\2\u06fa\u06ff")
        buf.write("\5\u00ccg\2\u06fb\u06fc\7\u00de\2\2\u06fc\u06fd\7Y\2\2")
        buf.write("\u06fd\u06fe\7\u00de\2\2\u06fe\u0700\5\u011a\u008e\2\u06ff")
        buf.write("\u06fb\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u00c7\3\2\2\2")
        buf.write("\u0701\u0702\7\u00b1\2\2\u0702\u0703\7\u00de\2\2\u0703")
        buf.write("\u0704\5\u00ccg\2\u0704\u00c9\3\2\2\2\u0705\u0706\7\u00b2")
        buf.write("\2\2\u0706\u0707\7\u00de\2\2\u0707\u0716\5\u00dco\2\u0708")
        buf.write("\u070a\7\u00de\2\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2")
        buf.write("\2\2\u070a\u070b\3\2\2\2\u070b\u070d\7\3\2\2\u070c\u070e")
        buf.write("\7\u00de\2\2\u070d\u070c\3\2\2\2\u070d\u070e\3\2\2\2\u070e")
        buf.write("\u070f\3\2\2\2\u070f\u0714\5\u00ccg\2\u0710\u0711\7\u00de")
        buf.write("\2\2\u0711\u0712\7\u00ad\2\2\u0712\u0713\7\u00de\2\2\u0713")
        buf.write("\u0715\5\u00ccg\2\u0714\u0710\3\2\2\2\u0714\u0715\3\2")
        buf.write("\2\2\u0715\u0717\3\2\2\2\u0716\u0709\3\2\2\2\u0716\u0717")
        buf.write("\3\2\2\2\u0717\u00cb\3\2\2\2\u0718\u0719\bg\1\2\u0719")
        buf.write("\u0756\5\u0118\u008d\2\u071a\u0756\5\u00eav\2\u071b\u071d")
        buf.write("\7\u00c4\2\2\u071c\u071e\7\u00de\2\2\u071d\u071c\3\2\2")
        buf.write("\2\u071d\u071e\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u072a")
        buf.write("\5\u00ccg\2\u0720\u0722\7\u00de\2\2\u0721\u0720\3\2\2")
        buf.write("\2\u0721\u0722\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725")
        buf.write("\7\3\2\2\u0724\u0726\7\u00de\2\2\u0725\u0724\3\2\2\2\u0725")
        buf.write("\u0726\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0729\5\u00cc")
        buf.write("g\2\u0728\u0721\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u0728")
        buf.write("\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072d\3\2\2\2\u072c")
        buf.write("\u072a\3\2\2\2\u072d\u072e\7\u00cd\2\2\u072e\u0756\3\2")
        buf.write("\2\2\u072f\u0731\7t\2\2\u0730\u0732\7\u00de\2\2\u0731")
        buf.write("\u0730\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0733\3\2\2\2")
        buf.write("\u0733\u0756\5\u00ccg\37\u0734\u0756\5\u00c6d\2\u0735")
        buf.write("\u0756\5x=\2\u0736\u0756\5z>\2\u0737\u0739\7\f\2\2\u0738")
        buf.write("\u073a\7\u00de\2\2\u0739\u0738\3\2\2\2\u0739\u073a\3\2")
        buf.write("\2\2\u073a\u073b\3\2\2\2\u073b\u0756\5\u00ccg\33\u073c")
        buf.write("\u073e\5\u00eav\2\u073d\u073f\7\u00de\2\2\u073e\u073d")
        buf.write("\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\3\2\2\2\u0740")
        buf.write("\u0742\7\u00be\2\2\u0741\u0743\7\u00de\2\2\u0742\u0741")
        buf.write("\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744")
        buf.write("\u0745\5\u00ccg\32\u0745\u0756\3\2\2\2\u0746\u0748\7\u00c6")
        buf.write("\2\2\u0747\u0749\7\u00de\2\2\u0748\u0747\3\2\2\2\u0748")
        buf.write("\u0749\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u0756\5\u00cc")
        buf.write("g\20\u074b\u074d\7\u00ca\2\2\u074c\u074e\7\u00de\2\2\u074d")
        buf.write("\u074c\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\3\2\2\2")
        buf.write("\u074f\u0756\5\u00ccg\17\u0750\u0752\7u\2\2\u0751\u0753")
        buf.write("\7\u00de\2\2\u0752\u0751\3\2\2\2\u0752\u0753\3\2\2\2\u0753")
        buf.write("\u0754\3\2\2\2\u0754\u0756\5\u00ccg\3\u0755\u0718\3\2")
        buf.write("\2\2\u0755\u071a\3\2\2\2\u0755\u071b\3\2\2\2\u0755\u072f")
        buf.write("\3\2\2\2\u0755\u0734\3\2\2\2\u0755\u0735\3\2\2\2\u0755")
        buf.write("\u0736\3\2\2\2\u0755\u0737\3\2\2\2\u0755\u073c\3\2\2\2")
        buf.write("\u0755\u0746\3\2\2\2\u0755\u074b\3\2\2\2\u0755\u0750\3")
        buf.write("\2\2\2\u0756\u080d\3\2\2\2\u0757\u0759\f\31\2\2\u0758")
        buf.write("\u075a\7\u00de\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2")
        buf.write("\2\2\u075a\u075b\3\2\2\2\u075b\u075d\7Y\2\2\u075c\u075e")
        buf.write("\7\u00de\2\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e")
        buf.write("\u075f\3\2\2\2\u075f\u080c\5\u00ccg\32\u0760\u0762\f\30")
        buf.write("\2\2\u0761\u0763\7\u00de\2\2\u0762\u0761\3\2\2\2\u0762")
        buf.write("\u0763\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\7c\2\2")
        buf.write("\u0765\u0767\7\u00de\2\2\u0766\u0765\3\2\2\2\u0766\u0767")
        buf.write("\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u080c\5\u00ccg\31\u0769")
        buf.write("\u076b\f\27\2\2\u076a\u076c\7\u00de\2\2\u076b\u076a\3")
        buf.write("\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076f")
        buf.write("\7\u00c1\2\2\u076e\u0770\7\u00de\2\2\u076f\u076e\3\2\2")
        buf.write("\2\u076f\u0770\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u080c")
        buf.write("\5\u00ccg\30\u0772\u0774\f\26\2\2\u0773\u0775\7\u00de")
        buf.write("\2\2\u0774\u0773\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776")
        buf.write("\3\2\2\2\u0776\u0778\7\u00c3\2\2\u0777\u0779\7\u00de\2")
        buf.write("\2\u0778\u0777\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077a")
        buf.write("\3\2\2\2\u077a\u080c\5\u00ccg\27\u077b\u077d\f\25\2\2")
        buf.write("\u077c\u077e\7\u00de\2\2\u077d\u077c\3\2\2\2\u077d\u077e")
        buf.write("\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\7\u00c2\2\2\u0780")
        buf.write("\u0782\7\u00de\2\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2")
        buf.write("\2\2\u0782\u0783\3\2\2\2\u0783\u080c\5\u00ccg\26\u0784")
        buf.write("\u0786\f\24\2\2\u0785\u0787\7\u00de\2\2\u0786\u0785\3")
        buf.write("\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u078a")
        buf.write("\7\u00c5\2\2\u0789\u078b\7\u00de\2\2\u078a\u0789\3\2\2")
        buf.write("\2\u078a\u078b\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u080c")
        buf.write("\5\u00ccg\25\u078d\u078f\f\23\2\2\u078e\u0790\7\u00de")
        buf.write("\2\2\u078f\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0791")
        buf.write("\3\2\2\2\u0791\u0793\7\u00c9\2\2\u0792\u0794\7\u00de\2")
        buf.write("\2\u0793\u0792\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0795")
        buf.write("\3\2\2\2\u0795\u080c\5\u00ccg\24\u0796\u0798\f\22\2\2")
        buf.write("\u0797\u0799\7\u00de\2\2\u0798\u0797\3\2\2\2\u0798\u0799")
        buf.write("\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079c\7\u00c0\2\2\u079b")
        buf.write("\u079d\7\u00de\2\2\u079c\u079b\3\2\2\2\u079c\u079d\3\2")
        buf.write("\2\2\u079d\u079e\3\2\2\2\u079e\u080c\5\u00ccg\23\u079f")
        buf.write("\u07a1\f\21\2\2\u07a0\u07a2\7\u00de\2\2\u07a1\u07a0\3")
        buf.write("\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a5")
        buf.write("\7\u00cc\2\2\u07a4\u07a6\7\u00de\2\2\u07a5\u07a4\3\2\2")
        buf.write("\2\u07a5\u07a6\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u080c")
        buf.write("\5\u00ccg\22\u07a8\u07aa\f\16\2\2\u07a9\u07ab\7\u00de")
        buf.write("\2\2\u07aa\u07a9\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac")
        buf.write("\3\2\2\2\u07ac\u07ae\7\u00bf\2\2\u07ad\u07af\7\u00de\2")
        buf.write("\2\u07ae\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b0")
        buf.write("\3\2\2\2\u07b0\u080c\5\u00ccg\17\u07b1\u07b3\f\r\2\2\u07b2")
        buf.write("\u07b4\7\u00de\2\2\u07b3\u07b2\3\2\2\2\u07b3\u07b4\3\2")
        buf.write("\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\7\u00c8\2\2\u07b6")
        buf.write("\u07b8\7\u00de\2\2\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2")
        buf.write("\2\2\u07b8\u07b9\3\2\2\2\u07b9\u080c\5\u00ccg\16\u07ba")
        buf.write("\u07bc\f\f\2\2\u07bb\u07bd\7\u00de\2\2\u07bc\u07bb\3\2")
        buf.write("\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07c0")
        buf.write("\7q\2\2\u07bf\u07c1\7\u00de\2\2\u07c0\u07bf\3\2\2\2\u07c0")
        buf.write("\u07c1\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u080c\5\u00cc")
        buf.write("g\r\u07c3\u07c5\f\13\2\2\u07c4\u07c6\7\u00de\2\2\u07c5")
        buf.write("\u07c4\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c7\3\2\2\2")
        buf.write("\u07c7\u07c9\7\u00ca\2\2\u07c8\u07ca\7\u00de\2\2\u07c9")
        buf.write("\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2")
        buf.write("\u07cb\u080c\5\u00ccg\f\u07cc\u07ce\f\n\2\2\u07cd\u07cf")
        buf.write("\7\u00de\2\2\u07ce\u07cd\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf")
        buf.write("\u07d0\3\2\2\2\u07d0\u07d2\7\u00c6\2\2\u07d1\u07d3\7\u00de")
        buf.write("\2\2\u07d2\u07d1\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d4")
        buf.write("\3\2\2\2\u07d4\u080c\5\u00ccg\13\u07d5\u07d7\f\t\2\2\u07d6")
        buf.write("\u07d8\7\u00de\2\2\u07d7\u07d6\3\2\2\2\u07d7\u07d8\3\2")
        buf.write("\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07db\7\u00bd\2\2\u07da")
        buf.write("\u07dc\7\u00de\2\2\u07db\u07da\3\2\2\2\u07db\u07dc\3\2")
        buf.write("\2\2\u07dc\u07dd\3\2\2\2\u07dd\u080c\5\u00ccg\n\u07de")
        buf.write("\u07e0\f\b\2\2\u07df\u07e1\7\u00de\2\2\u07e0\u07df\3\2")
        buf.write("\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4")
        buf.write("\7U\2\2\u07e3\u07e5\7\u00de\2\2\u07e4\u07e3\3\2\2\2\u07e4")
        buf.write("\u07e5\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u080c\5\u00cc")
        buf.write("g\t\u07e7\u07e9\f\7\2\2\u07e8\u07ea\7\u00de\2\2\u07e9")
        buf.write("\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2")
        buf.write("\u07eb\u07ed\7B\2\2\u07ec\u07ee\7\u00de\2\2\u07ed\u07ec")
        buf.write("\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef")
        buf.write("\u080c\5\u00ccg\b\u07f0\u07f2\f\6\2\2\u07f1\u07f3\7\u00de")
        buf.write("\2\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4")
        buf.write("\3\2\2\2\u07f4\u07f6\7\u00bc\2\2\u07f5\u07f7\7\u00de\2")
        buf.write("\2\u07f6\u07f5\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f8")
        buf.write("\3\2\2\2\u07f8\u080c\5\u00ccg\7\u07f9\u07fb\f\5\2\2\u07fa")
        buf.write("\u07fc\7\u00de\2\2\u07fb\u07fa\3\2\2\2\u07fb\u07fc\3\2")
        buf.write("\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07ff\7\u0081\2\2\u07fe")
        buf.write("\u0800\7\u00de\2\2\u07ff\u07fe\3\2\2\2\u07ff\u0800\3\2")
        buf.write("\2\2\u0800\u0801\3\2\2\2\u0801\u080c\5\u00ccg\6\u0802")
        buf.write("\u0804\f\4\2\2\u0803\u0805\7\u00de\2\2\u0804\u0803\3\2")
        buf.write("\2\2\u0804\u0805\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u0808")
        buf.write("\7\16\2\2\u0807\u0809\7\u00de\2\2\u0808\u0807\3\2\2\2")
        buf.write("\u0808\u0809\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080c\5")
        buf.write("\u00ccg\5\u080b\u0757\3\2\2\2\u080b\u0760\3\2\2\2\u080b")
        buf.write("\u0769\3\2\2\2\u080b\u0772\3\2\2\2\u080b\u077b\3\2\2\2")
        buf.write("\u080b\u0784\3\2\2\2\u080b\u078d\3\2\2\2\u080b\u0796\3")
        buf.write("\2\2\2\u080b\u079f\3\2\2\2\u080b\u07a8\3\2\2\2\u080b\u07b1")
        buf.write("\3\2\2\2\u080b\u07ba\3\2\2\2\u080b\u07c3\3\2\2\2\u080b")
        buf.write("\u07cc\3\2\2\2\u080b\u07d5\3\2\2\2\u080b\u07de\3\2\2\2")
        buf.write("\u080b\u07e7\3\2\2\2\u080b\u07f0\3\2\2\2\u080b\u07f9\3")
        buf.write("\2\2\2\u080b\u0802\3\2\2\2\u080c\u080f\3\2\2\2\u080d\u080b")
        buf.write("\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u00cd\3\2\2\2\u080f")
        buf.write("\u080d\3\2\2\2\u0810\u0814\7\62\2\2\u0811\u0814\7\u00a4")
        buf.write("\2\2\u0812\u0814\5\u011e\u0090\2\u0813\u0810\3\2\2\2\u0813")
        buf.write("\u0811\3\2\2\2\u0813\u0812\3\2\2\2\u0814\u0815\3\2\2\2")
        buf.write("\u0815\u0818\7\u00de\2\2\u0816\u0817\7\u00ba\2\2\u0817")
        buf.write("\u0819\7\u00de\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2")
        buf.write("\2\2\u0819\u081a\3\2\2\2\u081a\u081b\5\u00d0i\2\u081b")
        buf.write("\u00cf\3\2\2\2\u081c\u0827\5\u00d2j\2\u081d\u081f\7\u00de")
        buf.write("\2\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0820")
        buf.write("\3\2\2\2\u0820\u0822\7\3\2\2\u0821\u0823\7\u00de\2\2\u0822")
        buf.write("\u0821\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824\3\2\2\2")
        buf.write("\u0824\u0826\5\u00d2j\2\u0825\u081e\3\2\2\2\u0826\u0829")
        buf.write("\3\2\2\2\u0827\u0825\3\2\2\2\u0827\u0828\3\2\2\2\u0828")
        buf.write("\u00d1\3\2\2\2\u0829\u0827\3\2\2\2\u082a\u083c\5\u0106")
        buf.write("\u0084\2\u082b\u082d\7\u00de\2\2\u082c\u082b\3\2\2\2\u082c")
        buf.write("\u082d\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0830\7\u00c4")
        buf.write("\2\2\u082f\u0831\7\u00de\2\2\u0830\u082f\3\2\2\2\u0830")
        buf.write("\u0831\3\2\2\2\u0831\u0836\3\2\2\2\u0832\u0834\5\u0102")
        buf.write("\u0082\2\u0833\u0835\7\u00de\2\2\u0834\u0833\3\2\2\2\u0834")
        buf.write("\u0835\3\2\2\2\u0835\u0837\3\2\2\2\u0836\u0832\3\2\2\2")
        buf.write("\u0836\u0837\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u083a\7")
        buf.write("\u00cd\2\2\u0839\u083b\7\u00de\2\2\u083a\u0839\3\2\2\2")
        buf.write("\u083a\u083b\3\2\2\2\u083b\u083d\3\2\2\2\u083c\u082c\3")
        buf.write("\2\2\2\u083c\u083d\3\2\2\2\u083d\u083f\3\2\2\2\u083e\u0840")
        buf.write("\5\u011c\u008f\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2")
        buf.write("\2\u0840\u0843\3\2\2\2\u0841\u0842\7\u00de\2\2\u0842\u0844")
        buf.write("\5\u0108\u0085\2\u0843\u0841\3\2\2\2\u0843\u0844\3\2\2")
        buf.write("\2\u0844\u00d3\3\2\2\2\u0845\u0846\7\u00b7\2\2\u0846\u0847")
        buf.write("\7\u00de\2\2\u0847\u0848\5\u00ccg\2\u0848\u084a\5\u0128")
        buf.write("\u0095\2\u0849\u084b\5\34\17\2\u084a\u0849\3\2\2\2\u084a")
        buf.write("\u084b\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\7\u00b6")
        buf.write("\2\2\u084d\u00d5\3\2\2\2\u084e\u084f\7\u00b8\2\2\u084f")
        buf.write("\u0850\7\u00de\2\2\u0850\u0852\5\u00dco\2\u0851\u0853")
        buf.write("\7\u00de\2\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853")
        buf.write("\u0854\3\2\2\2\u0854\u0856\7\3\2\2\u0855\u0857\7\u00de")
        buf.write("\2\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858")
        buf.write("\3\2\2\2\u0858\u0859\5\u00ccg\2\u0859\u00d7\3\2\2\2\u085a")
        buf.write("\u085b\7\u00b9\2\2\u085b\u0860\7\u00de\2\2\u085c\u0861")
        buf.write("\5\u00eav\2\u085d\u085e\7t\2\2\u085e\u085f\7\u00de\2\2")
        buf.write("\u085f\u0861\5\u011a\u008e\2\u0860\u085c\3\2\2\2\u0860")
        buf.write("\u085d\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\5\u0128")
        buf.write("\u0095\2\u0863\u0865\5\34\17\2\u0864\u0863\3\2\2\2\u0864")
        buf.write("\u0865\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\7?\2\2")
        buf.write("\u0867\u00d9\3\2\2\2\u0868\u0869\7\u00bb\2\2\u0869\u086a")
        buf.write("\7\u00de\2\2\u086a\u086c\5\u00dco\2\u086b\u086d\7\u00de")
        buf.write("\2\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086e")
        buf.write("\3\2\2\2\u086e\u0873\7\3\2\2\u086f\u0871\7\u00de\2\2\u0870")
        buf.write("\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871\u0872\3\2\2\2")
        buf.write("\u0872\u0874\5\u0088E\2\u0873\u0870\3\2\2\2\u0873\u0874")
        buf.write("\3\2\2\2\u0874\u00db\3\2\2\2\u0875\u0877\7\5\2\2\u0876")
        buf.write("\u0875\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\3\2\2\2")
        buf.write("\u0878\u0879\5\u00ccg\2\u0879\u00dd\3\2\2\2\u087a\u087d")
        buf.write("\5\u00e0q\2\u087b\u087d\5\u00e2r\2\u087c\u087a\3\2\2\2")
        buf.write("\u087c\u087b\3\2\2\2\u087d\u00df\3\2\2\2\u087e\u087f\7")
        buf.write("\32\2\2\u087f\u0880\7\u00de\2\2\u0880\u0882\5\u0106\u0084")
        buf.write("\2\u0881\u0883\5\u011c\u008f\2\u0882\u0881\3\2\2\2\u0882")
        buf.write("\u0883\3\2\2\2\u0883\u0891\3\2\2\2\u0884\u0886\7\u00de")
        buf.write("\2\2\u0885\u0884\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0887")
        buf.write("\3\2\2\2\u0887\u0889\7\u00c4\2\2\u0888\u088a\7\u00de\2")
        buf.write("\2\u0889\u0888\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088b")
        buf.write("\3\2\2\2\u088b\u088d\5\u00f6|\2\u088c\u088e\7\u00de\2")
        buf.write("\2\u088d\u088c\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u088f")
        buf.write("\3\2\2\2\u088f\u0890\7\u00cd\2\2\u0890\u0892\3\2\2\2\u0891")
        buf.write("\u0885\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u089c\3\2\2\2")
        buf.write("\u0893\u0895\7\u00de\2\2\u0894\u0893\3\2\2\2\u0894\u0895")
        buf.write("\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0897\7\u00c4\2\2\u0897")
        buf.write("\u0898\5\u0102\u0082\2\u0898\u0899\7\u00cd\2\2\u0899\u089b")
        buf.write("\3\2\2\2\u089a\u0894\3\2\2\2\u089b\u089e\3\2\2\2\u089c")
        buf.write("\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u00e1\3\2\2\2")
        buf.write("\u089e\u089c\3\2\2\2\u089f\u08a0\7\32\2\2\u08a0\u08a2")
        buf.write("\7\u00de\2\2\u08a1\u08a3\5\u00eav\2\u08a2\u08a1\3\2\2")
        buf.write("\2\u08a2\u08a3\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a5")
        buf.write("\7\6\2\2\u08a5\u08a7\5\u0106\u0084\2\u08a6\u08a8\5\u011c")
        buf.write("\u008f\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8")
        buf.write("\u08b6\3\2\2\2\u08a9\u08ab\7\u00de\2\2\u08aa\u08a9\3\2")
        buf.write("\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08ae")
        buf.write("\7\u00c4\2\2\u08ad\u08af\7\u00de\2\2\u08ae\u08ad\3\2\2")
        buf.write("\2\u08ae\u08af\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b2")
        buf.write("\5\u00f6|\2\u08b1\u08b3\7\u00de\2\2\u08b2\u08b1\3\2\2")
        buf.write("\2\u08b2\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5")
        buf.write("\7\u00cd\2\2\u08b5\u08b7\3\2\2\2\u08b6\u08aa\3\2\2\2\u08b6")
        buf.write("\u08b7\3\2\2\2\u08b7\u08c1\3\2\2\2\u08b8\u08ba\7\u00de")
        buf.write("\2\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bb")
        buf.write("\3\2\2\2\u08bb\u08bc\7\u00c4\2\2\u08bc\u08bd\5\u0102\u0082")
        buf.write("\2\u08bd\u08be\7\u00cd\2\2\u08be\u08c0\3\2\2\2\u08bf\u08b9")
        buf.write("\3\2\2\2\u08c0\u08c3\3\2\2\2\u08c1\u08bf\3\2\2\2\u08c1")
        buf.write("\u08c2\3\2\2\2\u08c2\u00e3\3\2\2\2\u08c3\u08c1\3\2\2\2")
        buf.write("\u08c4\u08c7\5\u00e6t\2\u08c5\u08c7\5\u00e8u\2\u08c6\u08c4")
        buf.write("\3\2\2\2\u08c6\u08c5\3\2\2\2\u08c7\u00e5\3\2\2\2\u08c8")
        buf.write("\u08ca\5\u00eav\2\u08c9\u08c8\3\2\2\2\u08c9\u08ca\3\2")
        buf.write("\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08cc\7\6\2\2\u08cc\u08ce")
        buf.write("\5\u0106\u0084\2\u08cd\u08cf\5\u011c\u008f\2\u08ce\u08cd")
        buf.write("\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0")
        buf.write("\u08d1\7\u00de\2\2\u08d1\u08d3\5\u00f6|\2\u08d2\u08d0")
        buf.write("\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d5\3\2\2\2\u08d4")
        buf.write("\u08d6\5\u00fa~\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2")
        buf.write("\2\2\u08d6\u08e0\3\2\2\2\u08d7\u08d9\7\u00de\2\2\u08d8")
        buf.write("\u08d7\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08da\3\2\2\2")
        buf.write("\u08da\u08db\7\u00c4\2\2\u08db\u08dc\5\u0102\u0082\2\u08dc")
        buf.write("\u08dd\7\u00cd\2\2\u08dd\u08df\3\2\2\2\u08de\u08d8\3\2")
        buf.write("\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08e1")
        buf.write("\3\2\2\2\u08e1\u00e7\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3")
        buf.write("\u08e6\5\u010c\u0087\2\u08e4\u08e5\7\u00de\2\2\u08e5\u08e7")
        buf.write("\5\u00f6|\2\u08e6\u08e4\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7")
        buf.write("\u08f1\3\2\2\2\u08e8\u08ea\7\u00de\2\2\u08e9\u08e8\3\2")
        buf.write("\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec")
        buf.write("\7\u00c4\2\2\u08ec\u08ed\5\u0102\u0082\2\u08ed\u08ee\7")
        buf.write("\u00cd\2\2\u08ee\u08f0\3\2\2\2\u08ef\u08e9\3\2\2\2\u08f0")
        buf.write("\u08f3\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1\u08f2\3\2\2\2")
        buf.write("\u08f2\u00e9\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f4\u08f9\5")
        buf.write("\u00f0y\2\u08f5\u08f9\5\u00ecw\2\u08f6\u08f9\5\u00eex")
        buf.write("\2\u08f7\u08f9\5\u00f4{\2\u08f8\u08f4\3\2\2\2\u08f8\u08f5")
        buf.write("\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f8\u08f7\3\2\2\2\u08f9")
        buf.write("\u00eb\3\2\2\2\u08fa\u08fc\5\u0106\u0084\2\u08fb\u08fd")
        buf.write("\5\u011c\u008f\2\u08fc\u08fb\3\2\2\2\u08fc\u08fd\3\2\2")
        buf.write("\2\u08fd\u08ff\3\2\2\2\u08fe\u0900\5\u00fa~\2\u08ff\u08fe")
        buf.write("\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u090a\3\2\2\2\u0901")
        buf.write("\u0903\7\u00de\2\2\u0902\u0901\3\2\2\2\u0902\u0903\3\2")
        buf.write("\2\2\u0903\u0904\3\2\2\2\u0904\u0905\7\u00c4\2\2\u0905")
        buf.write("\u0906\5\u0102\u0082\2\u0906\u0907\7\u00cd\2\2\u0907\u0909")
        buf.write("\3\2\2\2\u0908\u0902\3\2\2\2\u0909\u090c\3\2\2\2\u090a")
        buf.write("\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u00ed\3\2\2\2")
        buf.write("\u090c\u090a\3\2\2\2\u090d\u0910\5\u0106\u0084\2\u090e")
        buf.write("\u0910\5\u010a\u0086\2\u090f\u090d\3\2\2\2\u090f\u090e")
        buf.write("\3\2\2\2\u0910\u0912\3\2\2\2\u0911\u0913\5\u011c\u008f")
        buf.write("\2\u0912\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0915")
        buf.write("\3\2\2\2\u0914\u0916\7\u00de\2\2\u0915\u0914\3\2\2\2\u0915")
        buf.write("\u0916\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u0919\7\u00c4")
        buf.write("\2\2\u0918\u091a\7\u00de\2\2\u0919\u0918\3\2\2\2\u0919")
        buf.write("\u091a\3\2\2\2\u091a\u091f\3\2\2\2\u091b\u091d\5\u00f6")
        buf.write("|\2\u091c\u091e\7\u00de\2\2\u091d\u091c\3\2\2\2\u091d")
        buf.write("\u091e\3\2\2\2\u091e\u0920\3\2\2\2\u091f\u091b\3\2\2\2")
        buf.write("\u091f\u0920\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0923\7")
        buf.write("\u00cd\2\2\u0922\u0924\5\u00fa~\2\u0923\u0922\3\2\2\2")
        buf.write("\u0923\u0924\3\2\2\2\u0924\u092e\3\2\2\2\u0925\u0927\7")
        buf.write("\u00de\2\2\u0926\u0925\3\2\2\2\u0926\u0927\3\2\2\2\u0927")
        buf.write("\u0928\3\2\2\2\u0928\u0929\7\u00c4\2\2\u0929\u092a\5\u0102")
        buf.write("\u0082\2\u092a\u092b\7\u00cd\2\2\u092b\u092d\3\2\2\2\u092c")
        buf.write("\u0926\3\2\2\2\u092d\u0930\3\2\2\2\u092e\u092c\3\2\2\2")
        buf.write("\u092e\u092f\3\2\2\2\u092f\u00ef\3\2\2\2\u0930\u092e\3")
        buf.write("\2\2\2\u0931\u0934\5\u00ecw\2\u0932\u0934\5\u00eex\2\u0933")
        buf.write("\u0931\3\2\2\2\u0933\u0932\3\2\2\2\u0933\u0934\3\2\2\2")
        buf.write("\u0934\u0936\3\2\2\2\u0935\u0937\5\u00f2z\2\u0936\u0935")
        buf.write("\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0936\3\2\2\2\u0938")
        buf.write("\u0939\3\2\2\2\u0939\u093b\3\2\2\2\u093a\u093c\5\u00fa")
        buf.write("~\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u0946")
        buf.write("\3\2\2\2\u093d\u093f\7\u00de\2\2\u093e\u093d\3\2\2\2\u093e")
        buf.write("\u093f\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\7\u00c4")
        buf.write("\2\2\u0941\u0942\5\u0102\u0082\2\u0942\u0943\7\u00cd\2")
        buf.write("\2\u0943\u0945\3\2\2\2\u0944\u093e\3\2\2\2\u0945\u0948")
        buf.write("\3\2\2\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947")
        buf.write("\u00f1\3\2\2\2\u0948\u0946\3\2\2\2\u0949\u094c\t\r\2\2")
        buf.write("\u094a\u094d\5\u00ecw\2\u094b\u094d\5\u00eex\2\u094c\u094a")
        buf.write("\3\2\2\2\u094c\u094b\3\2\2\2\u094d\u00f3\3\2\2\2\u094e")
        buf.write("\u094f\5\u00fa~\2\u094f\u00f5\3\2\2\2\u0950\u0952\5\u00f8")
        buf.write("}\2\u0951\u0950\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0954")
        buf.write("\3\2\2\2\u0953\u0955\7\u00de\2\2\u0954\u0953\3\2\2\2\u0954")
        buf.write("\u0955\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0958\t\13\2")
        buf.write("\2\u0957\u0959\7\u00de\2\2\u0958\u0957\3\2\2\2\u0958\u0959")
        buf.write("\3\2\2\2\u0959\u095b\3\2\2\2\u095a\u0951\3\2\2\2\u095b")
        buf.write("\u095e\3\2\2\2\u095c\u095a\3\2\2\2\u095c\u095d\3\2\2\2")
        buf.write("\u095d\u095f\3\2\2\2\u095e\u095c\3\2\2\2\u095f\u096c\5")
        buf.write("\u00f8}\2\u0960\u0962\7\u00de\2\2\u0961\u0960\3\2\2\2")
        buf.write("\u0961\u0962\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0965\t")
        buf.write("\13\2\2\u0964\u0966\7\u00de\2\2\u0965\u0964\3\2\2\2\u0965")
        buf.write("\u0966\3\2\2\2\u0966\u0968\3\2\2\2\u0967\u0969\5\u00f8")
        buf.write("}\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096b")
        buf.write("\3\2\2\2\u096a\u0961\3\2\2\2\u096b\u096e\3\2\2\2\u096c")
        buf.write("\u096a\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u00f7\3\2\2\2")
        buf.write("\u096e\u096c\3\2\2\2\u096f\u0971\7\u00c4\2\2\u0970\u096f")
        buf.write("\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0974\3\2\2\2\u0972")
        buf.write("\u0973\t\16\2\2\u0973\u0975\7\u00de\2\2\u0974\u0972\3")
        buf.write("\2\2\2\u0974\u0975\3\2\2\2\u0975\u0977\3\2\2\2\u0976\u0978")
        buf.write("\7\u00cd\2\2\u0977\u0976\3\2\2\2\u0977\u0978\3\2\2\2\u0978")
        buf.write("\u0979\3\2\2\2\u0979\u097a\5\u00ccg\2\u097a\u00f9\3\2")
        buf.write("\2\2\u097b\u097c\7\7\2\2\u097c\u097e\5\u0106\u0084\2\u097d")
        buf.write("\u097f\5\u011c\u008f\2\u097e\u097d\3\2\2\2\u097e\u097f")
        buf.write("\3\2\2\2\u097f\u00fb\3\2\2\2\u0980\u0992\7\u00c4\2\2\u0981")
        buf.write("\u0983\7\u00de\2\2\u0982\u0981\3\2\2\2\u0982\u0983\3\2")
        buf.write("\2\2\u0983\u0984\3\2\2\2\u0984\u098f\5\u00fe\u0080\2\u0985")
        buf.write("\u0987\7\u00de\2\2\u0986\u0985\3\2\2\2\u0986\u0987\3\2")
        buf.write("\2\2\u0987\u0988\3\2\2\2\u0988\u098a\7\3\2\2\u0989\u098b")
        buf.write("\7\u00de\2\2\u098a\u0989\3\2\2\2\u098a\u098b\3\2\2\2\u098b")
        buf.write("\u098c\3\2\2\2\u098c\u098e\5\u00fe\u0080\2\u098d\u0986")
        buf.write("\3\2\2\2\u098e\u0991\3\2\2\2\u098f\u098d\3\2\2\2\u098f")
        buf.write("\u0990\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u098f\3\2\2\2")
        buf.write("\u0992\u0982\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u0995\3")
        buf.write("\2\2\2\u0994\u0996\7\u00de\2\2\u0995\u0994\3\2\2\2\u0995")
        buf.write("\u0996\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998\7\u00cd")
        buf.write("\2\2\u0998\u00fd\3\2\2\2\u0999\u099a\7|\2\2\u099a\u099c")
        buf.write("\7\u00de\2\2\u099b\u0999\3\2\2\2\u099b\u099c\3\2\2\2\u099c")
        buf.write("\u099f\3\2\2\2\u099d\u099e\t\17\2\2\u099e\u09a0\7\u00de")
        buf.write("\2\2\u099f\u099d\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a3")
        buf.write("\3\2\2\2\u09a1\u09a2\7\u0083\2\2\u09a2\u09a4\7\u00de\2")
        buf.write("\2\u09a3\u09a1\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5")
        buf.write("\3\2\2\2\u09a5\u09a7\5\u0106\u0084\2\u09a6\u09a8\5\u011c")
        buf.write("\u008f\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8")
        buf.write("\u09b1\3\2\2\2\u09a9\u09ab\7\u00de\2\2\u09aa\u09a9\3\2")
        buf.write("\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ae")
        buf.write("\7\u00c4\2\2\u09ad\u09af\7\u00de\2\2\u09ae\u09ad\3\2\2")
        buf.write("\2\u09ae\u09af\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b2")
        buf.write("\7\u00cd\2\2\u09b1\u09aa\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2")
        buf.write("\u09b7\3\2\2\2\u09b3\u09b5\7\u00de\2\2\u09b4\u09b3\3\2")
        buf.write("\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b8")
        buf.write("\5\u0108\u0085\2\u09b7\u09b4\3\2\2\2\u09b7\u09b8\3\2\2")
        buf.write("\2\u09b8\u09bd\3\2\2\2\u09b9\u09bb\7\u00de\2\2\u09ba\u09b9")
        buf.write("\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc")
        buf.write("\u09be\5\u0100\u0081\2\u09bd\u09ba\3\2\2\2\u09bd\u09be")
        buf.write("\3\2\2\2\u09be\u00ff\3\2\2\2\u09bf\u09c1\7\u00c0\2\2\u09c0")
        buf.write("\u09c2\7\u00de\2\2\u09c1\u09c0\3\2\2\2\u09c1\u09c2\3\2")
        buf.write("\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c4\5\u00ccg\2\u09c4")
        buf.write("\u0101\3\2\2\2\u09c5\u09d0\5\u0104\u0083\2\u09c6\u09c8")
        buf.write("\7\u00de\2\2\u09c7\u09c6\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8")
        buf.write("\u09c9\3\2\2\2\u09c9\u09cb\7\3\2\2\u09ca\u09cc\7\u00de")
        buf.write("\2\2\u09cb\u09ca\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09cd")
        buf.write("\3\2\2\2\u09cd\u09cf\5\u0104\u0083\2\u09ce\u09c7\3\2\2")
        buf.write("\2\u09cf\u09d2\3\2\2\2\u09d0\u09ce\3\2\2\2\u09d0\u09d1")
        buf.write("\3\2\2\2\u09d1\u0103\3\2\2\2\u09d2\u09d0\3\2\2\2\u09d3")
        buf.write("\u09d4\5\u00ccg\2\u09d4\u09d5\7\u00de\2\2\u09d5\u09d6")
        buf.write("\7\u00ad\2\2\u09d6\u09d7\7\u00de\2\2\u09d7\u09d9\3\2\2")
        buf.write("\2\u09d8\u09d3\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da")
        buf.write("\3\2\2\2\u09da\u09db\5\u00ccg\2\u09db\u0105\3\2\2\2\u09dc")
        buf.write("\u09df\7\u00df\2\2\u09dd\u09df\5\u0120\u0091\2\u09de\u09dc")
        buf.write("\3\2\2\2\u09de\u09dd\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0")
        buf.write("\u09de\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u0107\3\2\2\2")
        buf.write("\u09e2\u09e4\7\22\2\2\u09e3\u09e5\7\u00de\2\2\u09e4\u09e3")
        buf.write("\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e8\3\2\2\2\u09e6")
        buf.write("\u09e7\7t\2\2\u09e7\u09e9\7\u00de\2\2\u09e8\u09e6\3\2")
        buf.write("\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09ef")
        buf.write("\5\u011a\u008e\2\u09eb\u09ed\7\u00de\2\2\u09ec\u09eb\3")
        buf.write("\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09f0")
        buf.write("\5\u0112\u008a\2\u09ef\u09ec\3\2\2\2\u09ef\u09f0\3\2\2")
        buf.write("\2\u09f0\u0109\3\2\2\2\u09f1\u0a06\7\26\2\2\u09f2\u0a06")
        buf.write("\7\31\2\2\u09f3\u0a06\7 \2\2\u09f4\u0a06\7#\2\2\u09f5")
        buf.write("\u0a06\7\64\2\2\u09f6\u0a06\7Z\2\2\u09f7\u0a06\7^\2\2")
        buf.write("\u09f8\u0a06\7\u00a2\2\2\u09f9\u0a02\7\u00a7\2\2\u09fa")
        buf.write("\u09fc\7\u00de\2\2\u09fb\u09fa\3\2\2\2\u09fb\u09fc\3\2")
        buf.write("\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09ff\7\u00c8\2\2\u09fe")
        buf.write("\u0a00\7\u00de\2\2\u09ff\u09fe\3\2\2\2\u09ff\u0a00\3\2")
        buf.write("\2\2\u0a00\u0a01\3\2\2\2\u0a01\u0a03\5\u00ccg\2\u0a02")
        buf.write("\u09fb\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a06\3\2\2\2")
        buf.write("\u0a04\u0a06\7\u00b4\2\2\u0a05\u09f1\3\2\2\2\u0a05\u09f2")
        buf.write("\3\2\2\2\u0a05\u09f3\3\2\2\2\u0a05\u09f4\3\2\2\2\u0a05")
        buf.write("\u09f5\3\2\2\2\u0a05\u09f6\3\2\2\2\u0a05\u09f7\3\2\2\2")
        buf.write("\u0a05\u09f8\3\2\2\2\u0a05\u09f9\3\2\2\2\u0a05\u0a04\3")
        buf.write("\2\2\2\u0a06\u010b\3\2\2\2\u0a07\u0a0c\7\u00df\2\2\u0a08")
        buf.write("\u0a0b\5\u0120\u0091\2\u0a09\u0a0b\7\u00df\2\2\u0a0a\u0a08")
        buf.write("\3\2\2\2\u0a0a\u0a09\3\2\2\2\u0a0b\u0a0e\3\2\2\2\u0a0c")
        buf.write("\u0a0a\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a17\3\2\2\2")
        buf.write("\u0a0e\u0a0c\3\2\2\2\u0a0f\u0a12\5\u0120\u0091\2\u0a10")
        buf.write("\u0a13\5\u0120\u0091\2\u0a11\u0a13\7\u00df\2\2\u0a12\u0a10")
        buf.write("\3\2\2\2\u0a12\u0a11\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14")
        buf.write("\u0a12\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a17\3\2\2\2")
        buf.write("\u0a16\u0a07\3\2\2\2\u0a16\u0a0f\3\2\2\2\u0a17\u010d\3")
        buf.write("\2\2\2\u0a18\u0a19\t\20\2\2\u0a19\u010f\3\2\2\2\u0a1a")
        buf.write("\u0a1f\5\u0106\u0084\2\u0a1b\u0a1c\t\r\2\2\u0a1c\u0a1e")
        buf.write("\5\u0106\u0084\2\u0a1d\u0a1b\3\2\2\2\u0a1e\u0a21\3\2\2")
        buf.write("\2\u0a1f\u0a1d\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0111")
        buf.write("\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a22\u0a24\7\u00c8\2\2\u0a23")
        buf.write("\u0a25\7\u00de\2\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2")
        buf.write("\2\2\u0a25\u0a28\3\2\2\2\u0a26\u0a29\7\u00d4\2\2\u0a27")
        buf.write("\u0a29\5\u0106\u0084\2\u0a28\u0a26\3\2\2\2\u0a28\u0a27")
        buf.write("\3\2\2\2\u0a29\u0113\3\2\2\2\u0a2a\u0a33\5\u010c\u0087")
        buf.write("\2\u0a2b\u0a2d\7\u00de\2\2\u0a2c\u0a2b\3\2\2\2\u0a2c\u0a2d")
        buf.write("\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0a30\7\u00c6\2\2\u0a2f")
        buf.write("\u0a31\7\u00de\2\2\u0a30\u0a2f\3\2\2\2\u0a30\u0a31\3\2")
        buf.write("\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a34\5\u010c\u0087\2\u0a33")
        buf.write("\u0a2c\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0115\3\2\2\2")
        buf.write("\u0a35\u0a36\5\u0106\u0084\2\u0a36\u0a37\7\u00dc\2\2\u0a37")
        buf.write("\u0117\3\2\2\2\u0a38\u0a39\t\21\2\2\u0a39\u0119\3\2\2")
        buf.write("\2\u0a3a\u0a3d\5\u010a\u0086\2\u0a3b\u0a3d\5\u0110\u0089")
        buf.write("\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3b\3\2\2\2\u0a3d\u0a46")
        buf.write("\3\2\2\2\u0a3e\u0a40\7\u00de\2\2\u0a3f\u0a3e\3\2\2\2\u0a3f")
        buf.write("\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a43\7\u00c4")
        buf.write("\2\2\u0a42\u0a44\7\u00de\2\2\u0a43\u0a42\3\2\2\2\u0a43")
        buf.write("\u0a44\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a47\7\u00cd")
        buf.write("\2\2\u0a46\u0a3f\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u011b")
        buf.write("\3\2\2\2\u0a48\u0a49\t\22\2\2\u0a49\u011d\3\2\2\2\u0a4a")
        buf.write("\u0a4b\t\23\2\2\u0a4b\u011f\3\2\2\2\u0a4c\u0a4d\t\24\2")
        buf.write("\2\u0a4d\u0121\3\2\2\2\u0a4e\u0a4f\7\u00d9\2\2\u0a4f\u0123")
        buf.write("\3\2\2\2\u0a50\u0a51\7\u00da\2\2\u0a51\u0125\3\2\2\2\u0a52")
        buf.write("\u0a54\7\u00de\2\2\u0a53\u0a52\3\2\2\2\u0a53\u0a54\3\2")
        buf.write("\2\2\u0a54\u0a58\3\2\2\2\u0a55\u0a59\7\u00d8\2\2\u0a56")
        buf.write("\u0a59\5\u0124\u0093\2\u0a57\u0a59\5\u0122\u0092\2\u0a58")
        buf.write("\u0a55\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58\u0a57\3\2\2\2")
        buf.write("\u0a59\u0a5b\3\2\2\2\u0a5a\u0a5c\7\u00de\2\2\u0a5b\u0a5a")
        buf.write("\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0127\3\2\2\2\u0a5d")
        buf.write("\u0a66\5\u0126\u0094\2\u0a5e\u0a60\7\u00de\2\2\u0a5f\u0a5e")
        buf.write("\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61")
        buf.write("\u0a63\7\u00dc\2\2\u0a62\u0a64\7\u00de\2\2\u0a63\u0a62")
        buf.write("\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a66\3\2\2\2\u0a65")
        buf.write("\u0a5d\3\2\2\2\u0a65\u0a5f\3\2\2\2\u0a66\u0a69\3\2\2\2")
        buf.write("\u0a67\u0a65\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0129\3")
        buf.write("\2\2\2\u0a69\u0a67\3\2\2\2\u01c8\u012e\u0133\u013a\u013d")
        buf.write("\u0140\u0145\u0149\u014e\u0152\u0157\u015b\u0160\u0164")
        buf.write("\u0170\u0176\u017c\u0180\u0186\u018d\u0191\u0197\u019d")
        buf.write("\u01a3\u01ae\u01ba\u01be\u01c4\u01ca\u01d0\u01d9\u01df")
        buf.write("\u01e3\u01e7\u01eb\u01f0\u01f9\u0241\u0247\u024b\u024e")
        buf.write("\u025e\u0262\u0267\u026a\u026f\u0275\u0279\u027e\u0283")
        buf.write("\u0287\u028a\u028e\u0294\u0298\u029f\u02a5\u02a9\u02ac")
        buf.write("\u02b1\u02bb\u02be\u02c1\u02c5\u02cb\u02cf\u02d4\u02db")
        buf.write("\u02df\u02e3\u02e7\u02ea\u02ef\u02fa\u0307\u030e\u0317")
        buf.write("\u031e\u0322\u0325\u032e\u0333\u033d\u0343\u034d\u0351")
        buf.write("\u035b\u0363\u0368\u036e\u0372\u0375\u0379\u0384\u0388")
        buf.write("\u038d\u0392\u0396\u039a\u039e\u03a1\u03a4\u03a7\u03aa")
        buf.write("\u03ae\u03b6\u03ba\u03bd\u03c0\u03c4\u03db\u03e1\u03e5")
        buf.write("\u03e9\u03f2\u03fd\u0402\u040c\u0410\u0415\u041d\u0421")
        buf.write("\u0425\u042d\u0431\u043d\u0441\u0448\u044a\u0450\u0454")
        buf.write("\u045a\u045e\u0462\u046a\u046e\u0474\u047d\u047f\u0484")
        buf.write("\u048d\u048f\u0497\u0499\u049e\u04a2\u04a6\u04ac\u04b0")
        buf.write("\u04b4\u04cc\u04d6\u04da\u04df\u04ea\u04ee\u04f3\u0501")
        buf.write("\u0505\u050e\u0512\u0515\u0519\u051d\u0520\u0524\u0528")
        buf.write("\u052b\u052f\u0532\u0536\u0538\u053d\u0541\u0545\u0549")
        buf.write("\u054b\u0551\u0555\u0558\u055d\u0561\u0567\u056a\u056d")
        buf.write("\u0571\u0575\u057c\u0580\u0586\u0589\u058d\u0594\u0598")
        buf.write("\u059e\u05a1\u05a5\u05ad\u05b1\u05b4\u05b7\u05bb\u05c3")
        buf.write("\u05c7\u05cb\u05cd\u05d0\u05d5\u05db\u05df\u05e3\u05e8")
        buf.write("\u05ed\u05f1\u05f5\u05fa\u0602\u0604\u0610\u0614\u061c")
        buf.write("\u0620\u0628\u062c\u0630\u0634\u0638\u063c\u0644\u0648")
        buf.write("\u0655\u065c\u0660\u066b\u0672\u0677\u067b\u0680\u0683")
        buf.write("\u0689\u068d\u0690\u0696\u069a\u06a2\u06a6\u06af\u06b3")
        buf.write("\u06b7\u06bb\u06be\u06c2\u06c8\u06cc\u06d3\u06dc\u06e3")
        buf.write("\u06e7\u06ea\u06ed\u06f0\u06f4\u06ff\u0709\u070d\u0714")
        buf.write("\u0716\u071d\u0721\u0725\u072a\u0731\u0739\u073e\u0742")
        buf.write("\u0748\u074d\u0752\u0755\u0759\u075d\u0762\u0766\u076b")
        buf.write("\u076f\u0774\u0778\u077d\u0781\u0786\u078a\u078f\u0793")
        buf.write("\u0798\u079c\u07a1\u07a5\u07aa\u07ae\u07b3\u07b7\u07bc")
        buf.write("\u07c0\u07c5\u07c9\u07ce\u07d2\u07d7\u07db\u07e0\u07e4")
        buf.write("\u07e9\u07ed\u07f2\u07f6\u07fb\u07ff\u0804\u0808\u080b")
        buf.write("\u080d\u0813\u0818\u081e\u0822\u0827\u082c\u0830\u0834")
        buf.write("\u0836\u083a\u083c\u083f\u0843\u084a\u0852\u0856\u0860")
        buf.write("\u0864\u086c\u0870\u0873\u0876\u087c\u0882\u0885\u0889")
        buf.write("\u088d\u0891\u0894\u089c\u08a2\u08a7\u08aa\u08ae\u08b2")
        buf.write("\u08b6\u08b9\u08c1\u08c6\u08c9\u08ce\u08d2\u08d5\u08d8")
        buf.write("\u08e0\u08e6\u08e9\u08f1\u08f8\u08fc\u08ff\u0902\u090a")
        buf.write("\u090f\u0912\u0915\u0919\u091d\u091f\u0923\u0926\u092e")
        buf.write("\u0933\u0938\u093b\u093e\u0946\u094c\u0951\u0954\u0958")
        buf.write("\u095c\u0961\u0965\u0968\u096c\u0970\u0974\u0977\u097e")
        buf.write("\u0982\u0986\u098a\u098f\u0992\u0995\u099b\u099f\u09a3")
        buf.write("\u09a7\u09aa\u09ae\u09b1\u09b4\u09b7\u09ba\u09bd\u09c1")
        buf.write("\u09c7\u09cb\u09d0\u09d8\u09de\u09e0\u09e4\u09e8\u09ec")
        buf.write("\u09ef\u09fb\u09ff\u0a02\u0a05\u0a0a\u0a0c\u0a12\u0a14")
        buf.write("\u0a16\u0a1f\u0a24\u0a28\u0a2c\u0a30\u0a33\u0a3c\u0a3f")
        buf.write("\u0a43\u0a46\u0a53\u0a58\u0a5b\u0a5f\u0a63\u0a65\u0a67")
        return buf.getvalue()


class vbaParser ( Parser ):

    grammarFileName = "vba.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "';'", "'#'", "'.'", "'!'", "'%'", 
                     "'@'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "':='", 
                     "<INVALID>", "'='", "'>='", "'>'", "'<='", "'('", "'<'", 
                     "'-'", "'-='", "'*'", "'<>'", "'+'", "'+='", "'^'", 
                     "')'", "'['", "']'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'''", "':'", "'_'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                      "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", "BEGIN", 
                      "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
                      "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", 
                      "COLLECTION", "CONST", "DATABASE", "DATE", "DECLARE", 
                      "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", 
                      "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", 
                      "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", 
                      "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                      "END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", 
                      "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
                      "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", 
                      "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
                      "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
                      "IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", 
                      "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
                      "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", 
                      "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", 
                      "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", 
                      "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
                      "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", 
                      "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
                      "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
                      "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", 
                      "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", 
                      "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", 
                      "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", 
                      "SELECT", "SENDKEYS", "SET", "CHR", "SETATTR", "SHARED", 
                      "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
                      "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", 
                      "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", 
                      "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
                      "WRITE", "XOR", "AMPERSAND", "ASSIGN", "DIV", "EQ", 
                      "GEQ", "GT", "LEQ", "LPAREN", "LT", "MINUS", "MINUS_EQ", 
                      "MULT", "NEQ", "PLUS", "PLUS_EQ", "POW", "RPAREN", 
                      "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", 
                      "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", 
                      "DOUBLELITERAL", "DATELITERAL", "LINE_CONTINUATION", 
                      "NEWLINE", "REMCOMMENT", "COMMENT", "SINGLEQUOTE", 
                      "COLON", "UNDERSCORE", "WS", "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_moduleHeader = 2
    RULE_moduleConfig = 3
    RULE_moduleConfigElement = 4
    RULE_moduleAttributes = 5
    RULE_moduleDeclarations = 6
    RULE_moduleOption = 7
    RULE_moduleDeclarationsElement = 8
    RULE_macroStmt = 9
    RULE_moduleBody = 10
    RULE_moduleBodyElement = 11
    RULE_attributeStmt = 12
    RULE_block = 13
    RULE_blockStmt = 14
    RULE_appactivateStmt = 15
    RULE_beepStmt = 16
    RULE_chdirStmt = 17
    RULE_chdriveStmt = 18
    RULE_closeStmt = 19
    RULE_constStmt = 20
    RULE_constSubStmt = 21
    RULE_dateStmt = 22
    RULE_declareStmt = 23
    RULE_deftypeStmt = 24
    RULE_deleteSettingStmt = 25
    RULE_doLoopStmt = 26
    RULE_endStmt = 27
    RULE_enumerationStmt = 28
    RULE_enumerationStmt_Constant = 29
    RULE_eraseStmt = 30
    RULE_errorStmt = 31
    RULE_eventStmt = 32
    RULE_exitStmt = 33
    RULE_filecopyStmt = 34
    RULE_forEachStmt = 35
    RULE_forNextStmt = 36
    RULE_functionStmt = 37
    RULE_getStmt = 38
    RULE_goSubStmt = 39
    RULE_goToStmt = 40
    RULE_ifThenElseStmt = 41
    RULE_ifBlockStmt = 42
    RULE_ifConditionStmt = 43
    RULE_ifElseIfBlockStmt = 44
    RULE_ifElseBlockStmt = 45
    RULE_implementsStmt = 46
    RULE_inputStmt = 47
    RULE_killStmt = 48
    RULE_letStmt = 49
    RULE_lineInputStmt = 50
    RULE_loadStmt = 51
    RULE_lockStmt = 52
    RULE_lsetStmt = 53
    RULE_macroConstStmt = 54
    RULE_macroIfThenElseStmt = 55
    RULE_macroIfBlockStmt = 56
    RULE_macroElseIfBlockStmt = 57
    RULE_macroElseBlockStmt = 58
    RULE_midStmt = 59
    RULE_chrStmt = 60
    RULE_mkdirStmt = 61
    RULE_nameStmt = 62
    RULE_onErrorStmt = 63
    RULE_onGoToStmt = 64
    RULE_onGoSubStmt = 65
    RULE_openStmt = 66
    RULE_outputList = 67
    RULE_outputList_Expression = 68
    RULE_printStmt = 69
    RULE_propertyGetStmt = 70
    RULE_propertySetStmt = 71
    RULE_propertyLetStmt = 72
    RULE_putStmt = 73
    RULE_raiseEventStmt = 74
    RULE_randomizeStmt = 75
    RULE_redimStmt = 76
    RULE_redimSubStmt = 77
    RULE_resetStmt = 78
    RULE_resumeStmt = 79
    RULE_returnStmt = 80
    RULE_rmdirStmt = 81
    RULE_rsetStmt = 82
    RULE_savepictureStmt = 83
    RULE_saveSettingStmt = 84
    RULE_seekStmt = 85
    RULE_selectCaseStmt = 86
    RULE_sC_Selection = 87
    RULE_sC_Case = 88
    RULE_sC_Cond = 89
    RULE_sendkeysStmt = 90
    RULE_setattrStmt = 91
    RULE_setStmt = 92
    RULE_stopStmt = 93
    RULE_subStmt = 94
    RULE_timeStmt = 95
    RULE_typeStmt = 96
    RULE_typeStmt_Element = 97
    RULE_typeOfStmt = 98
    RULE_unloadStmt = 99
    RULE_unlockStmt = 100
    RULE_valueStmt = 101
    RULE_variableStmt = 102
    RULE_variableListStmt = 103
    RULE_variableSubStmt = 104
    RULE_whileWendStmt = 105
    RULE_widthStmt = 106
    RULE_withStmt = 107
    RULE_writeStmt = 108
    RULE_fileNumber = 109
    RULE_explicitCallStmt = 110
    RULE_eCS_ProcedureCall = 111
    RULE_eCS_MemberProcedureCall = 112
    RULE_implicitCallStmt_InBlock = 113
    RULE_iCS_B_MemberProcedureCall = 114
    RULE_iCS_B_ProcedureCall = 115
    RULE_implicitCallStmt_InStmt = 116
    RULE_iCS_S_VariableOrProcedureCall = 117
    RULE_iCS_S_ProcedureOrArrayCall = 118
    RULE_iCS_S_MembersCall = 119
    RULE_iCS_S_MemberCall = 120
    RULE_iCS_S_DictionaryCall = 121
    RULE_argsCall = 122
    RULE_argCall = 123
    RULE_dictionaryCallStmt = 124
    RULE_argList = 125
    RULE_arg = 126
    RULE_argDefaultValue = 127
    RULE_subscripts = 128
    RULE_subscript = 129
    RULE_ambiguousIdentifier = 130
    RULE_asTypeClause = 131
    RULE_baseType = 132
    RULE_certainIdentifier = 133
    RULE_comparisonOperator = 134
    RULE_complexType = 135
    RULE_fieldLength = 136
    RULE_letterrange = 137
    RULE_lineLabel = 138
    RULE_literal = 139
    RULE_vbatype = 140
    RULE_typeHint = 141
    RULE_visibility = 142
    RULE_ambiguousKeyword = 143
    RULE_remComment = 144
    RULE_comment = 145
    RULE_endOfLine = 146
    RULE_endOfStatement = 147

    ruleNames =  [ "startRule", "module", "moduleHeader", "moduleConfig", 
                   "moduleConfigElement", "moduleAttributes", "moduleDeclarations", 
                   "moduleOption", "moduleDeclarationsElement", "macroStmt", 
                   "moduleBody", "moduleBodyElement", "attributeStmt", "block", 
                   "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", 
                   "chdriveStmt", "closeStmt", "constStmt", "constSubStmt", 
                   "dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", 
                   "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
                   "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", 
                   "forEachStmt", "forNextStmt", "functionStmt", "getStmt", 
                   "goSubStmt", "goToStmt", "ifThenElseStmt", "ifBlockStmt", 
                   "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
                   "implementsStmt", "inputStmt", "killStmt", "letStmt", 
                   "lineInputStmt", "loadStmt", "lockStmt", "lsetStmt", 
                   "macroConstStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
                   "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", 
                   "chrStmt", "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", 
                   "onGoSubStmt", "openStmt", "outputList", "outputList_Expression", 
                   "printStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
                   "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
                   "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
                   "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
                   "seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", 
                   "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
                   "stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", 
                   "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt", 
                   "variableStmt", "variableListStmt", "variableSubStmt", 
                   "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
                   "fileNumber", "explicitCallStmt", "eCS_ProcedureCall", 
                   "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
                   "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt", 
                   "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
                   "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", 
                   "argsCall", "argCall", "dictionaryCallStmt", "argList", 
                   "arg", "argDefaultValue", "subscripts", "subscript", 
                   "ambiguousIdentifier", "asTypeClause", "baseType", "certainIdentifier", 
                   "comparisonOperator", "complexType", "fieldLength", "letterrange", 
                   "lineLabel", "literal", "vbatype", "typeHint", "visibility", 
                   "ambiguousKeyword", "remComment", "comment", "endOfLine", 
                   "endOfStatement" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    ACCESS=9
    ADDRESSOF=10
    ALIAS=11
    AND=12
    ATTRIBUTE=13
    APPACTIVATE=14
    APPEND=15
    AS=16
    BEGIN=17
    BEEP=18
    BINARY=19
    BOOLEAN=20
    BYVAL=21
    BYREF=22
    BYTE=23
    CALL=24
    CASE=25
    CHDIR=26
    CHDRIVE=27
    CLASS=28
    CLOSE=29
    COLLECTION=30
    CONST=31
    DATABASE=32
    DATE=33
    DECLARE=34
    DEFBOOL=35
    DEFBYTE=36
    DEFDATE=37
    DEFDBL=38
    DEFDEC=39
    DEFCUR=40
    DEFINT=41
    DEFLNG=42
    DEFOBJ=43
    DEFSNG=44
    DEFSTR=45
    DEFVAR=46
    DELETESETTING=47
    DIM=48
    DO=49
    DOUBLE=50
    EACH=51
    ELSE=52
    ELSEIF=53
    END_ENUM=54
    END_FUNCTION=55
    END_IF=56
    END_PROPERTY=57
    END_SELECT=58
    END_SUB=59
    END_TYPE=60
    END_WITH=61
    END=62
    ENUM=63
    EQV=64
    ERASE=65
    ERROR=66
    EVENT=67
    EXIT_DO=68
    EXIT_FOR=69
    EXIT_FUNCTION=70
    EXIT_PROPERTY=71
    EXIT_SUB=72
    FALSE=73
    FILECOPY=74
    FRIEND=75
    FOR=76
    FUNCTION=77
    GET=78
    GLOBAL=79
    GOSUB=80
    GOTO=81
    IF=82
    IMP=83
    IMPLEMENTS=84
    IN=85
    INPUT=86
    IS=87
    INTEGER=88
    KILL=89
    LOAD=90
    LOCK=91
    LONG=92
    LOOP=93
    LEN=94
    LET=95
    LIB=96
    LIKE=97
    LINE_INPUT=98
    LOCK_READ=99
    LOCK_WRITE=100
    LOCK_READ_WRITE=101
    LSET=102
    MACRO_CONST=103
    MACRO_IF=104
    MACRO_ELSEIF=105
    MACRO_ELSE=106
    MACRO_END_IF=107
    ME=108
    MID=109
    MKDIR=110
    MOD=111
    NAME=112
    NEXT=113
    NEW=114
    NOT=115
    NOTHING=116
    NULL=117
    ON=118
    ON_ERROR=119
    ON_LOCAL_ERROR=120
    OPEN=121
    OPTIONAL=122
    OPTION_BASE=123
    OPTION_EXPLICIT=124
    OPTION_COMPARE=125
    OPTION_PRIVATE_MODULE=126
    OR=127
    OUTPUT=128
    PARAMARRAY=129
    PRESERVE=130
    PRINT=131
    PRIVATE=132
    PROPERTY_GET=133
    PROPERTY_LET=134
    PROPERTY_SET=135
    PTRSAFE=136
    PUBLIC=137
    PUT=138
    RANDOM=139
    RANDOMIZE=140
    RAISEEVENT=141
    READ=142
    READ_WRITE=143
    REDIM=144
    REM=145
    RESET=146
    RESUME=147
    RETURN=148
    RMDIR=149
    RSET=150
    SAVEPICTURE=151
    SAVESETTING=152
    SEEK=153
    SELECT=154
    SENDKEYS=155
    SET=156
    CHR=157
    SETATTR=158
    SHARED=159
    SINGLE=160
    SPC=161
    STATIC=162
    STEP=163
    STOP=164
    STRING=165
    SUB=166
    TAB=167
    TEXT=168
    THEN=169
    TIME=170
    TO=171
    TRUE=172
    TYPE=173
    TYPEOF=174
    UNLOAD=175
    UNLOCK=176
    UNTIL=177
    VARIANT=178
    VERSION=179
    WEND=180
    WHILE=181
    WIDTH=182
    WITH=183
    WITHEVENTS=184
    WRITE=185
    XOR=186
    AMPERSAND=187
    ASSIGN=188
    DIV=189
    EQ=190
    GEQ=191
    GT=192
    LEQ=193
    LPAREN=194
    LT=195
    MINUS=196
    MINUS_EQ=197
    MULT=198
    NEQ=199
    PLUS=200
    PLUS_EQ=201
    POW=202
    RPAREN=203
    L_SQUARE_BRACKET=204
    R_SQUARE_BRACKET=205
    STRINGLITERAL=206
    OCTLITERAL=207
    HEXLITERAL=208
    SHORTLITERAL=209
    INTEGERLITERAL=210
    DOUBLELITERAL=211
    DATELITERAL=212
    LINE_CONTINUATION=213
    NEWLINE=214
    REMCOMMENT=215
    COMMENT=216
    SINGLEQUOTE=217
    COLON=218
    UNDERSCORE=219
    WS=220
    IDENTIFIER=221

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.module()
            self.state = 297
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleHeader(self):
            return self.getTypedRuleContext(vbaParser.ModuleHeaderContext,0)


        def moduleConfig(self):
            return self.getTypedRuleContext(vbaParser.ModuleConfigContext,0)


        def moduleAttributes(self):
            return self.getTypedRuleContext(vbaParser.ModuleAttributesContext,0)


        def moduleDeclarations(self):
            return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(vbaParser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(vbaParser.WS)


            self.state = 305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 302
                    self.endOfLine() 
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.VERSION:
                self.state = 308
                self.moduleHeader()
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 309
                        self.endOfLine() 
                    self.state = 314
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)



            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.BEGIN:
                self.state = 317
                self.moduleConfig()


            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 320
                    self.endOfLine() 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.ATTRIBUTE:
                self.state = 326
                self.moduleAttributes()


            self.state = 332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 329
                    self.endOfLine() 
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 335
                self.moduleDeclarations()


            self.state = 341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 338
                    self.endOfLine() 
                self.state = 343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.FUNCTION - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.MACRO_CONST - 75)) | (1 << (vbaParser.MACRO_IF - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PROPERTY_GET - 75)) | (1 << (vbaParser.PROPERTY_LET - 75)) | (1 << (vbaParser.PROPERTY_SET - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0) or _la==vbaParser.STATIC or _la==vbaParser.SUB:
                self.state = 344
                self.moduleBody()


            self.state = 350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.endOfLine() 
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 353
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_moduleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleHeader" ):
                listener.enterModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleHeader" ):
                listener.exitModuleHeader(self)




    def moduleHeader(self):

        localctx = vbaParser.ModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduleHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(vbaParser.VERSION)
            self.state = 357
            self.match(vbaParser.WS)
            self.state = 358
            self.match(vbaParser.DOUBLELITERAL)
            self.state = 359
            self.match(vbaParser.WS)
            self.state = 360
            self.match(vbaParser.CLASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfig" ):
                listener.enterModuleConfig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfig" ):
                listener.exitModuleConfig(self)




    def moduleConfig(self):

        localctx = vbaParser.ModuleConfigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_moduleConfig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(vbaParser.BEGIN)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (vbaParser.NEWLINE - 214)) | (1 << (vbaParser.REMCOMMENT - 214)) | (1 << (vbaParser.COMMENT - 214)) | (1 << (vbaParser.WS - 214)))) != 0):
                self.state = 363
                self.endOfLine()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 369
                    self.moduleConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 372 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 374
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self):
            return self.getTypedRuleContext(vbaParser.LiteralContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfigElement" ):
                listener.enterModuleConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfigElement" ):
                listener.exitModuleConfigElement(self)




    def moduleConfigElement(self):

        localctx = vbaParser.ModuleConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.ambiguousIdentifier()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 377
                self.match(vbaParser.WS)


            self.state = 380
            self.match(vbaParser.EQ)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 381
                self.match(vbaParser.WS)


            self.state = 384
            self.literal()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (vbaParser.NEWLINE - 214)) | (1 << (vbaParser.REMCOMMENT - 214)) | (1 << (vbaParser.COMMENT - 214)) | (1 << (vbaParser.WS - 214)))) != 0):
                self.state = 385
                self.endOfLine()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleAttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AttributeStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.AttributeStmtContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleAttributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAttributes" ):
                listener.enterModuleAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAttributes" ):
                listener.exitModuleAttributes(self)




    def moduleAttributes(self):

        localctx = vbaParser.ModuleAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleAttributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 391
                self.attributeStmt()
                self.state = 393 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 392
                        self.endOfLine()

                    else:
                        raise NoViableAltException(self)
                    self.state = 395 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                self.state = 399 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==vbaParser.ATTRIBUTE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclarationsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarations" ):
                listener.enterModuleDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarations" ):
                listener.exitModuleDeclarations(self)




    def moduleDeclarations(self):

        localctx = vbaParser.ModuleDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.moduleDeclarationsElement()
            self.state = 411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 403 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 402
                            self.endOfLine()

                        else:
                            raise NoViableAltException(self)
                        self.state = 405 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 407
                    self.moduleDeclarationsElement() 
                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 414
                    self.endOfLine() 
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_moduleOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OptionExplicitStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_EXPLICIT(self):
            return self.getToken(vbaParser.OPTION_EXPLICIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitStmt" ):
                listener.enterOptionExplicitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitStmt" ):
                listener.exitOptionExplicitStmt(self)


    class OptionBaseStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_BASE(self):
            return self.getToken(vbaParser.OPTION_BASE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseStmt" ):
                listener.enterOptionBaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseStmt" ):
                listener.exitOptionBaseStmt(self)


    class OptionPrivateModuleStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_PRIVATE_MODULE(self):
            return self.getToken(vbaParser.OPTION_PRIVATE_MODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateModuleStmt" ):
                listener.enterOptionPrivateModuleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateModuleStmt" ):
                listener.exitOptionPrivateModuleStmt(self)


    class OptionCompareStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPARE(self):
            return self.getToken(vbaParser.OPTION_COMPARE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)
        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)
        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareStmt" ):
                listener.enterOptionCompareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareStmt" ):
                listener.exitOptionCompareStmt(self)



    def moduleOption(self):

        localctx = vbaParser.ModuleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleOption)
        self._la = 0 # Token type
        try:
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.OPTION_BASE]:
                localctx = vbaParser.OptionBaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.match(vbaParser.OPTION_BASE)
                self.state = 421
                self.match(vbaParser.WS)
                self.state = 422
                self.match(vbaParser.SHORTLITERAL)
                pass
            elif token in [vbaParser.OPTION_COMPARE]:
                localctx = vbaParser.OptionCompareStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.match(vbaParser.OPTION_COMPARE)
                self.state = 424
                self.match(vbaParser.WS)
                self.state = 425
                _la = self._input.LA(1)
                if not(_la==vbaParser.BINARY or _la==vbaParser.DATABASE or _la==vbaParser.TEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [vbaParser.OPTION_EXPLICIT]:
                localctx = vbaParser.OptionExplicitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.match(vbaParser.OPTION_EXPLICIT)
                pass
            elif token in [vbaParser.OPTION_PRIVATE_MODULE]:
                localctx = vbaParser.OptionPrivateModuleStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 427
                self.match(vbaParser.OPTION_PRIVATE_MODULE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationsElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def declareStmt(self):
            return self.getTypedRuleContext(vbaParser.DeclareStmtContext,0)


        def enumerationStmt(self):
            return self.getTypedRuleContext(vbaParser.EnumerationStmtContext,0)


        def eventStmt(self):
            return self.getTypedRuleContext(vbaParser.EventStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def moduleOption(self):
            return self.getTypedRuleContext(vbaParser.ModuleOptionContext,0)


        def typeStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarationsElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarationsElement" ):
                listener.enterModuleDeclarationsElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarationsElement" ):
                listener.exitModuleDeclarationsElement(self)




    def moduleDeclarationsElement(self):

        localctx = vbaParser.ModuleDeclarationsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleDeclarationsElement)
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self.comment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.declareStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.enumerationStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                self.eventStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 434
                self.constStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 435
                self.implementsStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 436
                self.variableStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 437
                self.moduleOption()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 438
                self.typeStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 439
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroConstStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroConstStmtContext,0)


        def macroIfThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfThenElseStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroStmt" ):
                listener.enterMacroStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroStmt" ):
                listener.exitMacroStmt(self)




    def macroStmt(self):

        localctx = vbaParser.MacroStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_macroStmt)
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.MACRO_CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 442
                self.macroConstStmt()
                pass
            elif token in [vbaParser.MACRO_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.macroIfThenElseStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = vbaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.moduleBodyElement()
            self.state = 456
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 448 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 447
                        self.endOfLine()
                        self.state = 450 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (vbaParser.NEWLINE - 214)) | (1 << (vbaParser.REMCOMMENT - 214)) | (1 << (vbaParser.COMMENT - 214)) | (1 << (vbaParser.WS - 214)))) != 0)):
                            break

                    self.state = 452
                    self.moduleBodyElement() 
                self.state = 458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.endOfLine() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionStmt(self):
            return self.getTypedRuleContext(vbaParser.FunctionStmtContext,0)


        def propertyGetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetStmtContext,0)


        def propertySetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertySetStmtContext,0)


        def propertyLetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyLetStmtContext,0)


        def subStmt(self):
            return self.getTypedRuleContext(vbaParser.SubStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBodyElement" ):
                listener.enterModuleBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBodyElement" ):
                listener.exitModuleBodyElement(self)




    def moduleBodyElement(self):

        localctx = vbaParser.ModuleBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_moduleBodyElement)
        try:
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.functionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.propertyGetStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.propertySetStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                self.propertyLetStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 469
                self.subStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 470
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_attributeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStmt" ):
                listener.enterAttributeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStmt" ):
                listener.exitAttributeStmt(self)




    def attributeStmt(self):

        localctx = vbaParser.AttributeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(vbaParser.ATTRIBUTE)
            self.state = 474
            self.match(vbaParser.WS)
            self.state = 475
            self.implicitCallStmt_InStmt()
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 476
                self.match(vbaParser.WS)


            self.state = 479
            self.match(vbaParser.EQ)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 480
                self.match(vbaParser.WS)


            self.state = 483
            self.literal()
            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 484
                        self.match(vbaParser.WS)


                    self.state = 487
                    self.match(vbaParser.T__0)
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 488
                        self.match(vbaParser.WS)


                    self.state = 491
                    self.literal() 
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = vbaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.blockStmt()
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 498
                    self.endOfStatement()
                    self.state = 499
                    self.blockStmt() 
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 506
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineLabel(self):
            return self.getTypedRuleContext(vbaParser.LineLabelContext,0)


        def appactivateStmt(self):
            return self.getTypedRuleContext(vbaParser.AppactivateStmtContext,0)


        def attributeStmt(self):
            return self.getTypedRuleContext(vbaParser.AttributeStmtContext,0)


        def beepStmt(self):
            return self.getTypedRuleContext(vbaParser.BeepStmtContext,0)


        def chdirStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdirStmtContext,0)


        def chdriveStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdriveStmtContext,0)


        def closeStmt(self):
            return self.getTypedRuleContext(vbaParser.CloseStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def dateStmt(self):
            return self.getTypedRuleContext(vbaParser.DateStmtContext,0)


        def deleteSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.DeleteSettingStmtContext,0)


        def deftypeStmt(self):
            return self.getTypedRuleContext(vbaParser.DeftypeStmtContext,0)


        def doLoopStmt(self):
            return self.getTypedRuleContext(vbaParser.DoLoopStmtContext,0)


        def endStmt(self):
            return self.getTypedRuleContext(vbaParser.EndStmtContext,0)


        def eraseStmt(self):
            return self.getTypedRuleContext(vbaParser.EraseStmtContext,0)


        def errorStmt(self):
            return self.getTypedRuleContext(vbaParser.ErrorStmtContext,0)


        def exitStmt(self):
            return self.getTypedRuleContext(vbaParser.ExitStmtContext,0)


        def explicitCallStmt(self):
            return self.getTypedRuleContext(vbaParser.ExplicitCallStmtContext,0)


        def filecopyStmt(self):
            return self.getTypedRuleContext(vbaParser.FilecopyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(vbaParser.ForEachStmtContext,0)


        def forNextStmt(self):
            return self.getTypedRuleContext(vbaParser.ForNextStmtContext,0)


        def getStmt(self):
            return self.getTypedRuleContext(vbaParser.GetStmtContext,0)


        def goSubStmt(self):
            return self.getTypedRuleContext(vbaParser.GoSubStmtContext,0)


        def goToStmt(self):
            return self.getTypedRuleContext(vbaParser.GoToStmtContext,0)


        def ifThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.IfThenElseStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(vbaParser.InputStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(vbaParser.KillStmtContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(vbaParser.LetStmtContext,0)


        def lineInputStmt(self):
            return self.getTypedRuleContext(vbaParser.LineInputStmtContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(vbaParser.LoadStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(vbaParser.LockStmtContext,0)


        def lsetStmt(self):
            return self.getTypedRuleContext(vbaParser.LsetStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def mkdirStmt(self):
            return self.getTypedRuleContext(vbaParser.MkdirStmtContext,0)


        def nameStmt(self):
            return self.getTypedRuleContext(vbaParser.NameStmtContext,0)


        def onErrorStmt(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStmtContext,0)


        def onGoToStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoToStmtContext,0)


        def onGoSubStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoSubStmtContext,0)


        def openStmt(self):
            return self.getTypedRuleContext(vbaParser.OpenStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(vbaParser.PrintStmtContext,0)


        def putStmt(self):
            return self.getTypedRuleContext(vbaParser.PutStmtContext,0)


        def raiseEventStmt(self):
            return self.getTypedRuleContext(vbaParser.RaiseEventStmtContext,0)


        def randomizeStmt(self):
            return self.getTypedRuleContext(vbaParser.RandomizeStmtContext,0)


        def redimStmt(self):
            return self.getTypedRuleContext(vbaParser.RedimStmtContext,0)


        def resetStmt(self):
            return self.getTypedRuleContext(vbaParser.ResetStmtContext,0)


        def resumeStmt(self):
            return self.getTypedRuleContext(vbaParser.ResumeStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(vbaParser.ReturnStmtContext,0)


        def rmdirStmt(self):
            return self.getTypedRuleContext(vbaParser.RmdirStmtContext,0)


        def rsetStmt(self):
            return self.getTypedRuleContext(vbaParser.RsetStmtContext,0)


        def savepictureStmt(self):
            return self.getTypedRuleContext(vbaParser.SavepictureStmtContext,0)


        def saveSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.SaveSettingStmtContext,0)


        def seekStmt(self):
            return self.getTypedRuleContext(vbaParser.SeekStmtContext,0)


        def selectCaseStmt(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStmtContext,0)


        def sendkeysStmt(self):
            return self.getTypedRuleContext(vbaParser.SendkeysStmtContext,0)


        def setattrStmt(self):
            return self.getTypedRuleContext(vbaParser.SetattrStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(vbaParser.SetStmtContext,0)


        def stopStmt(self):
            return self.getTypedRuleContext(vbaParser.StopStmtContext,0)


        def timeStmt(self):
            return self.getTypedRuleContext(vbaParser.TimeStmtContext,0)


        def unloadStmt(self):
            return self.getTypedRuleContext(vbaParser.UnloadStmtContext,0)


        def unlockStmt(self):
            return self.getTypedRuleContext(vbaParser.UnlockStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def whileWendStmt(self):
            return self.getTypedRuleContext(vbaParser.WhileWendStmtContext,0)


        def widthStmt(self):
            return self.getTypedRuleContext(vbaParser.WidthStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(vbaParser.WithStmtContext,0)


        def writeStmt(self):
            return self.getTypedRuleContext(vbaParser.WriteStmtContext,0)


        def implicitCallStmt_InBlock(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = vbaParser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_blockStmt)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.lineLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.appactivateStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.attributeStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 511
                self.beepStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.chdirStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.chdriveStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 514
                self.closeStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 515
                self.constStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 516
                self.dateStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 517
                self.deleteSettingStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 518
                self.deftypeStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 519
                self.doLoopStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 520
                self.endStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 521
                self.eraseStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 522
                self.errorStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 523
                self.exitStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 524
                self.explicitCallStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 525
                self.filecopyStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 526
                self.forEachStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 527
                self.forNextStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 528
                self.getStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 529
                self.goSubStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 530
                self.goToStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 531
                self.ifThenElseStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 532
                self.implementsStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 533
                self.inputStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 534
                self.killStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 535
                self.letStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 536
                self.lineInputStmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 537
                self.loadStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 538
                self.lockStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 539
                self.lsetStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 540
                self.macroStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 541
                self.midStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 542
                self.mkdirStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 543
                self.nameStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 544
                self.onErrorStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 545
                self.onGoToStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 546
                self.onGoSubStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 547
                self.openStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 548
                self.printStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 549
                self.putStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 550
                self.raiseEventStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 551
                self.randomizeStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 552
                self.redimStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 553
                self.resetStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 554
                self.resumeStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 555
                self.returnStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 556
                self.rmdirStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 557
                self.rsetStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 558
                self.savepictureStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 559
                self.saveSettingStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 560
                self.seekStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 561
                self.selectCaseStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 562
                self.sendkeysStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 563
                self.setattrStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 564
                self.setStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 565
                self.stopStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 566
                self.timeStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 567
                self.unloadStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 568
                self.unlockStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 569
                self.variableStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 570
                self.whileWendStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 571
                self.widthStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 572
                self.withStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 573
                self.writeStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 574
                self.implicitCallStmt_InBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppactivateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_appactivateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppactivateStmt" ):
                listener.enterAppactivateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppactivateStmt" ):
                listener.exitAppactivateStmt(self)




    def appactivateStmt(self):

        localctx = vbaParser.AppactivateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_appactivateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(vbaParser.APPACTIVATE)
            self.state = 578
            self.match(vbaParser.WS)
            self.state = 579
            self.valueStmt(0)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 580
                    self.match(vbaParser.WS)


                self.state = 583
                self.match(vbaParser.T__0)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 584
                    self.match(vbaParser.WS)


                self.state = 587
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeepStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_beepStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeepStmt" ):
                listener.enterBeepStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeepStmt" ):
                listener.exitBeepStmt(self)




    def beepStmt(self):

        localctx = vbaParser.BeepStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_beepStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(vbaParser.BEEP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdirStmt" ):
                listener.enterChdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdirStmt" ):
                listener.exitChdirStmt(self)




    def chdirStmt(self):

        localctx = vbaParser.ChdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_chdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(vbaParser.CHDIR)
            self.state = 593
            self.match(vbaParser.WS)
            self.state = 594
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChdriveStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdriveStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdriveStmt" ):
                listener.enterChdriveStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdriveStmt" ):
                listener.exitChdriveStmt(self)




    def chdriveStmt(self):

        localctx = vbaParser.ChdriveStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_chdriveStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(vbaParser.CHDRIVE)
            self.state = 597
            self.match(vbaParser.WS)
            self.state = 598
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStmt" ):
                listener.enterCloseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStmt" ):
                listener.exitCloseStmt(self)




    def closeStmt(self):

        localctx = vbaParser.CloseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_closeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(vbaParser.CLOSE)
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 601
                self.match(vbaParser.WS)
                self.state = 602
                self.fileNumber()
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 603
                            self.match(vbaParser.WS)


                        self.state = 606
                        self.match(vbaParser.T__0)
                        self.state = 608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 607
                            self.match(vbaParser.WS)


                        self.state = 610
                        self.fileNumber() 
                    self.state = 615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def constSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstSubStmtContext,i)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStmt" ):
                listener.enterConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStmt" ):
                listener.exitConstStmt(self)




    def constStmt(self):

        localctx = vbaParser.ConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 618
                self.visibility()
                self.state = 619
                self.match(vbaParser.WS)


            self.state = 623
            self.match(vbaParser.CONST)
            self.state = 624
            self.match(vbaParser.WS)
            self.state = 625
            self.constSubStmt()
            self.state = 636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 626
                        self.match(vbaParser.WS)


                    self.state = 629
                    self.match(vbaParser.T__0)
                    self.state = 631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 630
                        self.match(vbaParser.WS)


                    self.state = 633
                    self.constSubStmt() 
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSubStmt" ):
                listener.enterConstSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSubStmt" ):
                listener.exitConstSubStmt(self)




    def constSubStmt(self):

        localctx = vbaParser.ConstSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.ambiguousIdentifier()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 640
                self.typeHint()


            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 643
                self.match(vbaParser.WS)
                self.state = 644
                self.asTypeClause()


            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 647
                self.match(vbaParser.WS)


            self.state = 650
            self.match(vbaParser.EQ)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 651
                self.match(vbaParser.WS)


            self.state = 654
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_dateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateStmt" ):
                listener.enterDateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateStmt" ):
                listener.exitDateStmt(self)




    def dateStmt(self):

        localctx = vbaParser.DateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(vbaParser.DATE)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 657
                self.match(vbaParser.WS)


            self.state = 660
            self.match(vbaParser.EQ)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 661
                self.match(vbaParser.WS)


            self.state = 664
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.STRINGLITERAL)
            else:
                return self.getToken(vbaParser.STRINGLITERAL, i)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeHintContext,i)


        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_declareStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStmt" ):
                listener.enterDeclareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStmt" ):
                listener.exitDeclareStmt(self)




    def declareStmt(self):

        localctx = vbaParser.DeclareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declareStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 666
                self.visibility()
                self.state = 667
                self.match(vbaParser.WS)


            self.state = 671
            self.match(vbaParser.DECLARE)
            self.state = 672
            self.match(vbaParser.WS)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.PTRSAFE:
                self.state = 673
                self.match(vbaParser.PTRSAFE)
                self.state = 674
                self.match(vbaParser.WS)


            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.FUNCTION]:
                self.state = 677
                self.match(vbaParser.FUNCTION)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                    self.state = 678
                    self.typeHint()


                pass
            elif token in [vbaParser.SUB]:
                self.state = 681
                self.match(vbaParser.SUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 684
            self.match(vbaParser.WS)
            self.state = 685
            self.ambiguousIdentifier()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 686
                self.typeHint()


            self.state = 689
            self.match(vbaParser.WS)
            self.state = 690
            self.match(vbaParser.LIB)
            self.state = 691
            self.match(vbaParser.WS)
            self.state = 692
            self.match(vbaParser.STRINGLITERAL)
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 693
                self.match(vbaParser.WS)
                self.state = 694
                self.match(vbaParser.ALIAS)
                self.state = 695
                self.match(vbaParser.WS)
                self.state = 696
                self.match(vbaParser.STRINGLITERAL)


            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 699
                    self.match(vbaParser.WS)


                self.state = 702
                self.argList()


            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 705
                self.match(vbaParser.WS)
                self.state = 706
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeftypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterrangeContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterrangeContext,i)


        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_deftypeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeftypeStmt" ):
                listener.enterDeftypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeftypeStmt" ):
                listener.exitDeftypeStmt(self)




    def deftypeStmt(self):

        localctx = vbaParser.DeftypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_deftypeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 710
            self.match(vbaParser.WS)
            self.state = 711
            self.letterrange()
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 712
                        self.match(vbaParser.WS)


                    self.state = 715
                    self.match(vbaParser.T__0)
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 716
                        self.match(vbaParser.WS)


                    self.state = 719
                    self.letterrange() 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_deleteSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteSettingStmt" ):
                listener.enterDeleteSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteSettingStmt" ):
                listener.exitDeleteSettingStmt(self)




    def deleteSettingStmt(self):

        localctx = vbaParser.DeleteSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_deleteSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(vbaParser.DELETESETTING)
            self.state = 726
            self.match(vbaParser.WS)
            self.state = 727
            self.valueStmt(0)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 728
                self.match(vbaParser.WS)


            self.state = 731
            self.match(vbaParser.T__0)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 732
                self.match(vbaParser.WS)


            self.state = 735
            self.valueStmt(0)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 736
                    self.match(vbaParser.WS)


                self.state = 739
                self.match(vbaParser.T__0)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 740
                    self.match(vbaParser.WS)


                self.state = 743
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoLoopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_doLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoopStmt" ):
                listener.enterDoLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoopStmt" ):
                listener.exitDoLoopStmt(self)




    def doLoopStmt(self):

        localctx = vbaParser.DoLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_doLoopStmt)
        self._la = 0 # Token type
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.match(vbaParser.DO)
                self.state = 747
                self.endOfStatement()
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 748
                    self.block()


                self.state = 751
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.match(vbaParser.DO)
                self.state = 754
                self.match(vbaParser.WS)
                self.state = 755
                _la = self._input.LA(1)
                if not(_la==vbaParser.UNTIL or _la==vbaParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 756
                self.match(vbaParser.WS)
                self.state = 757
                self.valueStmt(0)
                self.state = 758
                self.endOfStatement()
                self.state = 760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 759
                    self.block()


                self.state = 762
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 764
                self.match(vbaParser.DO)
                self.state = 765
                self.endOfStatement()
                self.state = 766
                self.block()
                self.state = 767
                self.match(vbaParser.LOOP)
                self.state = 768
                self.match(vbaParser.WS)
                self.state = 769
                _la = self._input.LA(1)
                if not(_la==vbaParser.UNTIL or _la==vbaParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 770
                self.match(vbaParser.WS)
                self.state = 771
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStmt" ):
                listener.enterEndStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStmt" ):
                listener.exitEndStmt(self)




    def endStmt(self):

        localctx = vbaParser.EndStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_endStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_ENUM(self):
            return self.getToken(vbaParser.END_ENUM, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def enumerationStmt_Constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumerationStmt_ConstantContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumerationStmt_ConstantContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt" ):
                listener.enterEnumerationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt" ):
                listener.exitEnumerationStmt(self)




    def enumerationStmt(self):

        localctx = vbaParser.EnumerationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enumerationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 777
                self.visibility()
                self.state = 778
                self.match(vbaParser.WS)


            self.state = 782
            self.match(vbaParser.ENUM)
            self.state = 783
            self.match(vbaParser.WS)
            self.state = 784
            self.ambiguousIdentifier()
            self.state = 785
            self.endOfStatement()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 786
                self.enumerationStmt_Constant()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.match(vbaParser.END_ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationStmt_ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt_Constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt_Constant" ):
                listener.enterEnumerationStmt_Constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt_Constant" ):
                listener.exitEnumerationStmt_Constant(self)




    def enumerationStmt_Constant(self):

        localctx = vbaParser.EnumerationStmt_ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumerationStmt_Constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.ambiguousIdentifier()
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 795
                    self.match(vbaParser.WS)


                self.state = 798
                self.match(vbaParser.EQ)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 799
                    self.match(vbaParser.WS)


                self.state = 802
                self.valueStmt(0)


            self.state = 805
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EraseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStmt" ):
                listener.enterEraseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStmt" ):
                listener.exitEraseStmt(self)




    def eraseStmt(self):

        localctx = vbaParser.EraseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eraseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(vbaParser.ERASE)
            self.state = 808
            self.match(vbaParser.WS)
            self.state = 809
            self.valueStmt(0)
            self.state = 817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 810
                    self.match(vbaParser.T__0)
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 811
                        self.match(vbaParser.WS)


                    self.state = 814
                    self.valueStmt(0) 
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)




    def errorStmt(self):

        localctx = vbaParser.ErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_errorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(vbaParser.ERROR)
            self.state = 821
            self.match(vbaParser.WS)
            self.state = 822
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventStmt" ):
                listener.enterEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventStmt" ):
                listener.exitEventStmt(self)




    def eventStmt(self):

        localctx = vbaParser.EventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_eventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 824
                self.visibility()
                self.state = 825
                self.match(vbaParser.WS)


            self.state = 829
            self.match(vbaParser.EVENT)
            self.state = 830
            self.match(vbaParser.WS)
            self.state = 831
            self.ambiguousIdentifier()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 832
                self.match(vbaParser.WS)


            self.state = 835
            self.argList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT_DO(self):
            return self.getToken(vbaParser.EXIT_DO, 0)

        def EXIT_FOR(self):
            return self.getToken(vbaParser.EXIT_FOR, 0)

        def EXIT_FUNCTION(self):
            return self.getToken(vbaParser.EXIT_FUNCTION, 0)

        def EXIT_PROPERTY(self):
            return self.getToken(vbaParser.EXIT_PROPERTY, 0)

        def EXIT_SUB(self):
            return self.getToken(vbaParser.EXIT_SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)




    def exitStmt(self):

        localctx = vbaParser.ExitStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exitStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (vbaParser.EXIT_DO - 68)) | (1 << (vbaParser.EXIT_FOR - 68)) | (1 << (vbaParser.EXIT_FUNCTION - 68)) | (1 << (vbaParser.EXIT_PROPERTY - 68)) | (1 << (vbaParser.EXIT_SUB - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilecopyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_filecopyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilecopyStmt" ):
                listener.enterFilecopyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilecopyStmt" ):
                listener.exitFilecopyStmt(self)




    def filecopyStmt(self):

        localctx = vbaParser.FilecopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_filecopyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(vbaParser.FILECOPY)
            self.state = 840
            self.match(vbaParser.WS)
            self.state = 841
            self.valueStmt(0)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 842
                self.match(vbaParser.WS)


            self.state = 845
            self.match(vbaParser.T__0)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 846
                self.match(vbaParser.WS)


            self.state = 849
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = vbaParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(vbaParser.FOR)
            self.state = 852
            self.match(vbaParser.WS)
            self.state = 853
            self.match(vbaParser.EACH)
            self.state = 854
            self.match(vbaParser.WS)
            self.state = 855
            self.ambiguousIdentifier()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 856
                self.typeHint()


            self.state = 859
            self.match(vbaParser.WS)
            self.state = 860
            self.match(vbaParser.IN)
            self.state = 861
            self.match(vbaParser.WS)
            self.state = 862
            self.valueStmt(0)
            self.state = 863
            self.endOfStatement()
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 864
                self.block()


            self.state = 867
            self.match(vbaParser.NEXT)
            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 868
                self.match(vbaParser.WS)
                self.state = 869
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForNextStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forNextStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForNextStmt" ):
                listener.enterForNextStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForNextStmt" ):
                listener.exitForNextStmt(self)




    def forNextStmt(self):

        localctx = vbaParser.ForNextStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_forNextStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(vbaParser.FOR)
            self.state = 873
            self.match(vbaParser.WS)
            self.state = 874
            self.ambiguousIdentifier()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 875
                self.typeHint()


            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 878
                self.match(vbaParser.WS)
                self.state = 879
                self.asTypeClause()


            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 882
                self.match(vbaParser.WS)


            self.state = 885
            self.match(vbaParser.EQ)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 886
                self.match(vbaParser.WS)


            self.state = 889
            self.valueStmt(0)
            self.state = 890
            self.match(vbaParser.WS)
            self.state = 891
            self.match(vbaParser.TO)
            self.state = 892
            self.match(vbaParser.WS)
            self.state = 893
            self.valueStmt(0)
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 894
                self.match(vbaParser.WS)
                self.state = 895
                self.match(vbaParser.STEP)
                self.state = 896
                self.match(vbaParser.WS)
                self.state = 897
                self.valueStmt(0)


            self.state = 900
            self.endOfStatement()
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 901
                self.block()


            self.state = 904
            self.match(vbaParser.NEXT)
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 905
                self.match(vbaParser.WS)
                self.state = 906
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_FUNCTION(self):
            return self.getToken(vbaParser.END_FUNCTION, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStmt" ):
                listener.enterFunctionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStmt" ):
                listener.exitFunctionStmt(self)




    def functionStmt(self):

        localctx = vbaParser.FunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 909
                self.visibility()
                self.state = 910
                self.match(vbaParser.WS)


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 914
                self.match(vbaParser.STATIC)
                self.state = 915
                self.match(vbaParser.WS)


            self.state = 918
            self.match(vbaParser.FUNCTION)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 919
                self.match(vbaParser.WS)


            self.state = 922
            self.ambiguousIdentifier()
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 923
                self.typeHint()


            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 926
                    self.match(vbaParser.WS)


                self.state = 929
                self.argList()


            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 932
                    self.match(vbaParser.WS)


                self.state = 935
                self.asTypeClause()


            self.state = 938
            self.endOfStatement()
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 939
                self.block()


            self.state = 942
            self.match(vbaParser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_getStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStmt" ):
                listener.enterGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStmt" ):
                listener.exitGetStmt(self)




    def getStmt(self):

        localctx = vbaParser.GetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_getStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(vbaParser.GET)
            self.state = 945
            self.match(vbaParser.WS)
            self.state = 946
            self.fileNumber()
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 947
                self.match(vbaParser.WS)


            self.state = 950
            self.match(vbaParser.T__0)
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 951
                self.match(vbaParser.WS)


            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (vbaParser.LPAREN - 194)) | (1 << (vbaParser.MINUS - 194)) | (1 << (vbaParser.PLUS - 194)) | (1 << (vbaParser.STRINGLITERAL - 194)) | (1 << (vbaParser.OCTLITERAL - 194)) | (1 << (vbaParser.HEXLITERAL - 194)) | (1 << (vbaParser.SHORTLITERAL - 194)) | (1 << (vbaParser.INTEGERLITERAL - 194)) | (1 << (vbaParser.DOUBLELITERAL - 194)) | (1 << (vbaParser.DATELITERAL - 194)) | (1 << (vbaParser.IDENTIFIER - 194)))) != 0):
                self.state = 954
                self.valueStmt(0)


            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 957
                self.match(vbaParser.WS)


            self.state = 960
            self.match(vbaParser.T__0)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 961
                self.match(vbaParser.WS)


            self.state = 964
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoSubStmt" ):
                listener.enterGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoSubStmt" ):
                listener.exitGoSubStmt(self)




    def goSubStmt(self):

        localctx = vbaParser.GoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_goSubStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(vbaParser.GOSUB)
            self.state = 967
            self.match(vbaParser.WS)
            self.state = 968
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStmt" ):
                listener.enterGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStmt" ):
                listener.exitGoToStmt(self)




    def goToStmt(self):

        localctx = vbaParser.GoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_goToStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(vbaParser.GOTO)
            self.state = 971
            self.match(vbaParser.WS)
            self.state = 972
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_ifThenElseStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfBlockStmtContext,0)

        def END_IF(self):
            return self.getToken(vbaParser.END_IF, 0)
        def ifElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.IfElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.IfElseIfBlockStmtContext,i)

        def ifElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfElseBlockStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockIfThenElse" ):
                listener.enterBlockIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockIfThenElse" ):
                listener.exitBlockIfThenElse(self)


    class InlineIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)
        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIfThenElse" ):
                listener.enterInlineIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIfThenElse" ):
                listener.exitInlineIfThenElse(self)



    def ifThenElseStmt(self):

        localctx = vbaParser.IfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifThenElseStmt)
        self._la = 0 # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                localctx = vbaParser.InlineIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.match(vbaParser.IF)
                self.state = 975
                self.match(vbaParser.WS)
                self.state = 976
                self.ifConditionStmt()
                self.state = 977
                self.match(vbaParser.WS)
                self.state = 978
                self.match(vbaParser.THEN)
                self.state = 979
                self.match(vbaParser.WS)
                self.state = 980
                self.blockStmt()
                self.state = 985
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.match(vbaParser.WS)
                    self.state = 982
                    self.match(vbaParser.ELSE)
                    self.state = 983
                    self.match(vbaParser.WS)
                    self.state = 984
                    self.blockStmt()


                pass

            elif la_ == 2:
                localctx = vbaParser.BlockIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.ifBlockStmt()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==vbaParser.ELSEIF:
                    self.state = 988
                    self.ifElseIfBlockStmt()
                    self.state = 993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.ELSE:
                    self.state = 994
                    self.ifElseBlockStmt()


                self.state = 997
                self.match(vbaParser.END_IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStmt" ):
                listener.enterIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStmt" ):
                listener.exitIfBlockStmt(self)




    def ifBlockStmt(self):

        localctx = vbaParser.IfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ifBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(vbaParser.IF)
            self.state = 1002
            self.match(vbaParser.WS)
            self.state = 1003
            self.ifConditionStmt()
            self.state = 1004
            self.match(vbaParser.WS)
            self.state = 1005
            self.match(vbaParser.THEN)
            self.state = 1006
            self.endOfStatement()
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfConditionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifConditionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfConditionStmt" ):
                listener.enterIfConditionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfConditionStmt" ):
                listener.exitIfConditionStmt(self)




    def ifConditionStmt(self):

        localctx = vbaParser.IfConditionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifConditionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseIfBlockStmt" ):
                listener.enterIfElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseIfBlockStmt" ):
                listener.exitIfElseIfBlockStmt(self)




    def ifElseIfBlockStmt(self):

        localctx = vbaParser.IfElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifElseIfBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(vbaParser.ELSEIF)
            self.state = 1013
            self.match(vbaParser.WS)
            self.state = 1014
            self.ifConditionStmt()
            self.state = 1015
            self.match(vbaParser.WS)
            self.state = 1016
            self.match(vbaParser.THEN)
            self.state = 1017
            self.endOfStatement()
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1018
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseBlockStmt" ):
                listener.enterIfElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseBlockStmt" ):
                listener.exitIfElseBlockStmt(self)




    def ifElseBlockStmt(self):

        localctx = vbaParser.IfElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(vbaParser.ELSE)
            self.state = 1022
            self.endOfStatement()
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1023
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsStmt" ):
                listener.enterImplementsStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsStmt" ):
                listener.exitImplementsStmt(self)




    def implementsStmt(self):

        localctx = vbaParser.ImplementsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_implementsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1027
            self.match(vbaParser.WS)
            self.state = 1028
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)




    def inputStmt(self):

        localctx = vbaParser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_inputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(vbaParser.INPUT)
            self.state = 1031
            self.match(vbaParser.WS)
            self.state = 1032
            self.fileNumber()
            self.state = 1041 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1033
                        self.match(vbaParser.WS)


                    self.state = 1036
                    self.match(vbaParser.T__0)
                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1037
                        self.match(vbaParser.WS)


                    self.state = 1040
                    self.valueStmt(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1043 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_killStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStmt" ):
                listener.enterKillStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStmt" ):
                listener.exitKillStmt(self)




    def killStmt(self):

        localctx = vbaParser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_killStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(vbaParser.KILL)
            self.state = 1046
            self.match(vbaParser.WS)
            self.state = 1047
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def PLUS_EQ(self):
            return self.getToken(vbaParser.PLUS_EQ, 0)

        def MINUS_EQ(self):
            return self.getToken(vbaParser.MINUS_EQ, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = vbaParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.match(vbaParser.LET)
                self.state = 1050
                self.match(vbaParser.WS)


            self.state = 1053
            self.implicitCallStmt_InStmt()
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1054
                self.match(vbaParser.WS)


            self.state = 1057
            _la = self._input.LA(1)
            if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (vbaParser.EQ - 190)) | (1 << (vbaParser.MINUS_EQ - 190)) | (1 << (vbaParser.PLUS_EQ - 190)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1058
                self.match(vbaParser.WS)


            self.state = 1061
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_INPUT(self):
            return self.getToken(vbaParser.LINE_INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStmt" ):
                listener.enterLineInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStmt" ):
                listener.exitLineInputStmt(self)




    def lineInputStmt(self):

        localctx = vbaParser.LineInputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lineInputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(vbaParser.LINE_INPUT)
            self.state = 1064
            self.match(vbaParser.WS)
            self.state = 1065
            self.fileNumber()
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1066
                self.match(vbaParser.WS)


            self.state = 1069
            self.match(vbaParser.T__0)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1070
                self.match(vbaParser.WS)


            self.state = 1073
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_loadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStmt" ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStmt" ):
                listener.exitLoadStmt(self)




    def loadStmt(self):

        localctx = vbaParser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(vbaParser.LOAD)
            self.state = 1076
            self.match(vbaParser.WS)
            self.state = 1077
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStmt" ):
                listener.enterLockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStmt" ):
                listener.exitLockStmt(self)




    def lockStmt(self):

        localctx = vbaParser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(vbaParser.LOCK)
            self.state = 1080
            self.match(vbaParser.WS)
            self.state = 1081
            self.valueStmt(0)
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1082
                    self.match(vbaParser.WS)


                self.state = 1085
                self.match(vbaParser.T__0)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1086
                    self.match(vbaParser.WS)


                self.state = 1089
                self.valueStmt(0)
                self.state = 1094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1090
                    self.match(vbaParser.WS)
                    self.state = 1091
                    self.match(vbaParser.TO)
                    self.state = 1092
                    self.match(vbaParser.WS)
                    self.state = 1093
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStmt" ):
                listener.enterLsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStmt" ):
                listener.exitLsetStmt(self)




    def lsetStmt(self):

        localctx = vbaParser.LsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(vbaParser.LSET)
            self.state = 1099
            self.match(vbaParser.WS)
            self.state = 1100
            self.implicitCallStmt_InStmt()
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1101
                self.match(vbaParser.WS)


            self.state = 1104
            self.match(vbaParser.EQ)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1105
                self.match(vbaParser.WS)


            self.state = 1108
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroConstStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_CONST(self):
            return self.getToken(vbaParser.MACRO_CONST, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_macroConstStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroConstStmt" ):
                listener.enterMacroConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroConstStmt" ):
                listener.exitMacroConstStmt(self)




    def macroConstStmt(self):

        localctx = vbaParser.MacroConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_macroConstStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(vbaParser.MACRO_CONST)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1111
                self.match(vbaParser.WS)


            self.state = 1114
            self.ambiguousIdentifier()
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1115
                self.match(vbaParser.WS)


            self.state = 1118
            self.match(vbaParser.EQ)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1119
                self.match(vbaParser.WS)


            self.state = 1122
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroIfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIfBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfBlockStmtContext,0)


        def MACRO_END_IF(self):
            return self.getToken(vbaParser.MACRO_END_IF, 0)

        def macroElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.MacroElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.MacroElseIfBlockStmtContext,i)


        def macroElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroElseBlockStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfThenElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfThenElseStmt" ):
                listener.enterMacroIfThenElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfThenElseStmt" ):
                listener.exitMacroIfThenElseStmt(self)




    def macroIfThenElseStmt(self):

        localctx = vbaParser.MacroIfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroIfThenElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.macroIfBlockStmt()
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==vbaParser.MACRO_ELSEIF:
                self.state = 1125
                self.macroElseIfBlockStmt()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.MACRO_ELSE:
                self.state = 1131
                self.macroElseBlockStmt()


            self.state = 1134
            self.match(vbaParser.MACRO_END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_IF(self):
            return self.getToken(vbaParser.MACRO_IF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfBlockStmt" ):
                listener.enterMacroIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfBlockStmt" ):
                listener.exitMacroIfBlockStmt(self)




    def macroIfBlockStmt(self):

        localctx = vbaParser.MacroIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(vbaParser.MACRO_IF)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1137
                self.match(vbaParser.WS)


            self.state = 1140
            self.ifConditionStmt()
            self.state = 1141
            self.match(vbaParser.WS)
            self.state = 1142
            self.match(vbaParser.THEN)
            self.state = 1143
            self.endOfStatement()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1144
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1145
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1146
                    self.block()
                    pass


                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSEIF(self):
            return self.getToken(vbaParser.MACRO_ELSEIF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseIfBlockStmt" ):
                listener.enterMacroElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseIfBlockStmt" ):
                listener.exitMacroElseIfBlockStmt(self)




    def macroElseIfBlockStmt(self):

        localctx = vbaParser.MacroElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(vbaParser.MACRO_ELSEIF)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1153
                self.match(vbaParser.WS)


            self.state = 1156
            self.ifConditionStmt()
            self.state = 1157
            self.match(vbaParser.WS)
            self.state = 1158
            self.match(vbaParser.THEN)
            self.state = 1159
            self.endOfStatement()
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1160
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1161
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1162
                    self.block()
                    pass


                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSE(self):
            return self.getToken(vbaParser.MACRO_ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseBlockStmt" ):
                listener.enterMacroElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseBlockStmt" ):
                listener.exitMacroElseBlockStmt(self)




    def macroElseBlockStmt(self):

        localctx = vbaParser.MacroElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_macroElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(vbaParser.MACRO_ELSE)
            self.state = 1169
            self.endOfStatement()
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1171
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1172
                    self.block()
                    pass


                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_midStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStmt" ):
                listener.enterMidStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStmt" ):
                listener.exitMidStmt(self)




    def midStmt(self):

        localctx = vbaParser.MidStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_midStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(vbaParser.MID)
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1179
                self.match(vbaParser.WS)


            self.state = 1182
            self.match(vbaParser.LPAREN)
            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1183
                self.match(vbaParser.WS)


            self.state = 1186
            self.argsCall()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1187
                self.match(vbaParser.WS)


            self.state = 1190
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHR(self):
            return self.getToken(vbaParser.CHR, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_chrStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChrStmt" ):
                listener.enterChrStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChrStmt" ):
                listener.exitChrStmt(self)




    def chrStmt(self):

        localctx = vbaParser.ChrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_chrStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(vbaParser.CHR)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1193
                self.match(vbaParser.WS)


            self.state = 1196
            self.match(vbaParser.LPAREN)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1197
                self.match(vbaParser.WS)


            self.state = 1200
            self.valueStmt(0)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1201
                self.match(vbaParser.WS)


            self.state = 1204
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MkdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_mkdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMkdirStmt" ):
                listener.enterMkdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMkdirStmt" ):
                listener.exitMkdirStmt(self)




    def mkdirStmt(self):

        localctx = vbaParser.MkdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_mkdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(vbaParser.MKDIR)
            self.state = 1207
            self.match(vbaParser.WS)
            self.state = 1208
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_nameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameStmt" ):
                listener.enterNameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameStmt" ):
                listener.exitNameStmt(self)




    def nameStmt(self):

        localctx = vbaParser.NameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nameStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(vbaParser.NAME)
            self.state = 1211
            self.match(vbaParser.WS)
            self.state = 1212
            self.valueStmt(0)
            self.state = 1213
            self.match(vbaParser.WS)
            self.state = 1214
            self.match(vbaParser.AS)
            self.state = 1215
            self.match(vbaParser.WS)
            self.state = 1216
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ON_ERROR(self):
            return self.getToken(vbaParser.ON_ERROR, 0)

        def ON_LOCAL_ERROR(self):
            return self.getToken(vbaParser.ON_LOCAL_ERROR, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStmt" ):
                listener.enterOnErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStmt" ):
                listener.exitOnErrorStmt(self)




    def onErrorStmt(self):

        localctx = vbaParser.OnErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_onErrorStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            _la = self._input.LA(1)
            if not(_la==vbaParser.ON_ERROR or _la==vbaParser.ON_LOCAL_ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1219
            self.match(vbaParser.WS)
            self.state = 1226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.GOTO]:
                self.state = 1220
                self.match(vbaParser.GOTO)
                self.state = 1221
                self.match(vbaParser.WS)
                self.state = 1222
                self.valueStmt(0)
                pass
            elif token in [vbaParser.RESUME]:
                self.state = 1223
                self.match(vbaParser.RESUME)
                self.state = 1224
                self.match(vbaParser.WS)
                self.state = 1225
                self.match(vbaParser.NEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoToStmt" ):
                listener.enterOnGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoToStmt" ):
                listener.exitOnGoToStmt(self)




    def onGoToStmt(self):

        localctx = vbaParser.OnGoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_onGoToStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(vbaParser.ON)
            self.state = 1229
            self.match(vbaParser.WS)
            self.state = 1230
            self.valueStmt(0)
            self.state = 1231
            self.match(vbaParser.WS)
            self.state = 1232
            self.match(vbaParser.GOTO)
            self.state = 1233
            self.match(vbaParser.WS)
            self.state = 1234
            self.valueStmt(0)
            self.state = 1245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1235
                        self.match(vbaParser.WS)


                    self.state = 1238
                    self.match(vbaParser.T__0)
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1239
                        self.match(vbaParser.WS)


                    self.state = 1242
                    self.valueStmt(0) 
                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoSubStmt" ):
                listener.enterOnGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoSubStmt" ):
                listener.exitOnGoSubStmt(self)




    def onGoSubStmt(self):

        localctx = vbaParser.OnGoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_onGoSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(vbaParser.ON)
            self.state = 1249
            self.match(vbaParser.WS)
            self.state = 1250
            self.valueStmt(0)
            self.state = 1251
            self.match(vbaParser.WS)
            self.state = 1252
            self.match(vbaParser.GOSUB)
            self.state = 1253
            self.match(vbaParser.WS)
            self.state = 1254
            self.valueStmt(0)
            self.state = 1265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1255
                        self.match(vbaParser.WS)


                    self.state = 1258
                    self.match(vbaParser.T__0)
                    self.state = 1260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1259
                        self.match(vbaParser.WS)


                    self.state = 1262
                    self.valueStmt(0) 
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def READ_WRITE(self):
            return self.getToken(vbaParser.READ_WRITE, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK_READ(self):
            return self.getToken(vbaParser.LOCK_READ, 0)

        def LOCK_WRITE(self):
            return self.getToken(vbaParser.LOCK_WRITE, 0)

        def LOCK_READ_WRITE(self):
            return self.getToken(vbaParser.LOCK_READ_WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_openStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStmt" ):
                listener.enterOpenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStmt" ):
                listener.exitOpenStmt(self)




    def openStmt(self):

        localctx = vbaParser.OpenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_openStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(vbaParser.OPEN)
            self.state = 1269
            self.match(vbaParser.WS)
            self.state = 1270
            self.valueStmt(0)
            self.state = 1271
            self.match(vbaParser.WS)
            self.state = 1272
            self.match(vbaParser.FOR)
            self.state = 1273
            self.match(vbaParser.WS)
            self.state = 1274
            _la = self._input.LA(1)
            if not(_la==vbaParser.APPEND or _la==vbaParser.BINARY or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (vbaParser.INPUT - 86)) | (1 << (vbaParser.OUTPUT - 86)) | (1 << (vbaParser.RANDOM - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1275
                self.match(vbaParser.WS)
                self.state = 1276
                self.match(vbaParser.ACCESS)
                self.state = 1277
                self.match(vbaParser.WS)
                self.state = 1278
                _la = self._input.LA(1)
                if not(((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (vbaParser.READ - 142)) | (1 << (vbaParser.READ_WRITE - 142)) | (1 << (vbaParser.WRITE - 142)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1281
                self.match(vbaParser.WS)
                self.state = 1282
                _la = self._input.LA(1)
                if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (vbaParser.LOCK_READ - 99)) | (1 << (vbaParser.LOCK_WRITE - 99)) | (1 << (vbaParser.LOCK_READ_WRITE - 99)) | (1 << (vbaParser.SHARED - 99)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1285
            self.match(vbaParser.WS)
            self.state = 1286
            self.match(vbaParser.AS)
            self.state = 1287
            self.match(vbaParser.WS)
            self.state = 1288
            self.fileNumber()
            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1289
                self.match(vbaParser.WS)
                self.state = 1290
                self.match(vbaParser.LEN)
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1291
                    self.match(vbaParser.WS)


                self.state = 1294
                self.match(vbaParser.EQ)
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1295
                    self.match(vbaParser.WS)


                self.state = 1298
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputList_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputList_ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputList_ExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.state = 1334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.outputList_Expression()
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1302
                            self.match(vbaParser.WS)


                        self.state = 1305
                        _la = self._input.LA(1)
                        if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1307
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                        if la_ == 1:
                            self.state = 1306
                            self.match(vbaParser.WS)


                        self.state = 1310
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                        if la_ == 1:
                            self.state = 1309
                            self.outputList_Expression()

                 
                    self.state = 1316
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (vbaParser.LPAREN - 194)) | (1 << (vbaParser.MINUS - 194)) | (1 << (vbaParser.PLUS - 194)) | (1 << (vbaParser.STRINGLITERAL - 194)) | (1 << (vbaParser.OCTLITERAL - 194)) | (1 << (vbaParser.HEXLITERAL - 194)) | (1 << (vbaParser.SHORTLITERAL - 194)) | (1 << (vbaParser.INTEGERLITERAL - 194)) | (1 << (vbaParser.DOUBLELITERAL - 194)) | (1 << (vbaParser.DATELITERAL - 194)) | (1 << (vbaParser.IDENTIFIER - 194)))) != 0):
                    self.state = 1317
                    self.outputList_Expression()


                self.state = 1330 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1320
                            self.match(vbaParser.WS)


                        self.state = 1323
                        _la = self._input.LA(1)
                        if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1325
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                        if la_ == 1:
                            self.state = 1324
                            self.match(vbaParser.WS)


                        self.state = 1328
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1327
                            self.outputList_Expression()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1332 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputList_ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList_Expression" ):
                listener.enterOutputList_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList_Expression" ):
                listener.exitOutputList_Expression(self)




    def outputList_Expression(self):

        localctx = vbaParser.OutputList_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_outputList_Expression)
        self._la = 0 # Token type
        try:
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.valueStmt(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==vbaParser.SPC or _la==vbaParser.TAB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1338
                        self.match(vbaParser.WS)


                    self.state = 1341
                    self.match(vbaParser.LPAREN)
                    self.state = 1343
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1342
                        self.match(vbaParser.WS)


                    self.state = 1345
                    self.argsCall()
                    self.state = 1347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1346
                        self.match(vbaParser.WS)


                    self.state = 1349
                    self.match(vbaParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = vbaParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(vbaParser.PRINT)
            self.state = 1356
            self.match(vbaParser.WS)
            self.state = 1357
            self.fileNumber()
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1358
                self.match(vbaParser.WS)


            self.state = 1361
            self.match(vbaParser.T__0)
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1362
                    self.match(vbaParser.WS)


                self.state = 1365
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GET(self):
            return self.getToken(vbaParser.PROPERTY_GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetStmt" ):
                listener.enterPropertyGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetStmt" ):
                listener.exitPropertyGetStmt(self)




    def propertyGetStmt(self):

        localctx = vbaParser.PropertyGetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_propertyGetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1368
                self.visibility()
                self.state = 1369
                self.match(vbaParser.WS)


            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1373
                self.match(vbaParser.STATIC)
                self.state = 1374
                self.match(vbaParser.WS)


            self.state = 1377
            self.match(vbaParser.PROPERTY_GET)
            self.state = 1378
            self.match(vbaParser.WS)
            self.state = 1379
            self.ambiguousIdentifier()
            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1380
                self.typeHint()


            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1383
                    self.match(vbaParser.WS)


                self.state = 1386
                self.argList()


            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1389
                self.match(vbaParser.WS)
                self.state = 1390
                self.asTypeClause()


            self.state = 1393
            self.endOfStatement()
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1394
                self.block()


            self.state = 1397
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SET(self):
            return self.getToken(vbaParser.PROPERTY_SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertySetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetStmt" ):
                listener.enterPropertySetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetStmt" ):
                listener.exitPropertySetStmt(self)




    def propertySetStmt(self):

        localctx = vbaParser.PropertySetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_propertySetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1399
                self.visibility()
                self.state = 1400
                self.match(vbaParser.WS)


            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1404
                self.match(vbaParser.STATIC)
                self.state = 1405
                self.match(vbaParser.WS)


            self.state = 1408
            self.match(vbaParser.PROPERTY_SET)
            self.state = 1409
            self.match(vbaParser.WS)
            self.state = 1410
            self.ambiguousIdentifier()
            self.state = 1415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1411
                    self.match(vbaParser.WS)


                self.state = 1414
                self.argList()


            self.state = 1417
            self.endOfStatement()
            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1418
                self.block()


            self.state = 1421
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_LET(self):
            return self.getToken(vbaParser.PROPERTY_LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLetStmt" ):
                listener.enterPropertyLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLetStmt" ):
                listener.exitPropertyLetStmt(self)




    def propertyLetStmt(self):

        localctx = vbaParser.PropertyLetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_propertyLetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1423
                self.visibility()
                self.state = 1424
                self.match(vbaParser.WS)


            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1428
                self.match(vbaParser.STATIC)
                self.state = 1429
                self.match(vbaParser.WS)


            self.state = 1432
            self.match(vbaParser.PROPERTY_LET)
            self.state = 1433
            self.match(vbaParser.WS)
            self.state = 1434
            self.ambiguousIdentifier()
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1435
                    self.match(vbaParser.WS)


                self.state = 1438
                self.argList()


            self.state = 1441
            self.endOfStatement()
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1442
                self.block()


            self.state = 1445
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_putStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStmt" ):
                listener.enterPutStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStmt" ):
                listener.exitPutStmt(self)




    def putStmt(self):

        localctx = vbaParser.PutStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_putStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(vbaParser.PUT)
            self.state = 1448
            self.match(vbaParser.WS)
            self.state = 1449
            self.fileNumber()
            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1450
                self.match(vbaParser.WS)


            self.state = 1453
            self.match(vbaParser.T__0)
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1454
                self.match(vbaParser.WS)


            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (vbaParser.LPAREN - 194)) | (1 << (vbaParser.MINUS - 194)) | (1 << (vbaParser.PLUS - 194)) | (1 << (vbaParser.STRINGLITERAL - 194)) | (1 << (vbaParser.OCTLITERAL - 194)) | (1 << (vbaParser.HEXLITERAL - 194)) | (1 << (vbaParser.SHORTLITERAL - 194)) | (1 << (vbaParser.INTEGERLITERAL - 194)) | (1 << (vbaParser.DOUBLELITERAL - 194)) | (1 << (vbaParser.DATELITERAL - 194)) | (1 << (vbaParser.IDENTIFIER - 194)))) != 0):
                self.state = 1457
                self.valueStmt(0)


            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1460
                self.match(vbaParser.WS)


            self.state = 1463
            self.match(vbaParser.T__0)
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1464
                self.match(vbaParser.WS)


            self.state = 1467
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseEventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_raiseEventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseEventStmt" ):
                listener.enterRaiseEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseEventStmt" ):
                listener.exitRaiseEventStmt(self)




    def raiseEventStmt(self):

        localctx = vbaParser.RaiseEventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_raiseEventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.match(vbaParser.RAISEEVENT)
            self.state = 1470
            self.match(vbaParser.WS)
            self.state = 1471
            self.ambiguousIdentifier()
            self.state = 1486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1472
                    self.match(vbaParser.WS)


                self.state = 1475
                self.match(vbaParser.LPAREN)
                self.state = 1477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1476
                    self.match(vbaParser.WS)


                self.state = 1483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self.argsCall()
                    self.state = 1481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1480
                        self.match(vbaParser.WS)




                self.state = 1485
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RandomizeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_randomizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandomizeStmt" ):
                listener.enterRandomizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandomizeStmt" ):
                listener.exitRandomizeStmt(self)




    def randomizeStmt(self):

        localctx = vbaParser.RandomizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_randomizeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.match(vbaParser.RANDOMIZE)
            self.state = 1491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1489
                self.match(vbaParser.WS)
                self.state = 1490
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def redimSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimSubStmtContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStmt" ):
                listener.enterRedimStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStmt" ):
                listener.exitRedimStmt(self)




    def redimStmt(self):

        localctx = vbaParser.RedimStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_redimStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.match(vbaParser.REDIM)
            self.state = 1494
            self.match(vbaParser.WS)
            self.state = 1497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.match(vbaParser.PRESERVE)
                self.state = 1496
                self.match(vbaParser.WS)


            self.state = 1499
            self.redimSubStmt()
            self.state = 1510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1500
                        self.match(vbaParser.WS)


                    self.state = 1503
                    self.match(vbaParser.T__0)
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1504
                        self.match(vbaParser.WS)


                    self.state = 1507
                    self.redimSubStmt() 
                self.state = 1512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimSubStmt" ):
                listener.enterRedimSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimSubStmt" ):
                listener.exitRedimSubStmt(self)




    def redimSubStmt(self):

        localctx = vbaParser.RedimSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_redimSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.implicitCallStmt_InStmt()
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1514
                self.match(vbaParser.WS)


            self.state = 1517
            self.match(vbaParser.LPAREN)
            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1518
                self.match(vbaParser.WS)


            self.state = 1521
            self.subscripts()
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1522
                self.match(vbaParser.WS)


            self.state = 1525
            self.match(vbaParser.RPAREN)
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1526
                self.match(vbaParser.WS)
                self.state = 1527
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_resetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStmt" ):
                listener.enterResetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStmt" ):
                listener.exitResetStmt(self)




    def resetStmt(self):

        localctx = vbaParser.ResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_resetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.match(vbaParser.RESET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStmt" ):
                listener.enterResumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStmt" ):
                listener.exitResumeStmt(self)




    def resumeStmt(self):

        localctx = vbaParser.ResumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_resumeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(vbaParser.RESUME)
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1533
                self.match(vbaParser.WS)
                self.state = 1536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1534
                    self.match(vbaParser.NEXT)
                    pass

                elif la_ == 2:
                    self.state = 1535
                    self.ambiguousIdentifier()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = vbaParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RmdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rmdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRmdirStmt" ):
                listener.enterRmdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRmdirStmt" ):
                listener.exitRmdirStmt(self)




    def rmdirStmt(self):

        localctx = vbaParser.RmdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_rmdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(vbaParser.RMDIR)
            self.state = 1543
            self.match(vbaParser.WS)
            self.state = 1544
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStmt" ):
                listener.enterRsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStmt" ):
                listener.exitRsetStmt(self)




    def rsetStmt(self):

        localctx = vbaParser.RsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_rsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(vbaParser.RSET)
            self.state = 1547
            self.match(vbaParser.WS)
            self.state = 1548
            self.implicitCallStmt_InStmt()
            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1549
                self.match(vbaParser.WS)


            self.state = 1552
            self.match(vbaParser.EQ)
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1553
                self.match(vbaParser.WS)


            self.state = 1556
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepictureStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_savepictureStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepictureStmt" ):
                listener.enterSavepictureStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepictureStmt" ):
                listener.exitSavepictureStmt(self)




    def savepictureStmt(self):

        localctx = vbaParser.SavepictureStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_savepictureStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(vbaParser.SAVEPICTURE)
            self.state = 1559
            self.match(vbaParser.WS)
            self.state = 1560
            self.valueStmt(0)
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1561
                self.match(vbaParser.WS)


            self.state = 1564
            self.match(vbaParser.T__0)
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1565
                self.match(vbaParser.WS)


            self.state = 1568
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SaveSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_saveSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSaveSettingStmt" ):
                listener.enterSaveSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSaveSettingStmt" ):
                listener.exitSaveSettingStmt(self)




    def saveSettingStmt(self):

        localctx = vbaParser.SaveSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_saveSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.match(vbaParser.SAVESETTING)
            self.state = 1571
            self.match(vbaParser.WS)
            self.state = 1572
            self.valueStmt(0)
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1573
                self.match(vbaParser.WS)


            self.state = 1576
            self.match(vbaParser.T__0)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1577
                self.match(vbaParser.WS)


            self.state = 1580
            self.valueStmt(0)
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1581
                self.match(vbaParser.WS)


            self.state = 1584
            self.match(vbaParser.T__0)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1585
                self.match(vbaParser.WS)


            self.state = 1588
            self.valueStmt(0)
            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1589
                self.match(vbaParser.WS)


            self.state = 1592
            self.match(vbaParser.T__0)
            self.state = 1594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1593
                self.match(vbaParser.WS)


            self.state = 1596
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeekStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStmt" ):
                listener.enterSeekStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStmt" ):
                listener.exitSeekStmt(self)




    def seekStmt(self):

        localctx = vbaParser.SeekStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_seekStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(vbaParser.SEEK)
            self.state = 1599
            self.match(vbaParser.WS)
            self.state = 1600
            self.fileNumber()
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1601
                self.match(vbaParser.WS)


            self.state = 1604
            self.match(vbaParser.T__0)
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1605
                self.match(vbaParser.WS)


            self.state = 1608
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_SELECT(self):
            return self.getToken(vbaParser.END_SELECT, 0)

        def sC_Case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_CaseContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_CaseContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStmt" ):
                listener.enterSelectCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStmt" ):
                listener.exitSelectCaseStmt(self)




    def selectCaseStmt(self):

        localctx = vbaParser.SelectCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_selectCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(vbaParser.SELECT)
            self.state = 1611
            self.match(vbaParser.WS)
            self.state = 1612
            self.match(vbaParser.CASE)
            self.state = 1613
            self.match(vbaParser.WS)
            self.state = 1614
            self.valueStmt(0)
            self.state = 1615
            self.endOfStatement()
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==vbaParser.CASE:
                self.state = 1616
                self.sC_Case()
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1622
            self.match(vbaParser.END_SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Selection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondValueContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondValue" ):
                listener.enterCaseCondValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondValue" ):
                listener.exitCaseCondValue(self)


    class CaseCondToContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondTo" ):
                listener.enterCaseCondTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondTo" ):
                listener.exitCaseCondTo(self)


    class CaseCondIsContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)
        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondIs" ):
                listener.enterCaseCondIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondIs" ):
                listener.exitCaseCondIs(self)



    def sC_Selection(self):

        localctx = vbaParser.SC_SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sC_Selection)
        self._la = 0 # Token type
        try:
            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondIsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.match(vbaParser.IS)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1625
                    self.match(vbaParser.WS)


                self.state = 1628
                self.comparisonOperator()
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1629
                    self.match(vbaParser.WS)


                self.state = 1632
                self.valueStmt(0)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondToContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1634
                self.valueStmt(0)
                self.state = 1635
                self.match(vbaParser.WS)
                self.state = 1636
                self.match(vbaParser.TO)
                self.state = 1637
                self.match(vbaParser.WS)
                self.state = 1638
                self.valueStmt(0)
                pass

            elif la_ == 3:
                localctx = vbaParser.CaseCondValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1640
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def sC_Cond(self):
            return self.getTypedRuleContext(vbaParser.SC_CondContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSC_Case" ):
                listener.enterSC_Case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSC_Case" ):
                listener.exitSC_Case(self)




    def sC_Case(self):

        localctx = vbaParser.SC_CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sC_Case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(vbaParser.CASE)
            self.state = 1644
            self.match(vbaParser.WS)
            self.state = 1645
            self.sC_Cond()
            self.state = 1646
            self.endOfStatement()
            self.state = 1648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1647
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondSelectionContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sC_Selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_SelectionContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_SelectionContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondSelection" ):
                listener.enterCaseCondSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondSelection" ):
                listener.exitCaseCondSelection(self)


    class CaseCondElseContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondElse" ):
                listener.enterCaseCondElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondElse" ):
                listener.exitCaseCondElse(self)



    def sC_Cond(self):

        localctx = vbaParser.SC_CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_sC_Cond)
        self._la = 0 # Token type
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.match(vbaParser.ELSE)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondSelectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.sC_Selection()
                self.state = 1662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1652
                            self.match(vbaParser.WS)


                        self.state = 1655
                        self.match(vbaParser.T__0)
                        self.state = 1657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1656
                            self.match(vbaParser.WS)


                        self.state = 1659
                        self.sC_Selection() 
                    self.state = 1664
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendkeysStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_sendkeysStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendkeysStmt" ):
                listener.enterSendkeysStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendkeysStmt" ):
                listener.exitSendkeysStmt(self)




    def sendkeysStmt(self):

        localctx = vbaParser.SendkeysStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_sendkeysStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(vbaParser.SENDKEYS)
            self.state = 1668
            self.match(vbaParser.WS)
            self.state = 1669
            self.valueStmt(0)
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1670
                    self.match(vbaParser.WS)


                self.state = 1673
                self.match(vbaParser.T__0)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1674
                    self.match(vbaParser.WS)


                self.state = 1677
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetattrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_setattrStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetattrStmt" ):
                listener.enterSetattrStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetattrStmt" ):
                listener.exitSetattrStmt(self)




    def setattrStmt(self):

        localctx = vbaParser.SetattrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_setattrStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(vbaParser.SETATTR)
            self.state = 1681
            self.match(vbaParser.WS)
            self.state = 1682
            self.valueStmt(0)
            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1683
                self.match(vbaParser.WS)


            self.state = 1686
            self.match(vbaParser.T__0)
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1687
                self.match(vbaParser.WS)


            self.state = 1690
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)




    def setStmt(self):

        localctx = vbaParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_setStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(vbaParser.SET)
            self.state = 1693
            self.match(vbaParser.WS)
            self.state = 1694
            self.implicitCallStmt_InStmt()
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1695
                self.match(vbaParser.WS)


            self.state = 1698
            self.match(vbaParser.EQ)
            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1699
                self.match(vbaParser.WS)


            self.state = 1702
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStmt" ):
                listener.enterStopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStmt" ):
                listener.exitStopStmt(self)




    def stopStmt(self):

        localctx = vbaParser.StopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_stopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_SUB(self):
            return self.getToken(vbaParser.END_SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStmt" ):
                listener.enterSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStmt" ):
                listener.exitSubStmt(self)




    def subStmt(self):

        localctx = vbaParser.SubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1706
                self.visibility()
                self.state = 1707
                self.match(vbaParser.WS)


            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1711
                self.match(vbaParser.STATIC)
                self.state = 1712
                self.match(vbaParser.WS)


            self.state = 1715
            self.match(vbaParser.SUB)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1716
                self.match(vbaParser.WS)


            self.state = 1719
            self.ambiguousIdentifier()
            self.state = 1724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1720
                    self.match(vbaParser.WS)


                self.state = 1723
                self.argList()


            self.state = 1726
            self.endOfStatement()
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1727
                self.block()


            self.state = 1730
            self.match(vbaParser.END_SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_timeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeStmt" ):
                listener.enterTimeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeStmt" ):
                listener.exitTimeStmt(self)




    def timeStmt(self):

        localctx = vbaParser.TimeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_timeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.match(vbaParser.TIME)
            self.state = 1734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1733
                self.match(vbaParser.WS)


            self.state = 1736
            self.match(vbaParser.EQ)
            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1737
                self.match(vbaParser.WS)


            self.state = 1740
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_TYPE(self):
            return self.getToken(vbaParser.END_TYPE, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def typeStmt_Element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeStmt_ElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeStmt_ElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt" ):
                listener.enterTypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt" ):
                listener.exitTypeStmt(self)




    def typeStmt(self):

        localctx = vbaParser.TypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1742
                self.visibility()
                self.state = 1743
                self.match(vbaParser.WS)


            self.state = 1747
            self.match(vbaParser.TYPE)
            self.state = 1748
            self.match(vbaParser.WS)
            self.state = 1749
            self.ambiguousIdentifier()
            self.state = 1750
            self.endOfStatement()
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1751
                self.typeStmt_Element()
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1757
            self.match(vbaParser.END_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmt_ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt_Element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt_Element" ):
                listener.enterTypeStmt_Element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt_Element" ):
                listener.exitTypeStmt_Element(self)




    def typeStmt_Element(self):

        localctx = vbaParser.TypeStmt_ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeStmt_Element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.ambiguousIdentifier()
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1760
                    self.match(vbaParser.WS)


                self.state = 1763
                self.match(vbaParser.LPAREN)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1764
                        self.match(vbaParser.WS)


                    self.state = 1767
                    self.subscripts()


                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1770
                    self.match(vbaParser.WS)


                self.state = 1773
                self.match(vbaParser.RPAREN)


            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1776
                self.match(vbaParser.WS)
                self.state = 1777
                self.asTypeClause()


            self.state = 1780
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def vbatype(self):
            return self.getTypedRuleContext(vbaParser.VbatypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOfStmt" ):
                listener.enterTypeOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOfStmt" ):
                listener.exitTypeOfStmt(self)




    def typeOfStmt(self):

        localctx = vbaParser.TypeOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_typeOfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            self.match(vbaParser.TYPEOF)
            self.state = 1783
            self.match(vbaParser.WS)
            self.state = 1784
            self.valueStmt(0)
            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 1785
                self.match(vbaParser.WS)
                self.state = 1786
                self.match(vbaParser.IS)
                self.state = 1787
                self.match(vbaParser.WS)
                self.state = 1788
                self.vbatype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnloadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unloadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnloadStmt" ):
                listener.enterUnloadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnloadStmt" ):
                listener.exitUnloadStmt(self)




    def unloadStmt(self):

        localctx = vbaParser.UnloadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unloadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(vbaParser.UNLOAD)
            self.state = 1792
            self.match(vbaParser.WS)
            self.state = 1793
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_unlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStmt" ):
                listener.enterUnlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStmt" ):
                listener.exitUnlockStmt(self)




    def unlockStmt(self):

        localctx = vbaParser.UnlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_unlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(vbaParser.UNLOCK)
            self.state = 1796
            self.match(vbaParser.WS)
            self.state = 1797
            self.fileNumber()
            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1798
                    self.match(vbaParser.WS)


                self.state = 1801
                self.match(vbaParser.T__0)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1802
                    self.match(vbaParser.WS)


                self.state = 1805
                self.valueStmt(0)
                self.state = 1810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1806
                    self.match(vbaParser.WS)
                    self.state = 1807
                    self.match(vbaParser.TO)
                    self.state = 1808
                    self.match(vbaParser.WS)
                    self.state = 1809
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_valueStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class VsStructContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)
        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsStruct" ):
                listener.enterVsStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsStruct" ):
                listener.exitVsStruct(self)


    class VsChrContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chrStmt(self):
            return self.getTypedRuleContext(vbaParser.ChrStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsChr" ):
                listener.enterVsChr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsChr" ):
                listener.exitVsChr(self)


    class VsAddContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAdd" ):
                listener.enterVsAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAdd" ):
                listener.exitVsAdd(self)


    class VsLtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLt" ):
                listener.enterVsLt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLt" ):
                listener.exitVsLt(self)


    class VsAddressOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAddressOf" ):
                listener.enterVsAddressOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAddressOf" ):
                listener.exitVsAddressOf(self)


    class VsNewContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNew" ):
                listener.enterVsNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNew" ):
                listener.exitVsNew(self)


    class VsMultContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMult" ):
                listener.enterVsMult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMult" ):
                listener.exitVsMult(self)


    class VsNegationContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNegation" ):
                listener.enterVsNegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNegation" ):
                listener.exitVsNegation(self)


    class VsAssignContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)

        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAssign" ):
                listener.enterVsAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAssign" ):
                listener.exitVsAssign(self)


    class VsLikeContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLike" ):
                listener.enterVsLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLike" ):
                listener.exitVsLike(self)


    class VsDivContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsDiv" ):
                listener.enterVsDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsDiv" ):
                listener.exitVsDiv(self)


    class VsPlusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPlus" ):
                listener.enterVsPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPlus" ):
                listener.exitVsPlus(self)


    class VsNotContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNot" ):
                listener.enterVsNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNot" ):
                listener.exitVsNot(self)


    class VsGeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGeq" ):
                listener.enterVsGeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGeq" ):
                listener.exitVsGeq(self)


    class VsTypeOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeOfStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeOfStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsTypeOf" ):
                listener.enterVsTypeOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsTypeOf" ):
                listener.exitVsTypeOf(self)


    class VsICSContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsICS" ):
                listener.enterVsICS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsICS" ):
                listener.exitVsICS(self)


    class VsNeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNeq" ):
                listener.enterVsNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNeq" ):
                listener.exitVsNeq(self)


    class VsXorContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsXor" ):
                listener.enterVsXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsXor" ):
                listener.exitVsXor(self)


    class VsAndContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAnd" ):
                listener.enterVsAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAnd" ):
                listener.exitVsAnd(self)


    class VsLeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLeq" ):
                listener.enterVsLeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLeq" ):
                listener.exitVsLeq(self)


    class VsPowContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def POW(self):
            return self.getToken(vbaParser.POW, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPow" ):
                listener.enterVsPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPow" ):
                listener.exitVsPow(self)


    class VsIsContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsIs" ):
                listener.enterVsIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsIs" ):
                listener.exitVsIs(self)


    class VsModContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMod" ):
                listener.enterVsMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMod" ):
                listener.exitVsMod(self)


    class VsAmpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAmp" ):
                listener.enterVsAmp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAmp" ):
                listener.exitVsAmp(self)


    class VsOrContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsOr" ):
                listener.enterVsOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsOr" ):
                listener.exitVsOr(self)


    class VsMinusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMinus" ):
                listener.enterVsMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMinus" ):
                listener.exitVsMinus(self)


    class VsLiteralContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(vbaParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLiteral" ):
                listener.enterVsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLiteral" ):
                listener.exitVsLiteral(self)


    class VsEqvContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEqv" ):
                listener.enterVsEqv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEqv" ):
                listener.exitVsEqv(self)


    class VsImpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsImp" ):
                listener.enterVsImp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsImp" ):
                listener.exitVsImp(self)


    class VsGtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGt" ):
                listener.enterVsGt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGt" ):
                listener.exitVsGt(self)


    class VsEqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEq" ):
                listener.enterVsEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEq" ):
                listener.exitVsEq(self)


    class VsMidContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMid" ):
                listener.enterVsMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMid" ):
                listener.exitVsMid(self)



    def valueStmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ValueStmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 202
        self.enterRecursionRule(localctx, 202, self.RULE_valueStmt, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                localctx = vbaParser.VsLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1815
                self.literal()
                pass

            elif la_ == 2:
                localctx = vbaParser.VsICSContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1816
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 3:
                localctx = vbaParser.VsStructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1817
                self.match(vbaParser.LPAREN)
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1818
                    self.match(vbaParser.WS)


                self.state = 1821
                self.valueStmt(0)
                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==vbaParser.T__0 or _la==vbaParser.WS:
                    self.state = 1823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1822
                        self.match(vbaParser.WS)


                    self.state = 1825
                    self.match(vbaParser.T__0)
                    self.state = 1827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1826
                        self.match(vbaParser.WS)


                    self.state = 1829
                    self.valueStmt(0)
                    self.state = 1834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1835
                self.match(vbaParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = vbaParser.VsNewContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1837
                self.match(vbaParser.NEW)
                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1838
                    self.match(vbaParser.WS)


                self.state = 1841
                self.valueStmt(29)
                pass

            elif la_ == 5:
                localctx = vbaParser.VsTypeOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1842
                self.typeOfStmt()
                pass

            elif la_ == 6:
                localctx = vbaParser.VsMidContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1843
                self.midStmt()
                pass

            elif la_ == 7:
                localctx = vbaParser.VsChrContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1844
                self.chrStmt()
                pass

            elif la_ == 8:
                localctx = vbaParser.VsAddressOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1845
                self.match(vbaParser.ADDRESSOF)
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1846
                    self.match(vbaParser.WS)


                self.state = 1849
                self.valueStmt(25)
                pass

            elif la_ == 9:
                localctx = vbaParser.VsAssignContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1850
                self.implicitCallStmt_InStmt()
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1851
                    self.match(vbaParser.WS)


                self.state = 1854
                self.match(vbaParser.ASSIGN)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1855
                    self.match(vbaParser.WS)


                self.state = 1858
                self.valueStmt(24)
                pass

            elif la_ == 10:
                localctx = vbaParser.VsNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1860
                self.match(vbaParser.MINUS)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1861
                    self.match(vbaParser.WS)


                self.state = 1864
                self.valueStmt(14)
                pass

            elif la_ == 11:
                localctx = vbaParser.VsPlusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1865
                self.match(vbaParser.PLUS)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1866
                    self.match(vbaParser.WS)


                self.state = 1869
                self.valueStmt(13)
                pass

            elif la_ == 12:
                localctx = vbaParser.VsNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1870
                self.match(vbaParser.NOT)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1871
                    self.match(vbaParser.WS)


                self.state = 1874
                self.valueStmt(1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2057
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.VsIsContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1877
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1879
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1878
                            self.match(vbaParser.WS)


                        self.state = 1881
                        self.match(vbaParser.IS)
                        self.state = 1883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1882
                            self.match(vbaParser.WS)


                        self.state = 1885
                        self.valueStmt(24)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.VsLikeContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1886
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1887
                            self.match(vbaParser.WS)


                        self.state = 1890
                        self.match(vbaParser.LIKE)
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1891
                            self.match(vbaParser.WS)


                        self.state = 1894
                        self.valueStmt(23)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.VsGeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1895
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1897
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1896
                            self.match(vbaParser.WS)


                        self.state = 1899
                        self.match(vbaParser.GEQ)
                        self.state = 1901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1900
                            self.match(vbaParser.WS)


                        self.state = 1903
                        self.valueStmt(22)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.VsLeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1904
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1905
                            self.match(vbaParser.WS)


                        self.state = 1908
                        self.match(vbaParser.LEQ)
                        self.state = 1910
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1909
                            self.match(vbaParser.WS)


                        self.state = 1912
                        self.valueStmt(21)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.VsGtContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1913
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1914
                            self.match(vbaParser.WS)


                        self.state = 1917
                        self.match(vbaParser.GT)
                        self.state = 1919
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1918
                            self.match(vbaParser.WS)


                        self.state = 1921
                        self.valueStmt(20)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.VsLtContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1922
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1924
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1923
                            self.match(vbaParser.WS)


                        self.state = 1926
                        self.match(vbaParser.LT)
                        self.state = 1928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1927
                            self.match(vbaParser.WS)


                        self.state = 1930
                        self.valueStmt(19)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.VsNeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1931
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1933
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1932
                            self.match(vbaParser.WS)


                        self.state = 1935
                        self.match(vbaParser.NEQ)
                        self.state = 1937
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1936
                            self.match(vbaParser.WS)


                        self.state = 1939
                        self.valueStmt(18)
                        pass

                    elif la_ == 8:
                        localctx = vbaParser.VsEqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1940
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1941
                            self.match(vbaParser.WS)


                        self.state = 1944
                        self.match(vbaParser.EQ)
                        self.state = 1946
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1945
                            self.match(vbaParser.WS)


                        self.state = 1948
                        self.valueStmt(17)
                        pass

                    elif la_ == 9:
                        localctx = vbaParser.VsPowContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1949
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1950
                            self.match(vbaParser.WS)


                        self.state = 1953
                        self.match(vbaParser.POW)
                        self.state = 1955
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1954
                            self.match(vbaParser.WS)


                        self.state = 1957
                        self.valueStmt(16)
                        pass

                    elif la_ == 10:
                        localctx = vbaParser.VsDivContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1958
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1959
                            self.match(vbaParser.WS)


                        self.state = 1962
                        self.match(vbaParser.DIV)
                        self.state = 1964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1963
                            self.match(vbaParser.WS)


                        self.state = 1966
                        self.valueStmt(13)
                        pass

                    elif la_ == 11:
                        localctx = vbaParser.VsMultContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1967
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1969
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1968
                            self.match(vbaParser.WS)


                        self.state = 1971
                        self.match(vbaParser.MULT)
                        self.state = 1973
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1972
                            self.match(vbaParser.WS)


                        self.state = 1975
                        self.valueStmt(12)
                        pass

                    elif la_ == 12:
                        localctx = vbaParser.VsModContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1976
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1977
                            self.match(vbaParser.WS)


                        self.state = 1980
                        self.match(vbaParser.MOD)
                        self.state = 1982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1981
                            self.match(vbaParser.WS)


                        self.state = 1984
                        self.valueStmt(11)
                        pass

                    elif la_ == 13:
                        localctx = vbaParser.VsAddContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1985
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1986
                            self.match(vbaParser.WS)


                        self.state = 1989
                        self.match(vbaParser.PLUS)
                        self.state = 1991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1990
                            self.match(vbaParser.WS)


                        self.state = 1993
                        self.valueStmt(10)
                        pass

                    elif la_ == 14:
                        localctx = vbaParser.VsMinusContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1994
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1996
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1995
                            self.match(vbaParser.WS)


                        self.state = 1998
                        self.match(vbaParser.MINUS)
                        self.state = 2000
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1999
                            self.match(vbaParser.WS)


                        self.state = 2002
                        self.valueStmt(9)
                        pass

                    elif la_ == 15:
                        localctx = vbaParser.VsAmpContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2003
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 2005
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2004
                            self.match(vbaParser.WS)


                        self.state = 2007
                        self.match(vbaParser.AMPERSAND)
                        self.state = 2009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2008
                            self.match(vbaParser.WS)


                        self.state = 2011
                        self.valueStmt(8)
                        pass

                    elif la_ == 16:
                        localctx = vbaParser.VsImpContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2012
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2014
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2013
                            self.match(vbaParser.WS)


                        self.state = 2016
                        self.match(vbaParser.IMP)
                        self.state = 2018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2017
                            self.match(vbaParser.WS)


                        self.state = 2020
                        self.valueStmt(7)
                        pass

                    elif la_ == 17:
                        localctx = vbaParser.VsEqvContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2021
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2022
                            self.match(vbaParser.WS)


                        self.state = 2025
                        self.match(vbaParser.EQV)
                        self.state = 2027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2026
                            self.match(vbaParser.WS)


                        self.state = 2029
                        self.valueStmt(6)
                        pass

                    elif la_ == 18:
                        localctx = vbaParser.VsXorContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2030
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2032
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2031
                            self.match(vbaParser.WS)


                        self.state = 2034
                        self.match(vbaParser.XOR)
                        self.state = 2036
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2035
                            self.match(vbaParser.WS)


                        self.state = 2038
                        self.valueStmt(5)
                        pass

                    elif la_ == 19:
                        localctx = vbaParser.VsOrContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2039
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2040
                            self.match(vbaParser.WS)


                        self.state = 2043
                        self.match(vbaParser.OR)
                        self.state = 2045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2044
                            self.match(vbaParser.WS)


                        self.state = 2047
                        self.valueStmt(4)
                        pass

                    elif la_ == 20:
                        localctx = vbaParser.VsAndContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2048
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2050
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2049
                            self.match(vbaParser.WS)


                        self.state = 2052
                        self.match(vbaParser.AND)
                        self.state = 2054
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2053
                            self.match(vbaParser.WS)


                        self.state = 2056
                        self.valueStmt(3)
                        pass

             
                self.state = 2061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VariableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def variableListStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableListStmtContext,0)


        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variableStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStmt" ):
                listener.enterVariableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStmt" ):
                listener.exitVariableStmt(self)




    def variableStmt(self):

        localctx = vbaParser.VariableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_variableStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.DIM]:
                self.state = 2062
                self.match(vbaParser.DIM)
                pass
            elif token in [vbaParser.STATIC]:
                self.state = 2063
                self.match(vbaParser.STATIC)
                pass
            elif token in [vbaParser.FRIEND, vbaParser.GLOBAL, vbaParser.PRIVATE, vbaParser.PUBLIC]:
                self.state = 2064
                self.visibility()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2067
            self.match(vbaParser.WS)
            self.state = 2070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2068
                self.match(vbaParser.WITHEVENTS)
                self.state = 2069
                self.match(vbaParser.WS)


            self.state = 2072
            self.variableListStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableListStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableSubStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_variableListStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListStmt" ):
                listener.enterVariableListStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListStmt" ):
                listener.exitVariableListStmt(self)




    def variableListStmt(self):

        localctx = vbaParser.VariableListStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_variableListStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.variableSubStmt()
            self.state = 2085
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2075
                        self.match(vbaParser.WS)


                    self.state = 2078
                    self.match(vbaParser.T__0)
                    self.state = 2080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2079
                        self.match(vbaParser.WS)


                    self.state = 2082
                    self.variableSubStmt() 
                self.state = 2087
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSubStmt" ):
                listener.enterVariableSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSubStmt" ):
                listener.exitVariableSubStmt(self)




    def variableSubStmt(self):

        localctx = vbaParser.VariableSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_variableSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.ambiguousIdentifier()
            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2089
                    self.match(vbaParser.WS)


                self.state = 2092
                self.match(vbaParser.LPAREN)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2093
                    self.match(vbaParser.WS)


                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (vbaParser.LPAREN - 194)) | (1 << (vbaParser.MINUS - 194)) | (1 << (vbaParser.PLUS - 194)) | (1 << (vbaParser.STRINGLITERAL - 194)) | (1 << (vbaParser.OCTLITERAL - 194)) | (1 << (vbaParser.HEXLITERAL - 194)) | (1 << (vbaParser.SHORTLITERAL - 194)) | (1 << (vbaParser.INTEGERLITERAL - 194)) | (1 << (vbaParser.DOUBLELITERAL - 194)) | (1 << (vbaParser.DATELITERAL - 194)) | (1 << (vbaParser.IDENTIFIER - 194)))) != 0):
                    self.state = 2096
                    self.subscripts()
                    self.state = 2098
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2097
                        self.match(vbaParser.WS)




                self.state = 2102
                self.match(vbaParser.RPAREN)
                self.state = 2104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.match(vbaParser.WS)




            self.state = 2109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2108
                self.typeHint()


            self.state = 2113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2111
                self.match(vbaParser.WS)
                self.state = 2112
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileWendStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileWendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileWendStmt" ):
                listener.enterWhileWendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileWendStmt" ):
                listener.exitWhileWendStmt(self)




    def whileWendStmt(self):

        localctx = vbaParser.WhileWendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_whileWendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(vbaParser.WHILE)
            self.state = 2116
            self.match(vbaParser.WS)
            self.state = 2117
            self.valueStmt(0)
            self.state = 2118
            self.endOfStatement()
            self.state = 2120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2119
                self.block()


            self.state = 2122
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStmt" ):
                listener.enterWidthStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStmt" ):
                listener.exitWidthStmt(self)




    def widthStmt(self):

        localctx = vbaParser.WidthStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_widthStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(vbaParser.WIDTH)
            self.state = 2125
            self.match(vbaParser.WS)
            self.state = 2126
            self.fileNumber()
            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2127
                self.match(vbaParser.WS)


            self.state = 2130
            self.match(vbaParser.T__0)
            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2131
                self.match(vbaParser.WS)


            self.state = 2134
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_WITH(self):
            return self.getToken(vbaParser.END_WITH, 0)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def vbatype(self):
            return self.getTypedRuleContext(vbaParser.VbatypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)




    def withStmt(self):

        localctx = vbaParser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(vbaParser.WITH)
            self.state = 2137
            self.match(vbaParser.WS)
            self.state = 2142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2138
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 2:
                self.state = 2139
                self.match(vbaParser.NEW)
                self.state = 2140
                self.match(vbaParser.WS)
                self.state = 2141
                self.vbatype()
                pass


            self.state = 2144
            self.endOfStatement()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 2145
                self.block()


            self.state = 2148
            self.match(vbaParser.END_WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStmt" ):
                listener.enterWriteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStmt" ):
                listener.exitWriteStmt(self)




    def writeStmt(self):

        localctx = vbaParser.WriteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_writeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self.match(vbaParser.WRITE)
            self.state = 2151
            self.match(vbaParser.WS)
            self.state = 2152
            self.fileNumber()
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2153
                self.match(vbaParser.WS)


            self.state = 2156
            self.match(vbaParser.T__0)
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2157
                    self.match(vbaParser.WS)


                self.state = 2160
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fileNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.T__2:
                self.state = 2163
                self.match(vbaParser.T__2)


            self.state = 2166
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eCS_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_ProcedureCallContext,0)


        def eCS_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_explicitCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitCallStmt" ):
                listener.enterExplicitCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitCallStmt" ):
                listener.exitExplicitCallStmt(self)




    def explicitCallStmt(self):

        localctx = vbaParser.ExplicitCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_explicitCallStmt)
        try:
            self.state = 2170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2168
                self.eCS_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2169
                self.eCS_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_ProcedureCall" ):
                listener.enterECS_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_ProcedureCall" ):
                listener.exitECS_ProcedureCall(self)




    def eCS_ProcedureCall(self):

        localctx = vbaParser.ECS_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_eCS_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self.match(vbaParser.CALL)
            self.state = 2173
            self.match(vbaParser.WS)
            self.state = 2174
            self.ambiguousIdentifier()
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2175
                self.typeHint()


            self.state = 2191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2178
                    self.match(vbaParser.WS)


                self.state = 2181
                self.match(vbaParser.LPAREN)
                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 2182
                    self.match(vbaParser.WS)


                self.state = 2185
                self.argsCall()
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2186
                    self.match(vbaParser.WS)


                self.state = 2189
                self.match(vbaParser.RPAREN)


            self.state = 2202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2193
                        self.match(vbaParser.WS)


                    self.state = 2196
                    self.match(vbaParser.LPAREN)
                    self.state = 2197
                    self.subscripts()
                    self.state = 2198
                    self.match(vbaParser.RPAREN) 
                self.state = 2204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_MemberProcedureCall" ):
                listener.enterECS_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_MemberProcedureCall" ):
                listener.exitECS_MemberProcedureCall(self)




    def eCS_MemberProcedureCall(self):

        localctx = vbaParser.ECS_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_eCS_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(vbaParser.CALL)
            self.state = 2206
            self.match(vbaParser.WS)
            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2207
                self.implicitCallStmt_InStmt()


            self.state = 2210
            self.match(vbaParser.T__3)
            self.state = 2211
            self.ambiguousIdentifier()
            self.state = 2213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 2212
                self.typeHint()


            self.state = 2228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2215
                    self.match(vbaParser.WS)


                self.state = 2218
                self.match(vbaParser.LPAREN)
                self.state = 2220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 2219
                    self.match(vbaParser.WS)


                self.state = 2222
                self.argsCall()
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2223
                    self.match(vbaParser.WS)


                self.state = 2226
                self.match(vbaParser.RPAREN)


            self.state = 2239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2230
                        self.match(vbaParser.WS)


                    self.state = 2233
                    self.match(vbaParser.LPAREN)
                    self.state = 2234
                    self.subscripts()
                    self.state = 2235
                    self.match(vbaParser.RPAREN) 
                self.state = 2241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_B_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_MemberProcedureCallContext,0)


        def iCS_B_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_ProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InBlock" ):
                listener.enterImplicitCallStmt_InBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InBlock" ):
                listener.exitImplicitCallStmt_InBlock(self)




    def implicitCallStmt_InBlock(self):

        localctx = vbaParser.ImplicitCallStmt_InBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_implicitCallStmt_InBlock)
        try:
            self.state = 2244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2242
                self.iCS_B_MemberProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2243
                self.iCS_B_ProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_MemberProcedureCall" ):
                listener.enterICS_B_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_MemberProcedureCall" ):
                listener.exitICS_B_MemberProcedureCall(self)




    def iCS_B_MemberProcedureCall(self):

        localctx = vbaParser.ICS_B_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_iCS_B_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2246
                self.implicitCallStmt_InStmt()


            self.state = 2249
            self.match(vbaParser.T__3)
            self.state = 2250
            self.ambiguousIdentifier()
            self.state = 2252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2251
                self.typeHint()


            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2254
                self.match(vbaParser.WS)
                self.state = 2255
                self.argsCall()


            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 2258
                self.dictionaryCallStmt()


            self.state = 2270
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,364,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2261
                        self.match(vbaParser.WS)


                    self.state = 2264
                    self.match(vbaParser.LPAREN)
                    self.state = 2265
                    self.subscripts()
                    self.state = 2266
                    self.match(vbaParser.RPAREN) 
                self.state = 2272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,364,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self):
            return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_ProcedureCall" ):
                listener.enterICS_B_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_ProcedureCall" ):
                listener.exitICS_B_ProcedureCall(self)




    def iCS_B_ProcedureCall(self):

        localctx = vbaParser.ICS_B_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_iCS_B_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.certainIdentifier()
            self.state = 2276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.match(vbaParser.WS)
                self.state = 2275
                self.argsCall()


            self.state = 2287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2278
                        self.match(vbaParser.WS)


                    self.state = 2281
                    self.match(vbaParser.LPAREN)
                    self.state = 2282
                    self.subscripts()
                    self.state = 2283
                    self.match(vbaParser.RPAREN) 
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_MembersCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_MembersCallContext,0)


        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_DictionaryCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_DictionaryCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InStmt" ):
                listener.enterImplicitCallStmt_InStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InStmt" ):
                listener.exitImplicitCallStmt_InStmt(self)




    def implicitCallStmt_InStmt(self):

        localctx = vbaParser.ImplicitCallStmt_InStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_implicitCallStmt_InStmt)
        try:
            self.state = 2294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.iCS_S_MembersCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2291
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2292
                self.iCS_S_ProcedureOrArrayCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2293
                self.iCS_S_DictionaryCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_VariableOrProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_VariableOrProcedureCall" ):
                listener.enterICS_S_VariableOrProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_VariableOrProcedureCall" ):
                listener.exitICS_S_VariableOrProcedureCall(self)




    def iCS_S_VariableOrProcedureCall(self):

        localctx = vbaParser.ICS_S_VariableOrProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_iCS_S_VariableOrProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            self.ambiguousIdentifier()
            self.state = 2298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2297
                self.typeHint()


            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.state = 2300
                self.dictionaryCallStmt()


            self.state = 2312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2303
                        self.match(vbaParser.WS)


                    self.state = 2306
                    self.match(vbaParser.LPAREN)
                    self.state = 2307
                    self.subscripts()
                    self.state = 2308
                    self.match(vbaParser.RPAREN) 
                self.state = 2314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_ProcedureOrArrayCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_ProcedureOrArrayCall" ):
                listener.enterICS_S_ProcedureOrArrayCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_ProcedureOrArrayCall" ):
                listener.exitICS_S_ProcedureOrArrayCall(self)




    def iCS_S_ProcedureOrArrayCall(self):

        localctx = vbaParser.ICS_S_ProcedureOrArrayCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_iCS_S_ProcedureOrArrayCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2315
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.state = 2316
                self.baseType()
                pass


            self.state = 2320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 2319
                self.typeHint()


            self.state = 2323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2322
                self.match(vbaParser.WS)


            self.state = 2325
            self.match(vbaParser.LPAREN)
            self.state = 2327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 2326
                self.match(vbaParser.WS)


            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 2329
                self.argsCall()
                self.state = 2331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2330
                    self.match(vbaParser.WS)




            self.state = 2335
            self.match(vbaParser.RPAREN)
            self.state = 2337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2336
                self.dictionaryCallStmt()


            self.state = 2348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2339
                        self.match(vbaParser.WS)


                    self.state = 2342
                    self.match(vbaParser.LPAREN)
                    self.state = 2343
                    self.subscripts()
                    self.state = 2344
                    self.match(vbaParser.RPAREN) 
                self.state = 2350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MembersCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_MemberCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ICS_S_MemberCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ICS_S_MemberCallContext,i)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MembersCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MembersCall" ):
                listener.enterICS_S_MembersCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MembersCall" ):
                listener.exitICS_S_MembersCall(self)




    def iCS_S_MembersCall(self):

        localctx = vbaParser.ICS_S_MembersCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_iCS_S_MembersCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2351
                self.iCS_S_VariableOrProcedureCall()

            elif la_ == 2:
                self.state = 2352
                self.iCS_S_ProcedureOrArrayCall()


            self.state = 2356 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2355
                    self.iCS_S_MemberCall()

                else:
                    raise NoViableAltException(self)
                self.state = 2358 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

            self.state = 2361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2360
                self.dictionaryCallStmt()


            self.state = 2372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2363
                        self.match(vbaParser.WS)


                    self.state = 2366
                    self.match(vbaParser.LPAREN)
                    self.state = 2367
                    self.subscripts()
                    self.state = 2368
                    self.match(vbaParser.RPAREN) 
                self.state = 2374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MemberCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MemberCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MemberCall" ):
                listener.enterICS_S_MemberCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MemberCall" ):
                listener.exitICS_S_MemberCall(self)




    def iCS_S_MemberCall(self):

        localctx = vbaParser.ICS_S_MemberCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_iCS_S_MemberCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            _la = self._input.LA(1)
            if not(_la==vbaParser.T__3 or _la==vbaParser.T__4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2376
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 2:
                self.state = 2377
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_DictionaryCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_DictionaryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_DictionaryCall" ):
                listener.enterICS_S_DictionaryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_DictionaryCall" ):
                listener.exitICS_S_DictionaryCall(self)




    def iCS_S_DictionaryCall(self):

        localctx = vbaParser.ICS_S_DictionaryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_iCS_S_DictionaryCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2380
            self.dictionaryCallStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgCallContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argsCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgsCall" ):
                listener.enterArgsCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgsCall" ):
                listener.exitArgsCall(self)




    def argsCall(self):

        localctx = vbaParser.ArgsCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_argsCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2394
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (vbaParser.LPAREN - 194)) | (1 << (vbaParser.MINUS - 194)) | (1 << (vbaParser.PLUS - 194)) | (1 << (vbaParser.RPAREN - 194)) | (1 << (vbaParser.STRINGLITERAL - 194)) | (1 << (vbaParser.OCTLITERAL - 194)) | (1 << (vbaParser.HEXLITERAL - 194)) | (1 << (vbaParser.SHORTLITERAL - 194)) | (1 << (vbaParser.INTEGERLITERAL - 194)) | (1 << (vbaParser.DOUBLELITERAL - 194)) | (1 << (vbaParser.DATELITERAL - 194)) | (1 << (vbaParser.IDENTIFIER - 194)))) != 0):
                        self.state = 2382
                        self.argCall()


                    self.state = 2386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2385
                        self.match(vbaParser.WS)


                    self.state = 2388
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2390
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                    if la_ == 1:
                        self.state = 2389
                        self.match(vbaParser.WS)

             
                self.state = 2396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

            self.state = 2397
            self.argCall()
            self.state = 2410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2398
                        self.match(vbaParser.WS)


                    self.state = 2401
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                    if la_ == 1:
                        self.state = 2402
                        self.match(vbaParser.WS)


                    self.state = 2406
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
                    if la_ == 1:
                        self.state = 2405
                        self.argCall()

             
                self.state = 2412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgCall" ):
                listener.enterArgCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgCall" ):
                listener.exitArgCall(self)




    def argCall(self):

        localctx = vbaParser.ArgCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_argCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 2413
                self.match(vbaParser.LPAREN)


            self.state = 2418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.state = 2416
                _la = self._input.LA(1)
                if not(_la==vbaParser.BYVAL or _la==vbaParser.BYREF or _la==vbaParser.PARAMARRAY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2417
                self.match(vbaParser.WS)


            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.RPAREN:
                self.state = 2420
                self.match(vbaParser.RPAREN)


            self.state = 2423
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryCallStmt" ):
                listener.enterDictionaryCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryCallStmt" ):
                listener.exitDictionaryCallStmt(self)




    def dictionaryCallStmt(self):

        localctx = vbaParser.DictionaryCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_dictionaryCallStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.match(vbaParser.T__4)
            self.state = 2426
            self.ambiguousIdentifier()
            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.state = 2427
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)




    def argList(self):

        localctx = vbaParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.match(vbaParser.LPAREN)
            self.state = 2448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2431
                    self.match(vbaParser.WS)


                self.state = 2434
                self.arg()
                self.state = 2445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2435
                            self.match(vbaParser.WS)


                        self.state = 2438
                        self.match(vbaParser.T__0)
                        self.state = 2440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2439
                            self.match(vbaParser.WS)


                        self.state = 2442
                        self.arg() 
                    self.state = 2447
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,403,self._ctx)



            self.state = 2451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2450
                self.match(vbaParser.WS)


            self.state = 2453
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def argDefaultValue(self):
            return self.getTypedRuleContext(vbaParser.ArgDefaultValueContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)




    def arg(self):

        localctx = vbaParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 2455
                self.match(vbaParser.OPTIONAL)
                self.state = 2456
                self.match(vbaParser.WS)


            self.state = 2461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 2459
                _la = self._input.LA(1)
                if not(_la==vbaParser.BYVAL or _la==vbaParser.BYREF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2460
                self.match(vbaParser.WS)


            self.state = 2465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2463
                self.match(vbaParser.PARAMARRAY)
                self.state = 2464
                self.match(vbaParser.WS)


            self.state = 2467
            self.ambiguousIdentifier()
            self.state = 2469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 2468
                self.typeHint()


            self.state = 2479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 2472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2471
                    self.match(vbaParser.WS)


                self.state = 2474
                self.match(vbaParser.LPAREN)
                self.state = 2476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2475
                    self.match(vbaParser.WS)


                self.state = 2478
                self.match(vbaParser.RPAREN)


            self.state = 2485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 2482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2481
                    self.match(vbaParser.WS)


                self.state = 2484
                self.asTypeClause()


            self.state = 2491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 2488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2487
                    self.match(vbaParser.WS)


                self.state = 2490
                self.argDefaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgDefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argDefaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgDefaultValue" ):
                listener.enterArgDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgDefaultValue" ):
                listener.exitArgDefaultValue(self)




    def argDefaultValue(self):

        localctx = vbaParser.ArgDefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_argDefaultValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2493
            self.match(vbaParser.EQ)
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2494
                self.match(vbaParser.WS)


            self.state = 2497
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscripts" ):
                listener.enterSubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscripts" ):
                listener.exitSubscripts(self)




    def subscripts(self):

        localctx = vbaParser.SubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.subscript()
            self.state = 2510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2500
                        self.match(vbaParser.WS)


                    self.state = 2503
                    self.match(vbaParser.T__0)
                    self.state = 2505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2504
                        self.match(vbaParser.WS)


                    self.state = 2507
                    self.subscript() 
                self.state = 2512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = vbaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_subscript)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 2513
                self.valueStmt(0)
                self.state = 2514
                self.match(vbaParser.WS)
                self.state = 2515
                self.match(vbaParser.TO)
                self.state = 2516
                self.match(vbaParser.WS)


            self.state = 2520
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_ambiguousIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2524
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [vbaParser.IDENTIFIER]:
                        self.state = 2522
                        self.match(vbaParser.IDENTIFIER)
                        pass
                    elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.CHR, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                        self.state = 2523
                        self.ambiguousKeyword()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2526 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def vbatype(self):
            return self.getTypedRuleContext(vbaParser.VbatypeContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(vbaParser.FieldLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsTypeClause" ):
                listener.enterAsTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsTypeClause" ):
                listener.exitAsTypeClause(self)




    def asTypeClause(self):

        localctx = vbaParser.AsTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_asTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.match(vbaParser.AS)
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2529
                self.match(vbaParser.WS)


            self.state = 2534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2532
                self.match(vbaParser.NEW)
                self.state = 2533
                self.match(vbaParser.WS)


            self.state = 2536
            self.vbatype()
            self.state = 2541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2537
                    self.match(vbaParser.WS)


                self.state = 2540
                self.fieldLength()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = vbaParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.state = 2563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2543
                self.match(vbaParser.BOOLEAN)
                pass
            elif token in [vbaParser.BYTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2544
                self.match(vbaParser.BYTE)
                pass
            elif token in [vbaParser.COLLECTION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2545
                self.match(vbaParser.COLLECTION)
                pass
            elif token in [vbaParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2546
                self.match(vbaParser.DATE)
                pass
            elif token in [vbaParser.DOUBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2547
                self.match(vbaParser.DOUBLE)
                pass
            elif token in [vbaParser.INTEGER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2548
                self.match(vbaParser.INTEGER)
                pass
            elif token in [vbaParser.LONG]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2549
                self.match(vbaParser.LONG)
                pass
            elif token in [vbaParser.SINGLE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2550
                self.match(vbaParser.SINGLE)
                pass
            elif token in [vbaParser.STRING]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2551
                self.match(vbaParser.STRING)
                self.state = 2560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
                if la_ == 1:
                    self.state = 2553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2552
                        self.match(vbaParser.WS)


                    self.state = 2555
                    self.match(vbaParser.MULT)
                    self.state = 2557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2556
                        self.match(vbaParser.WS)


                    self.state = 2559
                    self.valueStmt(0)


                pass
            elif token in [vbaParser.VARIANT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2562
                self.match(vbaParser.VARIANT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CertainIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_certainIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCertainIdentifier" ):
                listener.enterCertainIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCertainIdentifier" ):
                listener.exitCertainIdentifier(self)




    def certainIdentifier(self):

        localctx = vbaParser.CertainIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_certainIdentifier)
        try:
            self.state = 2580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2565
                self.match(vbaParser.IDENTIFIER)
                self.state = 2570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,433,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2568
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.CHR, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                            self.state = 2566
                            self.ambiguousKeyword()
                            pass
                        elif token in [vbaParser.IDENTIFIER]:
                            self.state = 2567
                            self.match(vbaParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,433,self._ctx)

                pass
            elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.CHR, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2573
                self.ambiguousKeyword()
                self.state = 2576 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2576
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.CHR, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                            self.state = 2574
                            self.ambiguousKeyword()
                            pass
                        elif token in [vbaParser.IDENTIFIER]:
                            self.state = 2575
                            self.match(vbaParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2578 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            _la = self._input.LA(1)
            if not(_la==vbaParser.IS or _la==vbaParser.LIKE or ((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (vbaParser.EQ - 190)) | (1 << (vbaParser.GEQ - 190)) | (1 << (vbaParser.GT - 190)) | (1 << (vbaParser.LEQ - 190)) | (1 << (vbaParser.LT - 190)) | (1 << (vbaParser.NEQ - 190)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_complexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexType" ):
                listener.enterComplexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexType" ):
                listener.exitComplexType(self)




    def complexType(self):

        localctx = vbaParser.ComplexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_complexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.ambiguousIdentifier()
            self.state = 2589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2585
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__3 or _la==vbaParser.T__4):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2586
                    self.ambiguousIdentifier() 
                self.state = 2591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = vbaParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_fieldLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(vbaParser.MULT)
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2593
                self.match(vbaParser.WS)


            self.state = 2598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.INTEGERLITERAL]:
                self.state = 2596
                self.match(vbaParser.INTEGERLITERAL)
                pass
            elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.CHR, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR, vbaParser.IDENTIFIER]:
                self.state = 2597
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterrangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CertainIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,i)


        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_letterrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterrange" ):
                listener.enterLetterrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterrange" ):
                listener.exitLetterrange(self)




    def letterrange(self):

        localctx = vbaParser.LetterrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_letterrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2600
            self.certainIdentifier()
            self.state = 2609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 2602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2601
                    self.match(vbaParser.WS)


                self.state = 2604
                self.match(vbaParser.MINUS)
                self.state = 2606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2605
                    self.match(vbaParser.WS)


                self.state = 2608
                self.certainIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def COLON(self):
            return self.getToken(vbaParser.COLON, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lineLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineLabel" ):
                listener.enterLineLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineLabel" ):
                listener.exitLineLabel(self)




    def lineLabel(self):

        localctx = vbaParser.LineLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_lineLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            self.ambiguousIdentifier()
            self.state = 2612
            self.match(vbaParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXLITERAL(self):
            return self.getToken(vbaParser.HEXLITERAL, 0)

        def OCTLITERAL(self):
            return self.getToken(vbaParser.OCTLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(vbaParser.NULL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = vbaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2614
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (vbaParser.FALSE - 73)) | (1 << (vbaParser.NOTHING - 73)) | (1 << (vbaParser.NULL - 73)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (vbaParser.TRUE - 172)) | (1 << (vbaParser.STRINGLITERAL - 172)) | (1 << (vbaParser.OCTLITERAL - 172)) | (1 << (vbaParser.HEXLITERAL - 172)) | (1 << (vbaParser.SHORTLITERAL - 172)) | (1 << (vbaParser.INTEGERLITERAL - 172)) | (1 << (vbaParser.DOUBLELITERAL - 172)) | (1 << (vbaParser.DATELITERAL - 172)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def complexType(self):
            return self.getTypedRuleContext(vbaParser.ComplexTypeContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_vbatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVbatype" ):
                listener.enterVbatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVbatype" ):
                listener.exitVbatype(self)




    def vbatype(self):

        localctx = vbaParser.VbatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_vbatype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.state = 2616
                self.baseType()
                pass

            elif la_ == 2:
                self.state = 2617
                self.complexType()
                pass


            self.state = 2628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 2621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2620
                    self.match(vbaParser.WS)


                self.state = 2623
                self.match(vbaParser.LPAREN)
                self.state = 2625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2624
                    self.match(vbaParser.WS)


                self.state = 2627
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)




    def typeHint(self):

        localctx = vbaParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_typeHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = vbaParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def CHR(self):
            return self.getToken(vbaParser.CHR, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(vbaParser.NULL, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2634
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.CHR - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemComment" ):
                listener.enterRemComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemComment" ):
                listener.exitRemComment(self)




    def remComment(self):

        localctx = vbaParser.RemCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_remComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = vbaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfLineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def remComment(self):
            return self.getTypedRuleContext(vbaParser.RemCommentContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2640
                self.match(vbaParser.WS)


            self.state = 2646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [vbaParser.NEWLINE]:
                self.state = 2643
                self.match(vbaParser.NEWLINE)
                pass
            elif token in [vbaParser.COMMENT]:
                self.state = 2644
                self.comment()
                pass
            elif token in [vbaParser.REMCOMMENT]:
                self.state = 2645
                self.remComment()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 2648
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndOfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,453,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2659
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                    if la_ == 1:
                        self.state = 2651
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 2653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2652
                            self.match(vbaParser.WS)


                        self.state = 2655
                        self.match(vbaParser.COLON)
                        self.state = 2657
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                        if la_ == 1:
                            self.state = 2656
                            self.match(vbaParser.WS)


                        pass

             
                self.state = 2663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,453,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[101] = self.valueStmt_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def valueStmt_sempred(self, localctx:ValueStmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         




